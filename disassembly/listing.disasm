Disassembly Listing for ClockWC
Generated From:
C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/dist/xc8/production/ClockMatrix_main.production.elf
Sep 10, 2013 4:59:48 PM

---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/tmp75.c  -------------------------------
1:             /* ***************************************************************************
2:              **    tmp75.c
3:              **
4:              **  Project      : ClockMatrix_v0
5:              **  Target       : PIC18F14K50
6:              **  Description  : Project used to develop clock firmware.  Tested methods and
7:              **                 determined functionality (needed, wanted, and the possible)
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : 5/8/2013
12:             **  Branched     : 6/27/2013 -- started v2
13:             **
14:             **  R Hanlen <implod@gmail.com>
15:             ** ***************************************************************************/
16:            
17:            /*****************************************************************************
18:             **HEADER FILES
19:             *****************************************************************************/
20:            
21:            //Compiler-Standard
22:            #include <htc.h>
23:            #include <stdint.h>        /* For uint8_t definition */
24:            #include <stdbool.h>       /* For true/false definition */
25:            #include <string.h>
26:            
27:            //Project
28:            #include "global.h"
29:            #include "tmp75.h"
30:            #include "swI2C.h"
31:            #include "display.h"
32:            /*****************************************************************************
33:             **LOCAL FUNCTION PROTOTYPES
34:             *****************************************************************************/
35:            
36:            /*****************************************************************************
37:             **VARIABLES
38:             *****************************************************************************/
39:            
40:            /*****************************************************************************
41:             **FUNCTIONS
42:             *****************************************************************************/
43:            
44:            uint8_t LM75Init(void){
45:            
46:                if(AckPolling(LM75_ID)){
3516  0100     MOVLB 0x0
3518  6F68     MOVWF divisor, BANKED
351A  0E90     MOVLW 0x90
351C  0100     MOVLB 0x0
351E  0100     MOVLB 0x0
3520  6F67     MOVWF quotient, BANKED
3522  0100     MOVLB 0x0
3524  5168     MOVF divisor, W, BANKED
3526  EC3E     CALL 0x367C, 0
3528  F01B     NOP
352A  0900     IORLW 0x0
352C  A4D8     BTFSS STATUS, 2, ACCESS
352E  0012     RETURN 0
47:                    return(49);
48:                }
49:            
50:                StartI2C(); // Issue start signal
3530  ECEA     CALL 0x37D4, 0
3532  F01B     NOP
51:                TransmitI2C(LM75_ID); // Device
3534  0100     MOVLB 0x0
3536  6F68     MOVWF divisor, BANKED
3538  0E90     MOVLW 0x90
353A  0100     MOVLB 0x0
353C  0100     MOVLB 0x0
353E  6F63     MOVWF string_index, BANKED
3540  0100     MOVLB 0x0
3542  5168     MOVF divisor, W, BANKED
3544  EC14     CALL 0x2828, 0
3546  F014     NOP
52:                TransmitI2C(LM75_TEMP_REGISTER); // Address
3548  0100     MOVLB 0x0
354A  6F68     MOVWF divisor, BANKED
354C  0E00     MOVLW 0x0
354E  0100     MOVLB 0x0
3550  0100     MOVLB 0x0
3552  6F63     MOVWF string_index, BANKED
3554  0100     MOVLB 0x0
3556  5168     MOVF divisor, W, BANKED
3558  EC14     CALL 0x2828, 0
355A  F014     NOP
53:                StopI2C();
355C  EC1A     CALL 0x3834, 0
54:            
55:                return (48);
56:            }
57:            
58:            void LM75GetTemp(void){
59:            
60:                uint16_t tempHi,tempLo;
61:            
62:                // Address pointer does not auto advance when register is read.
63:                // Re-read temperature without having to write address each iteration.
64:                StartI2C(); // Issue repeated start signal
11DC  ECEA     CALL 0x37D4, 0
11DE  F01B     NOP
65:                TransmitI2C(0x91); // Device plus R/W=1
11E0  0100     MOVLB 0x0
11E2  6F7A     MOVWF result, BANKED
11E4  0E91     MOVLW 0x91
11E6  0100     MOVLB 0x0
11E8  0100     MOVLB 0x0
11EA  6F63     MOVWF string_index, BANKED
11EC  0100     MOVLB 0x0
11EE  517A     MOVF result, W, BANKED
11F0  EC14     CALL 0x2828, 0
11F2  F014     NOP
66:                tempHi = RecieveI2C(1); // Read seconds byte
11F4  0100     MOVLB 0x0
11F6  6F7A     MOVWF result, BANKED
11F8  0E01     MOVLW 0x1
11FA  0100     MOVLB 0x0
11FC  0100     MOVLB 0x0
11FE  6F63     MOVWF string_index, BANKED
1200  0100     MOVLB 0x0
1202  517A     MOVF result, W, BANKED
1204  ECC6     CALL 0x238C, 0
1206  F011     NOP
1208  0100     MOVLB 0x0
120A  6F7B     MOVWF cell_is_alive, BANKED
120C  0100     MOVLB 0x0
120E  517B     MOVF cell_is_alive, W, BANKED
1210  0100     MOVLB 0x0
1212  0100     MOVLB 0x0
1214  6F7F     MOVWF min, BANKED
1216  0100     MOVLB 0x0
1218  6B80     CLRF max, BANKED
67:                tempLo = RecieveI2C(0);
121A  0100     MOVLB 0x0
121C  6F7A     MOVWF result, BANKED
121E  0E00     MOVLW 0x0
1220  0100     MOVLB 0x0
1222  0100     MOVLB 0x0
1224  6F63     MOVWF string_index, BANKED
1226  0100     MOVLB 0x0
1228  517A     MOVF result, W, BANKED
122A  ECC6     CALL 0x238C, 0
122C  F011     NOP
122E  0100     MOVLB 0x0
1230  6F7B     MOVWF cell_is_alive, BANKED
1232  0100     MOVLB 0x0
1234  517B     MOVF cell_is_alive, W, BANKED
1236  0100     MOVLB 0x0
1238  0100     MOVLB 0x0
123A  6F81     MOVWF stringArray, BANKED
123C  0100     MOVLB 0x0
123E  6B82     CLRF numberString, BANKED
68:                StopI2C(); // Issue stop signal
1240  EC1A     CALL 0x3834, 0
1242  F01C     NOP
69:            
70:                temperature.celcsius = ((tempHi << 3)+(tempLo >> 5))*125/1000;
1244  0E00     MOVLW 0x0
1246  0100     MOVLB 0x0
1248  0100     MOVLB 0x0
124A  6F63     MOVWF string_index, BANKED
124C  0E7D     MOVLW 0x7D
124E  0100     MOVLB 0x0
1250  6F62     MOVWF c, BANKED
1252  0100     MOVLB 0x0
1254  C081     MOVFF stringArray, result
1256  F07A     NOP
1258  0100     MOVLB 0x0
125A  C082     MOVFF numberString, cell_is_alive
125C  F07B     NOP
125E  0E05     MOVLW 0x5
1260  0100     MOVLB 0x0
1262  6F7C     MOVWF alive_count, BANKED
1264  0100     MOVLB 0x0
1266  90D8     BCF STATUS, 0, ACCESS
1268  337B     RRCF cell_is_alive, F, BANKED
126A  337A     RRCF result, F, BANKED
126C  0100     MOVLB 0x0
126E  2F7C     DECFSZ alive_count, F, BANKED
1270  D7F9     BRA 0x1264
1272  0100     MOVLB 0x0
1274  C07F     MOVFF min, istring
1276  F07D     NOP
1278  0100     MOVLB 0x0
127A  C080     MOVFF max, row
127C  F07E     NOP
127E  0100     MOVLB 0x0
1280  90D8     BCF STATUS, 0, ACCESS
1282  377D     RLCF istring, F, BANKED
1284  377E     RLCF row, F, BANKED
1286  0100     MOVLB 0x0
1288  90D8     BCF STATUS, 0, ACCESS
128A  377D     RLCF istring, F, BANKED
128C  377E     RLCF row, F, BANKED
128E  0100     MOVLB 0x0
1290  90D8     BCF STATUS, 0, ACCESS
1292  377D     RLCF istring, F, BANKED
1294  377E     RLCF row, F, BANKED
1296  0100     MOVLB 0x0
1298  517A     MOVF result, W, BANKED
129A  0100     MOVLB 0x0
129C  257D     ADDWF istring, W, BANKED
129E  0100     MOVLB 0x0
12A0  0100     MOVLB 0x0
12A2  6F60     MOVWF __pcstackBANK0, BANKED
12A4  0100     MOVLB 0x0
12A6  517B     MOVF cell_is_alive, W, BANKED
12A8  0100     MOVLB 0x0
12AA  217E     ADDWFC row, W, BANKED
12AC  0100     MOVLB 0x0
12AE  6F61     MOVWF col, BANKED
12B0  ECDE     CALL 0x33BC, 0
12B2  F019     NOP
12B4  0100     MOVLB 0x0
12B6  C060     MOVFF __pcstackBANK0, dividend
12B8  F066     NOP
12BA  0100     MOVLB 0x0
12BC  C061     MOVFF col, quotient
12BE  F067     NOP
12C0  0E03     MOVLW 0x3
12C2  0100     MOVLB 0x0
12C4  0100     MOVLB 0x0
12C6  6F69     MOVWF row, BANKED
12C8  0EE8     MOVLW 0xE8
12CA  0100     MOVLB 0x0
12CC  6F68     MOVWF divisor, BANKED
12CE  EC54     CALL 0x2CA8, 0
12D0  F016     NOP
12D2  0100     MOVLB 0x0
12D4  0100     MOVLB 0x0
12D6  5166     MOVF dividend, W, BANKED
12D8  0100     MOVLB 0x0
12DA  0100     MOVLB 0x0
12DC  6FC2     MOVWF temperature, BANKED
71:                temperature.fahrenheit = (temperature.celcsius * 180/100)+32;
12DE  0100     MOVLB 0x0
12E0  0100     MOVLB 0x0
12E2  51C2     MOVF temperature, W, BANKED
12E4  0DB4     MULLW 0xB4
12E6  CFF3     MOVFF PRODL, __pcstackBANK0
12E8  F060     NOP
12EA  CFF4     MOVFF PRODH, col
12EC  F061     NOP
12EE  0E00     MOVLW 0x0
12F0  0100     MOVLB 0x0
12F2  0100     MOVLB 0x0
12F4  6F63     MOVWF string_index, BANKED
12F6  0E64     MOVLW 0x64
12F8  0100     MOVLB 0x0
12FA  6F62     MOVWF c, BANKED
12FC  EC3B     CALL 0x2276, 0
12FE  F011     NOP
1300  0100     MOVLB 0x0
1302  0100     MOVLB 0x0
1304  5160     MOVF __pcstackBANK0, W, BANKED
1306  0F20     ADDLW 0x20
1308  0100     MOVLB 0x0
130A  0100     MOVLB 0x0
130C  6FC3     MOVWF 0xC3, BANKED
72:                NumberToString(temperature.celcsius,temperature.cstring);
130E  0100     MOVLB 0x0
1310  0100     MOVLB 0x0
1312  C0C2     MOVFF temperature, min
1314  F074     NOP
1316  0100     MOVLB 0x0
1318  0100     MOVLB 0x0
131A  6B75     CLRF max, BANKED
131C  0100     MOVLB 0x0
131E  0E00     MOVLW 0x0
1320  0100     MOVLB 0x0
1322  0100     MOVLB 0x0
1324  6F77     MOVWF r, BANKED
1326  0100     MOVLB 0x0
1328  0EC4     MOVLW 0xC4
132A  0100     MOVLB 0x0
132C  6F76     MOVWF cc, BANKED
132E  EC2E     CALL 0xA5C, 0
1330  F005     NOP
73:                strcat(temperature.cstring,"C");
1332  0100     MOVLB 0x0
1334  0E00     MOVLW 0x0
1336  0100     MOVLB 0x0
1338  0100     MOVLB 0x0
133A  6F61     MOVWF col, BANKED
133C  0100     MOVLB 0x0
133E  0EC4     MOVLW 0xC4
1340  0100     MOVLB 0x0
1342  6F60     MOVWF __pcstackBANK0, BANKED
1344  0E3F     MOVLW 0x3F
1346  0100     MOVLB 0x0
1348  0100     MOVLB 0x0
134A  6F63     MOVWF string_index, BANKED
134C  0EA6     MOVLW 0xA6
134E  0100     MOVLB 0x0
1350  6F62     MOVWF c, BANKED
1352  EC48     CALL 0x3290, 0
1354  F019     NOP
74:                NumberToString(temperature.fahrenheit, temperature.fstring);
1356  0100     MOVLB 0x0
1358  0100     MOVLB 0x0
135A  C0C3     MOVFF 0xC3, min
135C  F074     NOP
135E  0100     MOVLB 0x0
1360  0100     MOVLB 0x0
1362  6B75     CLRF max, BANKED
1364  0100     MOVLB 0x0
1366  0E00     MOVLW 0x0
1368  0100     MOVLB 0x0
136A  0100     MOVLB 0x0
136C  6F77     MOVWF r, BANKED
136E  0100     MOVLB 0x0
1370  0EC8     MOVLW 0xC8
1372  0100     MOVLB 0x0
1374  6F76     MOVWF cc, BANKED
1376  EC2E     CALL 0xA5C, 0
1378  F005     NOP
75:                strcat(temperature.fstring,"F");
137A  0100     MOVLB 0x0
137C  0E00     MOVLW 0x0
137E  0100     MOVLB 0x0
1380  0100     MOVLB 0x0
1382  6F61     MOVWF col, BANKED
1384  0100     MOVLB 0x0
1386  0EC8     MOVLW 0xC8
1388  0100     MOVLB 0x0
138A  6F60     MOVWF __pcstackBANK0, BANKED
138C  0E3F     MOVLW 0x3F
138E  0100     MOVLB 0x0
1390  0100     MOVLB 0x0
1392  6F63     MOVWF string_index, BANKED
1394  0EFC     MOVLW 0xFC
1396  0100     MOVLB 0x0
1398  6F62     MOVWF c, BANKED
139A  EC48     CALL 0x3290, 0
139C  F019     NOP
76:            }
139E  0012     RETURN 0
77:            
78:            
79:            
80:            
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/system.c  ------------------------------
1:             /* ***************************************************************************
2:              **  system.c
3:              **
4:              **  Project      : ClockMatrix_v0
5:              **  Target       : PIC18F14K50
6:              **  Description  : Project used to develop clock firmware.  Tested methods and
7:              **                 determined functionality (needed, wanted, and the possible)
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : 5/8/2013
12:             **  Branched     : 6/27/2013 -- started v2
13:             **
14:             **  R Hanlen <implod@gmail.com>
15:             ** ***************************************************************************/
16:            
17:            /*****************************************************************************
18:             ** Files to Include
19:             *****************************************************************************/
20:            
21:            #include <htc.h>           /* HiTech General Includes */
22:            #include <stdint.h>        /* For uint8_t definition */
23:            #include <stdbool.h>       /* For true/false definition */
24:            
25:            #include "global.h"
26:            #include "system.h"
27:            #include "display.h"
28:            #include "swI2C.h"
29:            #include "DS1307.h"
30:            #include "tmp75.h"
31:            
32:            /*****************************************************************************
33:             ** Functions
34:             *****************************************************************************/
35:            
36:            
37:            
38:            
39:            
40:            
41:            
42:            void InitPeripherals(void){
43:            
44:                //Disable Global Interrupts
45:                di();
36BC  9EF2     BCF INTCON, 7, ACCESS
46:            
47:                //PUT MCU IN KNOWN/STARTING STATE
48:                //Turning off all Modules/Pins and Ports
49:                PINS_OFF();
36BE  0E00     MOVLW 0x0
36C0  6E89     MOVWF LATA, ACCESS
36C2  0E00     MOVLW 0x0
36C4  6E8A     MOVWF LATB, ACCESS
36C6  0E00     MOVLW 0x0
36C8  6E8B     MOVWF LATC, ACCESS
36CA  6892     SETF TRISA, ACCESS
36CC  6893     SETF TRISB, ACCESS
36CE  6894     SETF TRISC, ACCESS
50:                DIGITAL_PINS();
36D0  0E00     MOVLW 0x0
36D2  6E7E     MOVWF ANSEL, ACCESS
36D4  0E00     MOVLW 0x0
36D6  6E7F     MOVWF ANSELH, ACCESS
51:                PERIPHERALS_OFF();
36D8  90C2     BCF ADCON0, 0, ACCESS
36DA  9E6D     BCF CM1CON0, 7, ACCESS
36DC  9E6B     BCF CM2CON0, 7, ACCESS
36DE  9AC6     BCF SSPCON1, 5, ACCESS
36E0  9664     BCF UCON, 3, ACCESS
36E2  0E00     MOVLW 0x0
36E4  6E61     MOVWF UCFG, ACCESS
36E6  0E00     MOVLW 0x0
36E8  6EBD     MOVWF CCP1CON, ACCESS
36EA  9EAB     BCF RCSTA, 7, ACCESS
36EC  9E68     BCF SRCON0, 7, ACCESS
36EE  9EBA     BCF REFCON0, 7, ACCESS
36F0  9EBB     BCF REFCON1, 7, ACCESS
52:            
53:                //Buttons are for user input;
54:                UP_BUTTON_TRIS = INPUT;
36F2  8494     BSF TRISC, 2, ACCESS
55:                DOWN_BUTTON_TRIS = INPUT;
36F4  8094     BSF TRISC, 0, ACCESS
56:                ENTER_BUTTON_TRIS = INPUT;
36F6  8294     BSF TRISC, 1, ACCESS
57:            
58:            
59:            }
36F8  0012     RETURN 0
60:            
61:            void ExternalHardware(void){
62:            
63:                 DisplayInit();
38FE  ECD1     CALL 0x37A2, 0
3900  F01B     NOP
64:                InitI2C();
3902  EC88     CALL 0x3910, 0
3904  F01C     NOP
65:                RTCInit();
3906  ECD6     CALL 0x35AC, 0
3908  F01A     NOP
66:                LM75Init();
390A  EC8B     CALL 0x3516, 0
390C  F01A     NOP
67:                
68:            }
390E  0012     RETURN 0
69:            
70:            void InitTimersAndInterrupts(void){
71:            
72:                di();
34CA  9EF2     BCF INTCON, 7, ACCESS
73:            
74:                /*******Input Buttons*********/
75:            
76:                //Button pins are external interrupts with edge triggers
77:                //Setting triggers to falling edge
78:                INTEDG0 = 0;
34CC  9CF1     BCF INTCON2, 6, ACCESS
79:                INTEDG1 = 0;
34CE  9AF1     BCF INTCON2, 5, ACCESS
80:                INTEDG2 = 0;
34D0  98F1     BCF INTCON2, 4, ACCESS
81:                //Clear flags
82:                INT0IF = CLEAR;
34D2  92F2     BCF INTCON, 1, ACCESS
83:                INT1IF = CLEAR;
34D4  90F0     BCF INTCON3, 0, ACCESS
84:                INT2IF = CLEAR;
34D6  92F0     BCF INTCON3, 1, ACCESS
85:                //Set Priority Low
86:                INT1IP = LOW;
34D8  9CF0     BCF INTCON3, 6, ACCESS
87:                INT2IP = LOW;
34DA  9EF0     BCF INTCON3, 7, ACCESS
88:                //Enable
89:                INT0IE = ON;
34DC  88F2     BSF INTCON, 4, ACCESS
90:                INT1IE = ON;
34DE  86F0     BSF INTCON3, 3, ACCESS
91:                INT2IE = ON;
34E0  88F0     BSF INTCON3, 4, ACCESS
92:            
93:                /*Set up interrupt on timer0 to update the display
94:                 *Each call to the interrupt updates a single column
95:                 *and we want each column to be lit for  approx 200 microseconds...*/
96:            
97:                /*  FOSC = 48000000  */
98:                // Fosc is 48,000,000 so Fosc/4 is 12,000,000 ticks/sec
99:                // of 12 ticks/usec. With 1:16 prescale every timer tick is 1.3 usecs
100:               // 256 ticks is approx 300 microseconds
101:               TMR0L = 0; // Reset the timer0 counter
34E2  0E00     MOVLW 0x0
34E4  6ED6     MOVWF TMR0L, ACCESS
102:               INTCONbits.TMR0IF = 0; // Clear the interrupt flag
34E6  94F2     BCF INTCON, 2, ACCESS
103:               T0CON = 0b11000011; // Timer0 on, 8-bit and 1:16 prescaler
34E8  0EC3     MOVLW 0xC3
34EA  6ED5     MOVWF T0CON, ACCESS
104:               INTCON2bits.TMR0IP = 1; // Set priority high
34EC  84F1     BSF INTCON2, 2, ACCESS
105:               INTCONbits.TMR0IE = 1; // Enable the timer0 interrupt
34EE  8AF2     BSF INTCON, 5, ACCESS
106:           
107:           
108:               /**********Timer3***********/
109:           
110:               // FOSC/4 = 12MHz -> 12,000,000 ticks/sec -> 12,000 ticks/msec
111:               // Timer interrupts when = 65536.  65536 - 12000 = 53536
112:               // Reset timer value to 53536 for 1 millisecond tick.
113:               WRITETIMER3(53536);
34F0  0ED1     MOVLW 0xD1
34F2  6EB3     MOVWF TMR3H, ACCESS
34F4  0E20     MOVLW 0x20
34F6  6EB2     MOVWF TMR3L, ACCESS
114:               PIR2bits.TMR3IF = CLEAR; // Clear the interrupt flag
34F8  92A1     BCF PIR2, 1, ACCESS
115:               T3CON = 0b10000001; //16-bit enabled, 1:1 Prescaler, Fosc/4 clock, Timer3 on
34FA  0E81     MOVLW 0x81
34FC  6EB1     MOVWF T3CON, ACCESS
116:               IPR2bits.TMR3IP = 0; // Set priority low
34FE  92A2     BCF IPR2, 1, ACCESS
117:               PIE2bits.TMR3IE = ON; // Enable the timer3 interrupt
3500  82A0     BSF PIE2, 1, ACCESS
118:           
119:           
120:               /*****************Timer1****************/
121:               WRITETIMER1(0);
3502  0E00     MOVLW 0x0
3504  6ECF     MOVWF TMR1H, ACCESS
3506  0E00     MOVLW 0x0
3508  6ECE     MOVWF TMR1L, ACCESS
122:               T1CON = 0b10110001;
350A  0EB1     MOVLW 0xB1
350C  6ECD     MOVWF T1CON, ACCESS
123:                       //1-------      16 bit Enabled
124:                       //--11----      1:8 Prescale
125:                       //------0-      Fosc/4 is clock source
126:                       //-------1      On/Enabled
127:               /*****************ENABLE INTERUPTS**************/
128:               // enable interrupt priority
129:               RCONbits.IPEN = 1;
350E  8ED0     BSF RCON, 7, ACCESS
130:               // enable  low priority/peripheral interrupts
131:               INTCONbits.GIEL = 1;
3510  8CF2     BSF INTCON, 6, ACCESS
132:               //Turn on Global Interrupts
133:               ei();
3512  8EF2     BSF INTCON, 7, ACCESS
134:           
135:           
136:           }
3514  0012     RETURN 0
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/swI2C.c  -------------------------------
1:             /* ***************************************************************************
2:              **   I2C.c
3:              **
4:              **  Project      : ClockMatrix_v0
5:              **  Target       : PIC18F14K50
6:              **  Description  : Project used to develop clock firmware.  Tested methods and
7:              **                 determined functionality (needed, wanted, and the possible)
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : 5/8/2013
12:             **  Branched     : 6/27/2013 -- started v2
13:             **
14:             **  R Hanlen <implod@gmail.com>
15:             ** ***************************************************************************/
16:            
17:            
18:            
19:            //      Global Includes
20:            #include <htc.h>
21:            #include <stdint.h>
22:            
23:            //      Local Includes
24:            #include "global.h"
25:            #include "delay.h"
26:            #include "swI2C.h"
27:            
28:            
29:            //extern volatile struct i2cHardware i2cDevices;
30:            
31:            
32:            void InitI2C(void) {
33:            
34:                SCL = 0;
3910  9C8A     BCF LATB, 6, ACCESS
35:                SDA = 0;
3912  988A     BCF LATB, 4, ACCESS
36:                SDA_HI;
3914  8893     BSF TRISB, 4, ACCESS
37:                SCL_HI;
3916  8C93     BSF TRISB, 6, ACCESS
38:            }
3918  0012     RETURN 0
39:            
40:            void DelayI2C(unsigned char delay){
41:            
42:                DelayUs(delay);
38EA  0100     MOVLB 0x0
38EC  0100     MOVLB 0x0
38EE  C062     MOVFF c, __pcstackBANK0
38F0  F060     NOP
38F2  0100     MOVLB 0x0
38F4  0100     MOVLB 0x0
38F6  6B61     CLRF col, BANKED
38F8  EC29     CALL 0x3852, 0
38FA  F01C     NOP
43:            }
38FC  0012     RETURN 0
44:            
45:            //////////////////////////////////////////////////////////////////////
46:            // Start command
47:            //
48:            // SDA 1-0-0
49:            // SCL 1-1-0
50:            void StartI2C(void) {
51:                SDA_HI; // i2c start bit sequence
37D4  8893     BSF TRISB, 4, ACCESS
52:                SCL_HI;
37D6  8C93     BSF TRISB, 6, ACCESS
53:                SDA_LOW;
37D8  9893     BCF TRISB, 4, ACCESS
54:                DelayI2C(I2CSTARTDELAY);
37DA  0100     MOVLB 0x0
37DC  6F63     MOVWF string_index, BANKED
37DE  0E0F     MOVLW 0xF
37E0  0100     MOVLB 0x0
37E2  0100     MOVLB 0x0
37E4  6F62     MOVWF c, BANKED
37E6  0100     MOVLB 0x0
37E8  5163     MOVF string_index, W, BANKED
37EA  EC75     CALL 0x38EA, 0
37EC  F01C     NOP
55:                SCL_LOW;
37EE  9C93     BCF TRISB, 6, ACCESS
56:                DelayI2C(I2CCLOCKLOW);
37F0  0100     MOVLB 0x0
37F2  6F63     MOVWF string_index, BANKED
37F4  0E19     MOVLW 0x19
37F6  0100     MOVLB 0x0
37F8  0100     MOVLB 0x0
37FA  6F62     MOVWF c, BANKED
37FC  0100     MOVLB 0x0
37FE  5163     MOVF string_index, W, BANKED
3800  EC75     CALL 0x38EA, 0
3802  F01C     NOP
57:            }
3804  0012     RETURN 0
58:            
59:            //////////////////////////////////////////////////////////////////////
60:            // Stop command
61:            //
62:            // SDA 0-0-1
63:            // SCL 0-1-1
64:            //
65:            void StopI2C(void) {
66:                SDA_LOW; // i2c stop bit sequence
3834  9893     BCF TRISB, 4, ACCESS
67:                SCL_HI;
3836  8C93     BSF TRISB, 6, ACCESS
68:                DelayI2C(I2CSTOPDELAY);
3838  0100     MOVLB 0x0
383A  6F63     MOVWF string_index, BANKED
383C  0E0F     MOVLW 0xF
383E  0100     MOVLB 0x0
3840  0100     MOVLB 0x0
3842  6F62     MOVWF c, BANKED
3844  0100     MOVLB 0x0
3846  5163     MOVF string_index, W, BANKED
3848  EC75     CALL 0x38EA, 0
384A  F01C     NOP
69:                SDA_HI;
384C  8893     BSF TRISB, 4, ACCESS
70:                I2C_DLY();
384E  F000     NOP
71:            }
3850  0012     RETURN 0
72:            
73:            uint8_t RecieveI2C(char ack){
74:                unsigned char bitNo, byte = 0;
238C  0100     MOVLB 0x0
238E  6F64     MOVWF n, BANKED
2390  0E00     MOVLW 0x0
2392  0100     MOVLB 0x0
2394  0100     MOVLB 0x0
2396  6F65     MOVWF counter, BANKED
2398  0100     MOVLB 0x0
239A  5164     MOVF n, W, BANKED
75:            
76:                SDA_HI;
239C  8893     BSF TRISB, 4, ACCESS
77:                for (bitNo = 0; bitNo < 8; bitNo++) {
239E  0100     MOVLB 0x0
23A0  6F64     MOVWF n, BANKED
23A2  0E00     MOVLW 0x0
23A4  0100     MOVLB 0x0
23A6  0100     MOVLB 0x0
23A8  6F66     MOVWF dividend, BANKED
23AA  0100     MOVLB 0x0
23AC  5164     MOVF n, W, BANKED
23AE  D037     BRA 0x241E
2418  0100     MOVLB 0x0
241A  0100     MOVLB 0x0
241C  2B66     INCF dividend, F, BANKED
241E  0E07     MOVLW 0x7
2420  0100     MOVLB 0x0
2422  0100     MOVLB 0x0
2424  6566     CPFSGT dividend, BANKED
2426  D7C4     BRA 0x23B0
78:                    DelayI2C(I2CDATASETTLE);
23B0  0100     MOVLB 0x0
23B2  6F64     MOVWF n, BANKED
23B4  0E0A     MOVLW 0xA
23B6  0100     MOVLB 0x0
23B8  0100     MOVLB 0x0
23BA  6F62     MOVWF c, BANKED
23BC  0100     MOVLB 0x0
23BE  5164     MOVF n, W, BANKED
23C0  EC75     CALL 0x38EA, 0
23C2  F01C     NOP
79:                    byte <<= 1;
23C4  0100     MOVLB 0x0
23C6  90D8     BCF STATUS, 0, ACCESS
23C8  3765     RLCF counter, F, BANKED
80:            
81:                    SCL_HI;
23CA  8C93     BSF TRISB, 6, ACCESS
82:                    while(sCL == LOW); // wait for any SCL clock stretching
23CC  AC81     BTFSS PORTB, 6, ACCESS
23CE  D7FE     BRA 0x23CC
83:                    DelayI2C(I2CHALFCLOCK);
23D0  0100     MOVLB 0x0
23D2  6F64     MOVWF n, BANKED
23D4  0E0A     MOVLW 0xA
23D6  0100     MOVLB 0x0
23D8  0100     MOVLB 0x0
23DA  6F62     MOVWF c, BANKED
23DC  0100     MOVLB 0x0
23DE  5164     MOVF n, W, BANKED
23E0  EC75     CALL 0x38EA, 0
23E2  F01C     NOP
84:            
85:                    if (sDA == SET) {
23E4  A881     BTFSS PORTB, 4, ACCESS
23E6  D003     BRA 0x23EE
86:                        byte += 1;
23E8  0100     MOVLB 0x0
23EA  0100     MOVLB 0x0
23EC  2B65     INCF counter, F, BANKED
87:                    }
88:                    DelayI2C(I2CHALFCLOCK);
23EE  0100     MOVLB 0x0
23F0  6F64     MOVWF n, BANKED
23F2  0E0A     MOVLW 0xA
23F4  0100     MOVLB 0x0
23F6  0100     MOVLB 0x0
23F8  6F62     MOVWF c, BANKED
23FA  0100     MOVLB 0x0
23FC  5164     MOVF n, W, BANKED
23FE  EC75     CALL 0x38EA, 0
2400  F01C     NOP
89:                    SCL_LOW;
2402  9C93     BCF TRISB, 6, ACCESS
90:                    DelayI2C(I2CCLOCKLOW);
2404  0100     MOVLB 0x0
2406  6F64     MOVWF n, BANKED
2408  0E19     MOVLW 0x19
240A  0100     MOVLB 0x0
240C  0100     MOVLB 0x0
240E  6F62     MOVWF c, BANKED
2410  0100     MOVLB 0x0
2412  5164     MOVF n, W, BANKED
2414  EC75     CALL 0x38EA, 0
2416  F01C     NOP
91:                }
92:            
93:                if (ack) {
2428  0100     MOVLB 0x0
242A  0100     MOVLB 0x0
242C  5163     MOVF string_index, W, BANKED
242E  B4D8     BTFSC STATUS, 2, ACCESS
2430  D002     BRA 0x2436
94:                    SDA_LOW;
2432  9893     BCF TRISB, 4, ACCESS
95:                } else {
2434  D001     BRA 0x2438
96:                    SDA_HI;
2436  8893     BSF TRISB, 4, ACCESS
97:                }
98:            
99:                DelayI2C(I2CDATASETTLE);
2438  0100     MOVLB 0x0
243A  6F64     MOVWF n, BANKED
243C  0E0A     MOVLW 0xA
243E  0100     MOVLB 0x0
2440  0100     MOVLB 0x0
2442  6F62     MOVWF c, BANKED
2444  0100     MOVLB 0x0
2446  5164     MOVF n, W, BANKED
2448  EC75     CALL 0x38EA, 0
244A  F01C     NOP
100:               SCL_HI;
244C  8C93     BSF TRISB, 6, ACCESS
101:               DelayI2C(I2CCLOCKHIGH); // send (N)ACK bit
244E  0100     MOVLB 0x0
2450  6F64     MOVWF n, BANKED
2452  0E19     MOVLW 0x19
2454  0100     MOVLB 0x0
2456  0100     MOVLB 0x0
2458  6F62     MOVWF c, BANKED
245A  0100     MOVLB 0x0
245C  5164     MOVF n, W, BANKED
245E  EC75     CALL 0x38EA, 0
2460  F01C     NOP
102:               SCL_LOW;
2462  9C93     BCF TRISB, 6, ACCESS
103:               DelayI2C(I2CCLOCKLOW);
2464  0100     MOVLB 0x0
2466  6F64     MOVWF n, BANKED
2468  0E19     MOVLW 0x19
246A  0100     MOVLB 0x0
246C  0100     MOVLB 0x0
246E  6F62     MOVWF c, BANKED
2470  0100     MOVLB 0x0
2472  5164     MOVF n, W, BANKED
2474  EC75     CALL 0x38EA, 0
2476  F01C     NOP
104:               SDA_HI;
2478  8893     BSF TRISB, 4, ACCESS
105:               DelayI2C(I2CDATASETTLE);
247A  0100     MOVLB 0x0
247C  6F64     MOVWF n, BANKED
247E  0E0A     MOVLW 0xA
2480  0100     MOVLB 0x0
2482  0100     MOVLB 0x0
2484  6F62     MOVWF c, BANKED
2486  0100     MOVLB 0x0
2488  5164     MOVF n, W, BANKED
248A  EC75     CALL 0x38EA, 0
248C  F01C     NOP
106:               return byte;
248E  0100     MOVLB 0x0
107:           }
108:           
109:           uint8_t TransmitI2C(uint8_t byte) {
110:               uint8_t bitNo;
111:               uint8_t ack;
112:           
113:               for (bitNo = 0; bitNo < 8; bitNo++) {
2828  0100     MOVLB 0x0
282A  6F64     MOVWF n, BANKED
282C  0E00     MOVLW 0x0
282E  0100     MOVLB 0x0
2830  0100     MOVLB 0x0
2832  6F66     MOVWF dividend, BANKED
2834  0100     MOVLB 0x0
2836  5164     MOVF n, W, BANKED
2838  D02D     BRA 0x2894
288E  0100     MOVLB 0x0
2890  0100     MOVLB 0x0
2892  2B66     INCF dividend, F, BANKED
2894  0E07     MOVLW 0x7
2896  0100     MOVLB 0x0
2898  0100     MOVLB 0x0
289A  6566     CPFSGT dividend, BANKED
289C  D7CE     BRA 0x283A
114:                   if (byte & 0x80) {
283A  0100     MOVLB 0x0
283C  0100     MOVLB 0x0
283E  AF63     BTFSS string_index, 7, BANKED
2840  D002     BRA 0x2846
115:                       SDA_HI;
2842  8893     BSF TRISB, 4, ACCESS
116:                   }
2844  D001     BRA 0x2848
117:                   else {
118:                       SDA_LOW;
2846  9893     BCF TRISB, 4, ACCESS
119:                   }
120:                   DelayI2C(I2CDATASETTLE);
2848  0100     MOVLB 0x0
284A  6F64     MOVWF n, BANKED
284C  0E0A     MOVLW 0xA
284E  0100     MOVLB 0x0
2850  0100     MOVLB 0x0
2852  6F62     MOVWF c, BANKED
2854  0100     MOVLB 0x0
2856  5164     MOVF n, W, BANKED
2858  EC75     CALL 0x38EA, 0
285A  F01C     NOP
121:           
122:                   SCL_HI;
285C  8C93     BSF TRISB, 6, ACCESS
123:                   DelayI2C(I2CCLOCKHIGH);
285E  0100     MOVLB 0x0
2860  6F64     MOVWF n, BANKED
2862  0E19     MOVLW 0x19
2864  0100     MOVLB 0x0
2866  0100     MOVLB 0x0
2868  6F62     MOVWF c, BANKED
286A  0100     MOVLB 0x0
286C  5164     MOVF n, W, BANKED
286E  EC75     CALL 0x38EA, 0
2870  F01C     NOP
124:                   SCL_LOW;
2872  9C93     BCF TRISB, 6, ACCESS
125:                    DelayI2C(I2CCLOCKLOW);
2874  0100     MOVLB 0x0
2876  6F64     MOVWF n, BANKED
2878  0E19     MOVLW 0x19
287A  0100     MOVLB 0x0
287C  0100     MOVLB 0x0
287E  6F62     MOVWF c, BANKED
2880  0100     MOVLB 0x0
2882  5164     MOVF n, W, BANKED
2884  EC75     CALL 0x38EA, 0
2886  F01C     NOP
126:           
127:                    byte <<= 1;
2888  0100     MOVLB 0x0
288A  90D8     BCF STATUS, 0, ACCESS
288C  3763     RLCF string_index, F, BANKED
128:               }
129:               SDA_HI;
289E  8893     BSF TRISB, 4, ACCESS
130:               SCL_HI;
28A0  8C93     BSF TRISB, 6, ACCESS
131:               DelayI2C(I2CHALFCLOCK);
28A2  0100     MOVLB 0x0
28A4  6F64     MOVWF n, BANKED
28A6  0E0A     MOVLW 0xA
28A8  0100     MOVLB 0x0
28AA  0100     MOVLB 0x0
28AC  6F62     MOVWF c, BANKED
28AE  0100     MOVLB 0x0
28B0  5164     MOVF n, W, BANKED
28B2  EC75     CALL 0x38EA, 0
28B4  F01C     NOP
132:               ack = sDA; // possible ACK bit
28B6  0E00     MOVLW 0x0
28B8  B881     BTFSC PORTB, 4, ACCESS
28BA  0E01     MOVLW 0x1
28BC  0100     MOVLB 0x0
28BE  0100     MOVLB 0x0
28C0  6F65     MOVWF counter, BANKED
133:               DelayI2C(I2CHALFCLOCK);
28C2  0100     MOVLB 0x0
28C4  6F64     MOVWF n, BANKED
28C6  0E0A     MOVLW 0xA
28C8  0100     MOVLB 0x0
28CA  0100     MOVLB 0x0
28CC  6F62     MOVWF c, BANKED
28CE  0100     MOVLB 0x0
28D0  5164     MOVF n, W, BANKED
28D2  EC75     CALL 0x38EA, 0
28D4  F01C     NOP
134:               SCL_LOW;
28D6  9C93     BCF TRISB, 6, ACCESS
135:               DelayI2C(I2CCLOCKLOW);
28D8  0100     MOVLB 0x0
28DA  6F64     MOVWF n, BANKED
28DC  0E19     MOVLW 0x19
28DE  0100     MOVLB 0x0
28E0  0100     MOVLB 0x0
28E2  6F62     MOVWF c, BANKED
28E4  0100     MOVLB 0x0
28E6  5164     MOVF n, W, BANKED
28E8  EC75     CALL 0x38EA, 0
28EA  F01C     NOP
136:               return ack;
28EC  0100     MOVLB 0x0
137:           }
138:           
139:           uint8_t AckPolling(uint8_t device){
140:           
141:               StartI2C();
367C  ECEA     CALL 0x37D4, 0
367E  F01B     NOP
142:           
143:               if (TransmitI2C(device)){
3680  C067     MOVFF quotient, string_index
3682  F063     NOP
3684  EC14     CALL 0x2828, 0
3686  F014     NOP
3688  0900     IORLW 0x0
368A  B4D8     BTFSC STATUS, 2, ACCESS
368C  D013     BRA 0x36B4
144:                   StopI2C();
368E  EC1A     CALL 0x3834, 0
3690  F01C     NOP
145:                   StartI2C();
3692  ECEA     CALL 0x37D4, 0
3694  F01B     NOP
146:           
147:                   if (TransmitI2C(device)){
3696  C067     MOVFF quotient, string_index
3698  F063     NOP
369A  EC14     CALL 0x2828, 0
369C  F014     NOP
369E  0900     IORLW 0x0
36A0  B4D8     BTFSC STATUS, 2, ACCESS
36A2  D004     BRA 0x36AC
148:                       StopI2C();
36A4  EC1A     CALL 0x3834, 0
36A6  F01C     NOP
149:                       return(1);
36A8  0E01     MOVLW 0x1
36AA  0012     RETURN 0
150:                   }else{
151:                       StopI2C();
36AC  EC1A     CALL 0x3834, 0
36AE  F01C     NOP
152:                       return(0);
36B0  0E00     MOVLW 0x0
36B2  0012     RETURN 0
153:                   }
154:               }else{
155:              StopI2C();
36B4  EC1A     CALL 0x3834, 0
36B6  F01C     NOP
156:              return(0);
36B8  0E00     MOVLW 0x0
157:               }
158:           }
159:           
160:           
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/main.c  --------------------------------
1:             /******************************************************************************/
2:             /* Files to Include                                                           */
3:             /******************************************************************************/
4:             
5:             #include <htc.h>           /* Global Header File */
6:             #include <stdint.h>        /* For uint8_t definition */
7:             //#include <stdbool.h>       /* For true/false definition */
8:             #include <string.h>
9:             
10:            #include "global.h"
11:            #include "system.h"        /* System funct/params, like osc/peripheral config */
12:            #include "display.h"
13:            #include "swI2C.h"
14:            #include "DS1307.h"
15:            #include "delay.h"
16:            #include "input.h"
17:            #include "tmp75.h"
18:            #include "game.h"
19:            
20:            /******************************************************************************/
21:            /* User Global Variable Declaration                                           */
22:            /******************************************************************************/
23:            
24:            volatile unsigned char currentState = 1;
25:            volatile unsigned long milliseconds = 0;
26:            
27:            volatile bit scrollInt_flag = 0;
28:            volatile int8_t buttonInt_flag = 0;
29:            volatile bit tscale_flag = 0;
30:            volatile bit timedate_flag = 0;
31:            uint8_t prevState = 0;
32:            volatile int16_t frameDelay = 500;
33:            //volatile uint8_t newFrame = 0;
34:            /******************************************************************************/
35:            /* Main Program                                                               */
36:            
37:            /******************************************************************************/
38:            
39:            
40:            void main(void){
41:            
42:                /* Initialize I/O and MCU Peripherals */
43:                InitPeripherals();
06BC  EC5E     CALL 0x36BC, 0
06BE  F01B     NOP
44:            
45:                /* Configure external hardware (i.e. -- ic's, sensors, displays)*/
46:                ExternalHardware();
06C0  EC7F     CALL 0x38FE, 0
06C2  F01C     NOP
47:            
48:                /* Configure MCU timers and interrupts needed*/
49:                InitTimersAndInterrupts();
06C4  EC65     CALL 0x34CA, 0
06C6  F01A     NOP
50:            
51:                while(milliseconds < 1000) {
06C8  D00E     BRA 0x6E6
06E6  0EE8     MOVLW 0xE8
06E8  0100     MOVLB 0x0
06EA  0100     MOVLB 0x0
06EC  5D97     SUBWF milliseconds, W, BANKED
06EE  0E03     MOVLW 0x3
06F0  0100     MOVLB 0x0
06F2  5998     SUBWFB 0x98, W, BANKED
06F4  0E00     MOVLW 0x0
06F6  0100     MOVLB 0x0
06F8  5999     SUBWFB 0x99, W, BANKED
06FA  0E00     MOVLW 0x0
06FC  0100     MOVLB 0x0
06FE  0100     MOVLB 0x0
0700  599A     SUBWFB 0x9A, W, BANKED
0702  A0D8     BTFSS STATUS, 0, ACCESS
0704  D7E2     BRA 0x6CA
52:                    if (buttonInt_flag == BUTTON_ENTER) {
06CA  0100     MOVLB 0x0
06CC  0100     MOVLB 0x0
06CE  519E     MOVF buttonInt_flag, W, BANKED
06D0  0A02     XORLW 0x2
06D2  A4D8     BTFSS STATUS, 2, ACCESS
06D4  D008     BRA 0x6E6
53:                        InputTime();
06D6  EC8C     CALL 0xD18, 0
06D8  F006     NOP
54:                        RTCSetTime();
06DA  ECA9     CALL 0x2752, 0
06DC  F013     NOP
55:                        buttonInt_flag = 0;
06DE  0E00     MOVLW 0x0
06E0  0100     MOVLB 0x0
06E2  0100     MOVLB 0x0
06E4  6F9E     MOVWF buttonInt_flag, BANKED
56:                    }
57:                }
58:                /* Main loop*/
59:                while(1) {
60:            
61:                    RTCGetDateTime();
0706  EC18     CALL 0x1A30, 0
0708  F00D     NOP
62:                    LM75GetTemp();
070A  ECEE     CALL 0x11DC, 0
070C  F008     NOP
63:            
64:                    if (scrollInt_flag) {
070E  0100     MOVLB 0x0
0710  A047     BTFSS scrollInt_flag, 0, ACCESS
0712  D002     BRA 0x718
65:                        scrollInt_flag = CLEAR;
0714  0100     MOVLB 0x0
0716  9047     BCF scrollInt_flag, 0, ACCESS
66:                    }
67:            
68:                    if (buttonInt_flag != CLEAR) {
0718  0100     MOVLB 0x0
071A  0100     MOVLB 0x0
071C  519E     MOVF buttonInt_flag, W, BANKED
071E  B4D8     BTFSC STATUS, 2, ACCESS
0720  D182     BRA 0xA26
69:                        CheckButton();
0722  ECFD     CALL 0x1FFA, 0
0724  F00F     NOP
70:                        buttonInt_flag = CLEAR;
0726  0E00     MOVLW 0x0
0728  0100     MOVLB 0x0
072A  0100     MOVLB 0x0
072C  6F9E     MOVWF buttonInt_flag, BANKED
072E  D17B     BRA 0xA26
71:                    }
72:            
73:                    switch (currentState) {
0A26  0100     MOVLB 0x0
0A28  0100     MOVLB 0x0
0A2A  51CE     MOVF currentState, W, BANKED
0A2C  0A01     XORLW 0x1
0A2E  B4D8     BTFSC STATUS, 2, ACCESS
0A30  D67F     BRA 0x730
0A32  0A03     XORLW 0x3
0A34  B4D8     BTFSC STATUS, 2, ACCESS
0A36  D6D0     BRA 0x7D8
0A38  0A01     XORLW 0x1
0A3A  B4D8     BTFSC STATUS, 2, ACCESS
0A3C  D75F     BRA 0x8FC
0A3E  0A07     XORLW 0x7
0A40  B4D8     BTFSC STATUS, 2, ACCESS
0A42  D75F     BRA 0x902
0A44  0A01     XORLW 0x1
0A46  B4D8     BTFSC STATUS, 2, ACCESS
0A48  D7A5     BRA 0x994
0A4A  0A03     XORLW 0x3
0A4C  B4D8     BTFSC STATUS, 2, ACCESS
0A4E  D7D4     BRA 0x9F8
0A50  0A01     XORLW 0x1
0A52  B4D8     BTFSC STATUS, 2, ACCESS
0A54  D7DD     BRA 0xA10
74:                        case TIME_NUMERICAL:
75:                            displayString[0] = '\0';
0730  0100     MOVLB 0x0
0732  6F8D     MOVWF 0x8D, BANKED
0734  0E00     MOVLW 0x0
0736  0101     MOVLB 0x1
0738  0101     MOVLB 0x1
073A  6F00     MOVWF 0x0, BANKED
073C  0100     MOVLB 0x0
073E  518D     MOVF 0x8D, W, BANKED
76:                            if(timedate_flag) strcat(displayString, dateTime.dstring);
0740  0100     MOVLB 0x0
0742  A247     BTFSS scrollInt_flag, 1, ACCESS
0744  D015     BRA 0x770
0746  0101     MOVLB 0x1
0748  0E01     MOVLW 0x1
074A  0100     MOVLB 0x0
074C  0100     MOVLB 0x0
074E  6F61     MOVWF col, BANKED
0750  0101     MOVLB 0x1
0752  0E00     MOVLW 0x0
0754  0100     MOVLB 0x0
0756  6F60     MOVWF __pcstackBANK0, BANKED
0758  0E39     MOVLW 0x39
075A  0100     MOVLB 0x0
075C  6F8D     MOVWF 0x8D, BANKED
075E  0E00     MOVLW 0x0
0760  6F8E     MOVWF 0x8E, BANKED
0762  C08D     MOVFF 0x8D, c
0764  F062     NOP
0766  C08E     MOVFF 0x8E, string_index
0768  F063     NOP
076A  EC48     CALL 0x3290, 0
076C  F019     NOP
076E  D014     BRA 0x798
77:                            else strcat(displayString, dateTime.tstring);
0770  0101     MOVLB 0x1
0772  0E01     MOVLW 0x1
0774  0100     MOVLB 0x0
0776  0100     MOVLB 0x0
0778  6F61     MOVWF col, BANKED
077A  0101     MOVLB 0x1
077C  0E00     MOVLW 0x0
077E  0100     MOVLB 0x0
0780  6F60     MOVWF __pcstackBANK0, BANKED
0782  0E33     MOVLW 0x33
0784  0100     MOVLB 0x0
0786  6F8D     MOVWF 0x8D, BANKED
0788  0E00     MOVLW 0x0
078A  6F8E     MOVWF 0x8E, BANKED
078C  C08D     MOVFF 0x8D, c
078E  F062     NOP
0790  C08E     MOVFF 0x8E, string_index
0792  F063     NOP
0794  EC48     CALL 0x3290, 0
0796  F019     NOP
78:                            DisplayString();
0798  ECAB     CALL 0x1556, 0
079A  F00A     NOP
79:                            display.cols[dateTime.sec / 4] |= (1 << 7);
079C  0100     MOVLB 0x0
079E  C02B     MOVFF dateTime, __pcstackBANK0
07A0  F060     NOP
07A2  0100     MOVLB 0x0
07A4  0100     MOVLB 0x0
07A6  6B61     CLRF col, BANKED
07A8  0E00     MOVLW 0x0
07AA  0100     MOVLB 0x0
07AC  0100     MOVLB 0x0
07AE  6F63     MOVWF string_index, BANKED
07B0  0E04     MOVLW 0x4
07B2  0100     MOVLB 0x0
07B4  6F62     MOVWF c, BANKED
07B6  EC3B     CALL 0x2276, 0
07B8  F011     NOP
07BA  0100     MOVLB 0x0
07BC  0EA3     MOVLW 0xA3
07BE  0100     MOVLB 0x0
07C0  0100     MOVLB 0x0
07C2  2560     ADDWF __pcstackBANK0, W, BANKED
07C4  6ED9     MOVWF FSR2L, ACCESS
07C6  0100     MOVLB 0x0
07C8  0E00     MOVLW 0x0
07CA  0100     MOVLB 0x0
07CC  0100     MOVLB 0x0
07CE  2161     ADDWFC col, W, BANKED
07D0  6EDA     MOVWF FSR2H, ACCESS
07D2  0E00     MOVLW 0x0
07D4  8EDB     BSF PLUSW2, 7, ACCESS
80:                            break;
07D6  D13F     BRA 0xA56
81:            
82:                        case TIME_STRING:
83:                            displayString[0] = '\0';
07D8  0100     MOVLB 0x0
07DA  6F8D     MOVWF 0x8D, BANKED
07DC  0E00     MOVLW 0x0
07DE  0101     MOVLB 0x1
07E0  0101     MOVLB 0x1
07E2  6F00     MOVWF 0x0, BANKED
07E4  0100     MOVLB 0x0
07E6  518D     MOVF 0x8D, W, BANKED
84:                            strcat(displayString, leadIn);
07E8  0101     MOVLB 0x1
07EA  0E01     MOVLW 0x1
07EC  0100     MOVLB 0x0
07EE  0100     MOVLB 0x0
07F0  6F61     MOVWF col, BANKED
07F2  0101     MOVLB 0x1
07F4  0E00     MOVLW 0x0
07F6  0100     MOVLB 0x0
07F8  6F60     MOVWF __pcstackBANK0, BANKED
07FA  0E3E     MOVLW 0x3E
07FC  0100     MOVLB 0x0
07FE  0100     MOVLB 0x0
0800  6F63     MOVWF string_index, BANKED
0802  0EF6     MOVLW 0xF6
0804  0100     MOVLB 0x0
0806  6F62     MOVWF c, BANKED
0808  EC48     CALL 0x3290, 0
080A  F019     NOP
85:                            strcat(displayString, "IT IS ");
080C  0101     MOVLB 0x1
080E  0E01     MOVLW 0x1
0810  0100     MOVLB 0x0
0812  0100     MOVLB 0x0
0814  6F61     MOVWF col, BANKED
0816  0101     MOVLB 0x1
0818  0E00     MOVLW 0x0
081A  0100     MOVLB 0x0
081C  6F60     MOVWF __pcstackBANK0, BANKED
081E  0E3F     MOVLW 0x3F
0820  0100     MOVLB 0x0
0822  0100     MOVLB 0x0
0824  6F63     MOVWF string_index, BANKED
0826  0E10     MOVLW 0x10
0828  0100     MOVLB 0x0
082A  6F62     MOVWF c, BANKED
082C  EC48     CALL 0x3290, 0
082E  F019     NOP
86:                            strcat(displayString, temperature.cstring);
0830  0101     MOVLB 0x1
0832  0E01     MOVLW 0x1
0834  0100     MOVLB 0x0
0836  0100     MOVLB 0x0
0838  6F61     MOVWF col, BANKED
083A  0101     MOVLB 0x1
083C  0E00     MOVLW 0x0
083E  0100     MOVLB 0x0
0840  6F60     MOVWF __pcstackBANK0, BANKED
0842  0EC4     MOVLW 0xC4
0844  0100     MOVLB 0x0
0846  6F8D     MOVWF 0x8D, BANKED
0848  0E00     MOVLW 0x0
084A  6F8E     MOVWF 0x8E, BANKED
084C  C08D     MOVFF 0x8D, c
084E  F062     NOP
0850  C08E     MOVFF 0x8E, string_index
0852  F063     NOP
0854  EC48     CALL 0x3290, 0
0856  F019     NOP
87:                            strcat(displayString, " AT ");
0858  0101     MOVLB 0x1
085A  0E01     MOVLW 0x1
085C  0100     MOVLB 0x0
085E  0100     MOVLB 0x0
0860  6F61     MOVWF col, BANKED
0862  0101     MOVLB 0x1
0864  0E00     MOVLW 0x0
0866  0100     MOVLB 0x0
0868  6F60     MOVWF __pcstackBANK0, BANKED
086A  0E3F     MOVLW 0x3F
086C  0100     MOVLB 0x0
086E  0100     MOVLB 0x0
0870  6F63     MOVWF string_index, BANKED
0872  0E43     MOVLW 0x43
0874  0100     MOVLB 0x0
0876  6F62     MOVWF c, BANKED
0878  EC48     CALL 0x3290, 0
087A  F019     NOP
88:                            strcat(displayString, dateTime.tstring);
087C  0101     MOVLB 0x1
087E  0E01     MOVLW 0x1
0880  0100     MOVLB 0x0
0882  0100     MOVLB 0x0
0884  6F61     MOVWF col, BANKED
0886  0101     MOVLB 0x1
0888  0E00     MOVLW 0x0
088A  0100     MOVLB 0x0
088C  6F60     MOVWF __pcstackBANK0, BANKED
088E  0E33     MOVLW 0x33
0890  0100     MOVLB 0x0
0892  6F8D     MOVWF 0x8D, BANKED
0894  0E00     MOVLW 0x0
0896  6F8E     MOVWF 0x8E, BANKED
0898  C08D     MOVFF 0x8D, c
089A  F062     NOP
089C  C08E     MOVFF 0x8E, string_index
089E  F063     NOP
08A0  EC48     CALL 0x3290, 0
08A2  F019     NOP
89:                            strcat(displayString, " ON ");
08A4  0101     MOVLB 0x1
08A6  0E01     MOVLW 0x1
08A8  0100     MOVLB 0x0
08AA  0100     MOVLB 0x0
08AC  6F61     MOVWF col, BANKED
08AE  0101     MOVLB 0x1
08B0  0E00     MOVLW 0x0
08B2  0100     MOVLB 0x0
08B4  6F60     MOVWF __pcstackBANK0, BANKED
08B6  0E3F     MOVLW 0x3F
08B8  0100     MOVLB 0x0
08BA  0100     MOVLB 0x0
08BC  6F63     MOVWF string_index, BANKED
08BE  0E3E     MOVLW 0x3E
08C0  0100     MOVLB 0x0
08C2  6F62     MOVWF c, BANKED
08C4  EC48     CALL 0x3290, 0
08C6  F019     NOP
90:                            strcat(displayString, DateStringLong());
08C8  EC8E     CALL 0x11C, 0
08CA  F000     NOP
08CC  0100     MOVLB 0x0
08CE  C069     MOVFF row, 0x95
08D0  F095     NOP
08D2  0100     MOVLB 0x0
08D4  C06A     MOVFF col, 0x96
08D6  F096     NOP
08D8  0101     MOVLB 0x1
08DA  0E01     MOVLW 0x1
08DC  0100     MOVLB 0x0
08DE  0100     MOVLB 0x0
08E0  6F61     MOVWF col, BANKED
08E2  0101     MOVLB 0x1
08E4  0E00     MOVLW 0x0
08E6  0100     MOVLB 0x0
08E8  6F60     MOVWF __pcstackBANK0, BANKED
08EA  C095     MOVFF 0x95, c
08EC  F062     NOP
08EE  C096     MOVFF 0x96, string_index
08F0  F063     NOP
08F2  EC48     CALL 0x3290, 0
08F4  F019     NOP
91:                            DisplayScrollText();
08F6  ECE5     CALL 0xFCA, 0
08F8  F007     NOP
92:                            break;
08FA  D0AD     BRA 0xA56
93:            
94:                        case TIME_BINARY:
95:                            BinaryTime();
08FC  EC98     CALL 0x1D30, 0
08FE  F00E     NOP
96:                            break;
0900  D0AA     BRA 0xA56
97:            
98:                        case TEMP:
99:                            displayString[0] = '\0';
0902  0100     MOVLB 0x0
0904  6F8D     MOVWF 0x8D, BANKED
0906  0E00     MOVLW 0x0
0908  0101     MOVLB 0x1
090A  0101     MOVLB 0x1
090C  6F00     MOVWF 0x0, BANKED
090E  0100     MOVLB 0x0
0910  518D     MOVF 0x8D, W, BANKED
100:                           strcat(displayString, " ");
0912  0101     MOVLB 0x1
0914  0E01     MOVLW 0x1
0916  0100     MOVLB 0x0
0918  0100     MOVLB 0x0
091A  6F61     MOVWF col, BANKED
091C  0101     MOVLB 0x1
091E  0E00     MOVLW 0x0
0920  0100     MOVLB 0x0
0922  6F60     MOVWF __pcstackBANK0, BANKED
0924  0E3F     MOVLW 0x3F
0926  0100     MOVLB 0x0
0928  0100     MOVLB 0x0
092A  6F63     MOVWF string_index, BANKED
092C  0E9E     MOVLW 0x9E
092E  0100     MOVLB 0x0
0930  6F62     MOVWF c, BANKED
0932  EC48     CALL 0x3290, 0
0934  F019     NOP
101:                           if (tscale_flag == FAHRENHEIT) strcat(displayString, temperature.fstring);
0936  0100     MOVLB 0x0
0938  A447     BTFSS scrollInt_flag, 2, ACCESS
093A  D015     BRA 0x966
093C  0101     MOVLB 0x1
093E  0E01     MOVLW 0x1
0940  0100     MOVLB 0x0
0942  0100     MOVLB 0x0
0944  6F61     MOVWF col, BANKED
0946  0101     MOVLB 0x1
0948  0E00     MOVLW 0x0
094A  0100     MOVLB 0x0
094C  6F60     MOVWF __pcstackBANK0, BANKED
094E  0EC8     MOVLW 0xC8
0950  0100     MOVLB 0x0
0952  6F8D     MOVWF 0x8D, BANKED
0954  0E00     MOVLW 0x0
0956  6F8E     MOVWF 0x8E, BANKED
0958  C08D     MOVFF 0x8D, c
095A  F062     NOP
095C  C08E     MOVFF 0x8E, string_index
095E  F063     NOP
0960  EC48     CALL 0x3290, 0
0962  F019     NOP
0964  D014     BRA 0x98E
102:                           else strcat(displayString, temperature.cstring);
0966  0101     MOVLB 0x1
0968  0E01     MOVLW 0x1
096A  0100     MOVLB 0x0
096C  0100     MOVLB 0x0
096E  6F61     MOVWF col, BANKED
0970  0101     MOVLB 0x1
0972  0E00     MOVLW 0x0
0974  0100     MOVLB 0x0
0976  6F60     MOVWF __pcstackBANK0, BANKED
0978  0EC4     MOVLW 0xC4
097A  0100     MOVLB 0x0
097C  6F8D     MOVWF 0x8D, BANKED
097E  0E00     MOVLW 0x0
0980  6F8E     MOVWF 0x8E, BANKED
0982  C08D     MOVFF 0x8D, c
0984  F062     NOP
0986  C08E     MOVFF 0x8E, string_index
0988  F063     NOP
098A  EC48     CALL 0x3290, 0
098C  F019     NOP
103:                           DisplayString();
098E  ECAB     CALL 0x1556, 0
0990  F00A     NOP
104:                           break;
0992  D061     BRA 0xA56
105:           
106:                       case PATTERN:
107:                           if((milliseconds & frameDelay) ==0 ){
0994  0100     MOVLB 0x0
0996  C0CC     MOVFF frameDelay, 0x8D
0998  F08D     NOP
099A  0100     MOVLB 0x0
099C  C0CD     MOVFF 0xCD, 0x8E
099E  F08E     NOP
09A0  0E00     MOVLW 0x0
09A2  0100     MOVLB 0x0
09A4  BF8E     BTFSC 0x8E, 7, BANKED
09A6  0EFF     MOVLW 0xFF
09A8  6F8F     MOVWF 0x8F, BANKED
09AA  6F90     MOVWF 0x90, BANKED
09AC  0100     MOVLB 0x0
09AE  0100     MOVLB 0x0
09B0  5197     MOVF milliseconds, W, BANKED
09B2  0100     MOVLB 0x0
09B4  158D     ANDWF 0x8D, W, BANKED
09B6  0100     MOVLB 0x0
09B8  6F91     MOVWF 0x91, BANKED
09BA  0100     MOVLB 0x0
09BC  0100     MOVLB 0x0
09BE  5198     MOVF 0x98, W, BANKED
09C0  0100     MOVLB 0x0
09C2  158E     ANDWF 0x8E, W, BANKED
09C4  0100     MOVLB 0x0
09C6  6F92     MOVWF 0x92, BANKED
09C8  0100     MOVLB 0x0
09CA  0100     MOVLB 0x0
09CC  5199     MOVF 0x99, W, BANKED
09CE  0100     MOVLB 0x0
09D0  158F     ANDWF 0x8F, W, BANKED
09D2  0100     MOVLB 0x0
09D4  6F93     MOVWF 0x93, BANKED
09D6  0100     MOVLB 0x0
09D8  0100     MOVLB 0x0
09DA  519A     MOVF 0x9A, W, BANKED
09DC  0100     MOVLB 0x0
09DE  1590     ANDWF 0x90, W, BANKED
09E0  0100     MOVLB 0x0
09E2  6F94     MOVWF 0x94, BANKED
09E4  0100     MOVLB 0x0
09E6  5194     MOVF 0x94, W, BANKED
09E8  1191     IORWF 0x91, W, BANKED
09EA  1192     IORWF 0x92, W, BANKED
09EC  1193     IORWF 0x93, W, BANKED
09EE  A4D8     BTFSS STATUS, 2, ACCESS
09F0  D032     BRA 0xA56
108:                               Checkerboard();
09F2  EC98     CALL 0x3130, 0
09F4  F018     NOP
09F6  D02F     BRA 0xA56
109:                           }
110:                           break;
111:           
112:                       case TIMER:
113:                           if(prevState != currentState) init_game();
09F8  0100     MOVLB 0x0
09FA  0100     MOVLB 0x0
09FC  51A1     MOVF prevState, W, BANKED
09FE  0100     MOVLB 0x0
0A00  0100     MOVLB 0x0
0A02  19CE     XORWF currentState, W, BANKED
0A04  A4D8     BTFSS STATUS, 2, ACCESS
0A06  EC7D     CALL 0x36FA, 0
0A08  F01B     NOP
114:                           
115:                           game_loop();
0A0A  EC89     CALL 0x2F12, 0
0A0C  F017     NOP
116:           //                displayString[0] = '\0';
117:           //                strcat(displayString, timer.string);
118:           //                DisplayString();
119:                           break;
0A0E  D023     BRA 0xA56
120:           
121:                       case SETTIMER:
122:                           SetTimer();
0A10  EC7A     CALL 0x28F4, 0
0A12  F014     NOP
123:                           buttonInt_flag = CLEAR;
0A14  0E00     MOVLW 0x0
0A16  0100     MOVLB 0x0
0A18  0100     MOVLB 0x0
0A1A  6F9E     MOVWF buttonInt_flag, BANKED
124:                           currentState = TIME_NUMERICAL;
0A1C  0E01     MOVLW 0x1
0A1E  0100     MOVLB 0x0
0A20  0100     MOVLB 0x0
0A22  6FCE     MOVWF currentState, BANKED
125:                           break;
0A24  D018     BRA 0xA56
126:           
127:                   }/**SWITCH(CURRENTSTATE)**/
128:           
129:                   prevState = currentState;
0A56  C0CE     MOVFF currentState, prevState
130:           
131:               }/**WHILE**/
132:           }/**MAIN**/
133:           
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/interrupts.c  --------------------------
1:             /* ***************************************************************************
2:              **  interrupts.c
3:              **
4:              **  Project      : ClockMatrix_v0
5:              **  Target       : PIC18F14K50
6:              **  Description  : Project used to develop clock firmware.  Tested methods and
7:              **                 determined functionality (needed, wanted, and the possible)
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : 5/8/2013
12:             **  Branched     : 6/27/2013 -- started v2
13:             **
14:             **  R Hanlen <implod@gmail.com>
15:             ** ***************************************************************************/
16:            
17:            /*****************************************************************************
18:             ** Files to Include
19:             *****************************************************************************/
20:            
21:            #include <htc.h>            /* HiTech General Includes */
22:            #include <stdint.h>         /* For uint8_t definition */
23:            //#include <stdbool.h>        /* For true/false definition */
24:            
25:            #include "global.h"
26:            #include "display.h"
27:            #include "DS1307.h"
28:            /*****************************************************************************
29:             ** Variables
30:             *****************************************************************************/
31:            extern volatile unsigned char currentState;
32:            extern volatile unsigned long milliseconds;
33:            
34:            extern volatile bit scrollInt_flag;
35:            extern volatile int8_t buttonInt_flag;
36:            //extern volatile uint8_t newFrame;
37:            //extern volatile int16_t frameDelay;
38:            /*****************************************************************************
39:             ** Interrupt Functions
40:             *****************************************************************************/
41:            
42:            /* High-priority service */
43:            void interrupt high_isr(void){
29BE  CFEA     MOVFF FSR0H, 0x1E
29C0  F01E     NOP
29C2  CFE1     MOVFF FSR1L, 0x1F
29C4  F01F     NOP
29C6  CFE2     MOVFF FSR1H, 0x20
29C8  F020     NOP
29CA  CFD9     MOVFF FSR2L, 0x21
29CC  F021     NOP
29CE  CFDA     MOVFF FSR2H, 0x22
29D0  F022     NOP
29D2  CFF3     MOVFF PRODL, 0x23
29D4  F023     NOP
29D6  CFF4     MOVFF PRODH, 0x24
29D8  F024     NOP
29DA  CFF6     MOVFF TBLPTRL, 0x25
29DC  F025     NOP
29DE  CFF7     MOVFF TBLPTRH, 0x26
29E0  F026     NOP
29E2  CFF8     MOVFF TBLPTRU, 0x27
29E4  F027     NOP
29E6  CFF5     MOVFF TABLAT, 0x28
29E8  F028     NOP
44:                /*Timer 0 -- Display update. (approx. 300 us cycle)
45:                 300 us x 8 rows = 2.4 ms to update whole display
46:                  which is around 420 Hz refresh rate*/
47:                if ((TMR0IE) && (TMR0IF)) {
29EA  AAF2     BTFSS INTCON, 5, ACCESS
29EC  D001     BRA 0x29F0
29EE  D001     BRA 0x29F2
29F0  D01B     BRA 0x2A28
29F2  A4F2     BTFSS INTCON, 2, ACCESS
29F4  D001     BRA 0x29F8
29F6  D001     BRA 0x29FA
29F8  D017     BRA 0x2A28
48:            
49:                    ShiftOutNextRow();
29FA  EC45     CALL 0x388A, 0
29FC  F01C     NOP
50:                    if((display.activeRow++) == 8) display.activeRow = 0;
29FE  0100     MOVLB 0x0
2A00  0100     MOVLB 0x0
2A02  2BB2     INCF 0xB2, F, BANKED
2A04  0100     MOVLB 0x0
2A06  51B2     MOVF 0xB2, W, BANKED
2A08  0A09     XORLW 0x9
2A0A  A4D8     BTFSS STATUS, 2, ACCESS
2A0C  D001     BRA 0x2A10
2A0E  D001     BRA 0x2A12
2A10  D007     BRA 0x2A20
2A12  6E1A     MOVWF 0x1A, ACCESS
2A14  0E00     MOVLW 0x0
2A16  0100     MOVLB 0x0
2A18  0100     MOVLB 0x0
2A1A  6FB2     MOVWF 0xB2, BANKED
2A1C  501A     MOVF 0x1A, W, ACCESS
2A1E  D000     BRA 0x2A20
51:                    
52:                    TMR0L = 50; // Reset the timer0 counter
2A20  0E32     MOVLW 0x32
2A22  6ED6     MOVWF TMR0L, ACCESS
53:                    //TMR0L = 0x00;
54:                    TMR0IF = 0; // Clear the timer0 interrupt flag
2A24  94F2     BCF INTCON, 2, ACCESS
55:                } else if ((INT0IE) && (INT0IF)) {
2A26  D00F     BRA 0x2A46
2A28  A8F2     BTFSS INTCON, 4, ACCESS
2A2A  D001     BRA 0x2A2E
2A2C  D001     BRA 0x2A30
2A2E  D00B     BRA 0x2A46
2A30  A2F2     BTFSS INTCON, 1, ACCESS
2A32  D001     BRA 0x2A36
2A34  D001     BRA 0x2A38
2A36  D007     BRA 0x2A46
56:                   
57:                    INT0IF = CLEAR;
2A38  92F2     BCF INTCON, 1, ACCESS
58:                    //stateFlag = 1;
59:                    buttonInt_flag = BUTTON_DOWN;
2A3A  0E03     MOVLW 0x3
2A3C  0100     MOVLB 0x0
2A3E  0100     MOVLB 0x0
2A40  6F9E     MOVWF buttonInt_flag, BANKED
2A42  D001     BRA 0x2A46
60:                }
2A44  D000     BRA 0x2A46
61:            }
2A46  C028     MOVFF 0x28, TABLAT
62:            
63:            /* Low-priority interrupt routine */
64:            void low_priority interrupt low_isr(void){
0018  CFD8     MOVFF STATUS, __pcstackCOMRAM
65:            
66:             //   static int16_t animateCount = 0;
67:            
68:                if ((TMR3IE) && (TMR3IF)) {
005C  A2A0     BTFSS PIE2, 1, ACCESS
005E  D001     BRA 0x62
0060  D001     BRA 0x64
0062  D017     BRA 0x92
0064  A2A1     BTFSS PIR2, 1, ACCESS
0066  D001     BRA 0x6A
0068  D001     BRA 0x6C
006A  D013     BRA 0x92
69:            
70:                    milliseconds++;
006C  0E01     MOVLW 0x1
006E  0100     MOVLB 0x0
0070  0100     MOVLB 0x0
0072  2797     ADDWF milliseconds, F, BANKED
0074  0E00     MOVLW 0x0
0076  0100     MOVLB 0x0
0078  2398     ADDWFC 0x98, F, BANKED
007A  0E00     MOVLW 0x0
007C  0100     MOVLB 0x0
007E  2399     ADDWFC 0x99, F, BANKED
0080  0E00     MOVLW 0x0
0082  0100     MOVLB 0x0
0084  239A     ADDWFC 0x9A, F, BANKED
71:            //        if ((animateCount++ % frameDelay) == 0) {
72:            //            newFrame = 1;
73:            //        }
74:                    WRITETIMER3(53717);
0086  0ED1     MOVLW 0xD1
0088  6EB3     MOVWF TMR3H, ACCESS
008A  0ED5     MOVLW 0xD5
008C  6EB2     MOVWF TMR3L, ACCESS
75:                    TMR3IF = CLEAR; // Clear the interrupt flag
008E  92A1     BCF PIR2, 1, ACCESS
76:            
77:                } else if ((INT1IE) && (INT1IF)) {
0090  D020     BRA 0xD2
0092  A6F0     BTFSS INTCON3, 3, ACCESS
0094  D001     BRA 0x98
0096  D001     BRA 0x9A
0098  D00C     BRA 0xB2
009A  A0F0     BTFSS INTCON3, 0, ACCESS
009C  D001     BRA 0xA0
009E  D001     BRA 0xA2
00A0  D008     BRA 0xB2
78:                   
79:                    INT1IF = CLEAR;
00A2  90F0     BCF INTCON3, 0, ACCESS
80:                    scrollInt_flag = SET;
00A4  0100     MOVLB 0x0
00A6  8047     BSF scrollInt_flag, 0, ACCESS
81:                    buttonInt_flag = BUTTON_ENTER;
00A8  0E02     MOVLW 0x2
00AA  0100     MOVLB 0x0
00AC  0100     MOVLB 0x0
00AE  6F9E     MOVWF buttonInt_flag, BANKED
82:            
83:                } else if ((INT2IE) && (INT2IF)) {
00B0  D010     BRA 0xD2
00B2  A8F0     BTFSS INTCON3, 4, ACCESS
00B4  D001     BRA 0xB8
00B6  D001     BRA 0xBA
00B8  D00C     BRA 0xD2
00BA  A2F0     BTFSS INTCON3, 1, ACCESS
00BC  D001     BRA 0xC0
00BE  D001     BRA 0xC2
00C0  D008     BRA 0xD2
84:            
85:                    INT2IF = CLEAR;       
00C2  92F0     BCF INTCON3, 1, ACCESS
86:                    buttonInt_flag = BUTTON_UP;
00C4  0E01     MOVLW 0x1
00C6  0100     MOVLB 0x0
00C8  0100     MOVLB 0x0
00CA  6F9E     MOVWF buttonInt_flag, BANKED
00CC  D002     BRA 0xD2
87:                }
00CE  D001     BRA 0xD2
88:            }
00D0  D000     BRA 0xD2
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/input.h  -------------------------------
1:             /* ***************************************************************************
2:              **    input.h
3:             **
4:              **  Project      : ClockMatrix_v0
5:              **  Target       : PIC18F14K50
6:              **  Description  : Project used to develop clock firmware.  Tested methods and
7:              **                 determined functionality (needed, wanted, and the possible)
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : June 21, 2013
12:             **
13:             **  Master
14:             ** ***************************************************************************/
15:            
16:            #ifndef _INPUT_H_
17:            #define  _INPUT_H_
18:            
19:            
20:            
21:            
22:            const uint8_t *dow_str[] = {
32F8  EE01     LFSR 0, 0x100
23:                "   ",
24:                "MON",
25:                "TUE",
26:                "WEN",
27:                "THU",
28:                "FRI",
29:                "SAT",
30:                "SUN"
31:            };
32:            
33:            const uint8_t *month_str[] = {
34:                "   ",
35:                "JAN",
36:                "FEB",
37:                "MAR",
38:                "APR",
39:                "MAY",
40:                "JUN",
41:                "JUL",
42:                "AUG",
43:                "SEP",
44:                "OCT",
45:                "NOV",
46:                "DEC"
47:            };
48:            
49:            
50:            uint8_t InputString(const char *istring, uint8_t min, uint8_t max, const uint8_t **stringArray);
51:            uint8_t InputNumber(const char *istring, uint8_t min, uint8_t max);
52:            void ReadButtonState(void);
53:            void InputTime(void);
54:            void InputTimerDigit(uint8_t *num_ptr, uint8_t min, uint8_t max);
55:            void SetTimer(void);
56:            void CheckButton(void);
57:            
58:            #endif //_INPUT_H_
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/input.c  -------------------------------
1:             /* ***************************************************************************
2:              **    input.c
3:              **
4:              **  Project      :
5:              **  Target       :
6:              **  Description  :
7:              **
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : June 21, 2013
12:             **
13:             **  Master
14:             ** ***************************************************************************/
15:            
16:            /*****************************************************************************
17:             **HEADER FILES
18:             *****************************************************************************/
19:            
20:            //Compiler-Standard
21:            #include <htc.h>
22:            #include <stdint.h>        /* For uint8_t definition */
23:            #include <string.h>
24:            
25:            //Project
26:            #include "global.h"
27:            #include "input.h"
28:            #include "display.h"
29:            #include "delay.h"
30:            #include "DS1307.h"
31:            
32:            /*****************************************************************************
33:             **VARIABLES
34:             *****************************************************************************/
35:            #define UP 0
36:            #define DOWN 1
37:            #define ENTER 2
38:            
39:            uint8_t buttonState[3];
40:            extern volatile unsigned long milliseconds;
41:            extern volatile uint8_t newFrame;
42:            extern volatile int8_t buttonInt_flag;
43:            extern volatile unsigned char currentState;
44:            extern volatile bit tscale_flag;
45:            extern volatile bit timedate_flag;
46:            
47:            /*****************************************************************************
48:             **FUNCTIONS
49:             *****************************************************************************/
50:            
51:            void InputTime(void){
52:            
53:                BUTTON_INTS_DISABLE();
0D18  98F2     BCF INTCON, 4, ACCESS
0D1A  96F0     BCF INTCON3, 3, ACCESS
0D1C  98F0     BCF INTCON3, 4, ACCESS
54:            
55:                uint8_t daysInMonth;
56:            
57:                // Intro
58:                displayString[0] = '\0';
0D1E  0100     MOVLB 0x0
0D20  6F8A     MOVWF 0x8A, BANKED
0D22  0E00     MOVLW 0x0
0D24  0101     MOVLB 0x1
0D26  0101     MOVLB 0x1
0D28  6F00     MOVWF 0x0, BANKED
0D2A  0100     MOVLB 0x0
0D2C  518A     MOVF 0x8A, W, BANKED
59:                strcat(displayString, leadIn);
0D2E  0101     MOVLB 0x1
0D30  0E01     MOVLW 0x1
0D32  0100     MOVLB 0x0
0D34  0100     MOVLB 0x0
0D36  6F61     MOVWF col, BANKED
0D38  0101     MOVLB 0x1
0D3A  0E00     MOVLW 0x0
0D3C  0100     MOVLB 0x0
0D3E  6F60     MOVWF __pcstackBANK0, BANKED
0D40  0E3E     MOVLW 0x3E
0D42  0100     MOVLB 0x0
0D44  0100     MOVLB 0x0
0D46  6F63     MOVWF string_index, BANKED
0D48  0EF6     MOVLW 0xF6
0D4A  0100     MOVLB 0x0
0D4C  6F62     MOVWF c, BANKED
0D4E  EC48     CALL 0x3290, 0
0D50  F019     NOP
60:                strcat(displayString, "SETTING TIME");
0D52  0101     MOVLB 0x1
0D54  0E01     MOVLW 0x1
0D56  0100     MOVLB 0x0
0D58  0100     MOVLB 0x0
0D5A  6F61     MOVWF col, BANKED
0D5C  0101     MOVLB 0x1
0D5E  0E00     MOVLW 0x0
0D60  0100     MOVLB 0x0
0D62  6F60     MOVWF __pcstackBANK0, BANKED
0D64  0E3E     MOVLW 0x3E
0D66  0100     MOVLB 0x0
0D68  0100     MOVLB 0x0
0D6A  6F63     MOVWF string_index, BANKED
0D6C  0EFB     MOVLW 0xFB
0D6E  0100     MOVLB 0x0
0D70  6F62     MOVWF c, BANKED
0D72  EC48     CALL 0x3290, 0
0D74  F019     NOP
61:                DisplayScrollText();
0D76  ECE5     CALL 0xFCA, 0
0D78  F007     NOP
62:            
63:                // Hour
64:                dateTime.hour = InputNumber("HOUR", 1, 12);
0D7A  0E3F     MOVLW 0x3F
0D7C  0100     MOVLB 0x0
0D7E  0100     MOVLB 0x0
0D80  6F7E     MOVWF row, BANKED
0D82  0E39     MOVLW 0x39
0D84  0100     MOVLB 0x0
0D86  6F7D     MOVWF istring, BANKED
0D88  0100     MOVLB 0x0
0D8A  6F8A     MOVWF 0x8A, BANKED
0D8C  0E01     MOVLW 0x1
0D8E  0100     MOVLB 0x0
0D90  0100     MOVLB 0x0
0D92  6F7F     MOVWF min, BANKED
0D94  0100     MOVLB 0x0
0D96  518A     MOVF 0x8A, W, BANKED
0D98  0100     MOVLB 0x0
0D9A  6F8B     MOVWF 0x8B, BANKED
0D9C  0E0C     MOVLW 0xC
0D9E  0100     MOVLB 0x0
0DA0  0100     MOVLB 0x0
0DA2  6F80     MOVWF max, BANKED
0DA4  0100     MOVLB 0x0
0DA6  518B     MOVF 0x8B, W, BANKED
0DA8  EC81     CALL 0x1702, 0
0DAA  F00B     NOP
0DAC  6E2D     MOVWF 0x2D, ACCESS
65:                // Minute
66:                dateTime.min = InputNumber("MINUTES", 0, 59);
0DAE  0E3F     MOVLW 0x3F
0DB0  0100     MOVLB 0x0
0DB2  0100     MOVLB 0x0
0DB4  6F7E     MOVWF row, BANKED
0DB6  0E08     MOVLW 0x8
0DB8  0100     MOVLB 0x0
0DBA  6F7D     MOVWF istring, BANKED
0DBC  0100     MOVLB 0x0
0DBE  6F8A     MOVWF 0x8A, BANKED
0DC0  0E00     MOVLW 0x0
0DC2  0100     MOVLB 0x0
0DC4  0100     MOVLB 0x0
0DC6  6F7F     MOVWF min, BANKED
0DC8  0100     MOVLB 0x0
0DCA  518A     MOVF 0x8A, W, BANKED
0DCC  0100     MOVLB 0x0
0DCE  6F8B     MOVWF 0x8B, BANKED
0DD0  0E3B     MOVLW 0x3B
0DD2  0100     MOVLB 0x0
0DD4  0100     MOVLB 0x0
0DD6  6F80     MOVWF max, BANKED
0DD8  0100     MOVLB 0x0
0DDA  518B     MOVF 0x8B, W, BANKED
0DDC  EC81     CALL 0x1702, 0
0DDE  F00B     NOP
0DE0  6E2C     MOVWF 0x2C, ACCESS
67:                // Seconds set at 0
68:                dateTime.sec = 0;
0DE2  0100     MOVLB 0x0
0DE4  6F8A     MOVWF 0x8A, BANKED
0DE6  0E00     MOVLW 0x0
0DE8  6E2B     MOVWF dateTime, ACCESS
0DEA  0100     MOVLB 0x0
0DEC  518A     MOVF 0x8A, W, BANKED
69:                // Year
70:                dateTime.year = InputNumber("YEAR", 0, 99);
0DEE  0E3F     MOVLW 0x3F
0DF0  0100     MOVLB 0x0
0DF2  0100     MOVLB 0x0
0DF4  6F7E     MOVWF row, BANKED
0DF6  0E34     MOVLW 0x34
0DF8  0100     MOVLB 0x0
0DFA  6F7D     MOVWF istring, BANKED
0DFC  0100     MOVLB 0x0
0DFE  6F8A     MOVWF 0x8A, BANKED
0E00  0E00     MOVLW 0x0
0E02  0100     MOVLB 0x0
0E04  0100     MOVLB 0x0
0E06  6F7F     MOVWF min, BANKED
0E08  0100     MOVLB 0x0
0E0A  518A     MOVF 0x8A, W, BANKED
0E0C  0100     MOVLB 0x0
0E0E  6F8B     MOVWF 0x8B, BANKED
0E10  0E63     MOVLW 0x63
0E12  0100     MOVLB 0x0
0E14  0100     MOVLB 0x0
0E16  6F80     MOVWF max, BANKED
0E18  0100     MOVLB 0x0
0E1A  518B     MOVF 0x8B, W, BANKED
0E1C  EC81     CALL 0x1702, 0
0E1E  F00B     NOP
0E20  6E31     MOVWF 0x31, ACCESS
71:                //Month
72:                dateTime.mon = InputString("MONTH", 1, 12, month_str);
0E22  0E3F     MOVLW 0x3F
0E24  0100     MOVLB 0x0
0E26  0100     MOVLB 0x0
0E28  6F7E     MOVWF row, BANKED
0E2A  0E17     MOVLW 0x17
0E2C  0100     MOVLB 0x0
0E2E  6F7D     MOVWF istring, BANKED
0E30  0100     MOVLB 0x0
0E32  6F8A     MOVWF 0x8A, BANKED
0E34  0E01     MOVLW 0x1
0E36  0100     MOVLB 0x0
0E38  0100     MOVLB 0x0
0E3A  6F7F     MOVWF min, BANKED
0E3C  0100     MOVLB 0x0
0E3E  518A     MOVF 0x8A, W, BANKED
0E40  0100     MOVLB 0x0
0E42  6F8B     MOVWF 0x8B, BANKED
0E44  0E0C     MOVLW 0xC
0E46  0100     MOVLB 0x0
0E48  0100     MOVLB 0x0
0E4A  6F80     MOVWF max, BANKED
0E4C  0100     MOVLB 0x0
0E4E  518B     MOVF 0x8B, W, BANKED
0E50  0100     MOVLB 0x0
0E52  0E00     MOVLW 0x0
0E54  0100     MOVLB 0x0
0E56  0100     MOVLB 0x0
0E58  6F82     MOVWF numberString, BANKED
0E5A  0100     MOVLB 0x0
0E5C  0ECF     MOVLW 0xCF
0E5E  0100     MOVLB 0x0
0E60  6F81     MOVWF stringArray, BANKED
0E62  EC50     CALL 0x18A0, 0
0E64  F00C     NOP
0E66  6E30     MOVWF 0x30, ACCESS
73:                switch (dateTime.mon) {
0E68  D011     BRA 0xE8C
0E8C  5030     MOVF 0x30, W, ACCESS
0E8E  0A01     XORLW 0x1
0E90  B4D8     BTFSC STATUS, 2, ACCESS
0E92  D7EB     BRA 0xE6A
0E94  0A03     XORLW 0x3
0E96  B4D8     BTFSC STATUS, 2, ACCESS
0E98  D7EC     BRA 0xE72
0E9A  0A01     XORLW 0x1
0E9C  B4D8     BTFSC STATUS, 2, ACCESS
0E9E  D7E5     BRA 0xE6A
0EA0  0A07     XORLW 0x7
0EA2  B4D8     BTFSC STATUS, 2, ACCESS
0EA4  D7EA     BRA 0xE7A
0EA6  0A01     XORLW 0x1
0EA8  B4D8     BTFSC STATUS, 2, ACCESS
0EAA  D7DF     BRA 0xE6A
0EAC  0A03     XORLW 0x3
0EAE  B4D8     BTFSC STATUS, 2, ACCESS
0EB0  D7E4     BRA 0xE7A
0EB2  0A01     XORLW 0x1
0EB4  B4D8     BTFSC STATUS, 2, ACCESS
0EB6  D7D9     BRA 0xE6A
0EB8  0A0F     XORLW 0xF
0EBA  B4D8     BTFSC STATUS, 2, ACCESS
0EBC  D7D6     BRA 0xE6A
0EBE  0A01     XORLW 0x1
0EC0  B4D8     BTFSC STATUS, 2, ACCESS
0EC2  D7DB     BRA 0xE7A
0EC4  0A03     XORLW 0x3
0EC6  B4D8     BTFSC STATUS, 2, ACCESS
0EC8  D7D0     BRA 0xE6A
0ECA  0A01     XORLW 0x1
0ECC  B4D8     BTFSC STATUS, 2, ACCESS
0ECE  D7D5     BRA 0xE7A
0ED0  0A07     XORLW 0x7
0ED2  B4D8     BTFSC STATUS, 2, ACCESS
0ED4  D7CA     BRA 0xE6A
74:                    case 1: daysInMonth = 31;
0E6A  0100     MOVLB 0x0
0E6C  6F8A     MOVWF 0x8A, BANKED
0E6E  0E1F     MOVLW 0x1F
0E70  D007     BRA 0xE80
75:                        break;
76:                    case 2: daysInMonth = 28;
0E72  0100     MOVLB 0x0
0E74  6F8A     MOVWF 0x8A, BANKED
0E76  0E1C     MOVLW 0x1C
0E78  D003     BRA 0xE80
77:                        break;
78:                    case 3: daysInMonth = 31;
79:                        break;
80:                    case 4: daysInMonth = 30;
81:                        break;
82:                    case 5: daysInMonth = 31;
83:                        break;
84:                    case 6: daysInMonth = 30;
0E7A  0100     MOVLB 0x0
0E7C  6F8A     MOVWF 0x8A, BANKED
0E7E  0E1E     MOVLW 0x1E
85:                        break;
86:                    case 7: daysInMonth = 31;
0E80  0100     MOVLB 0x0
0E82  0100     MOVLB 0x0
0E84  6F8C     MOVWF daysInMonth, BANKED
0E86  0100     MOVLB 0x0
0E88  518A     MOVF 0x8A, W, BANKED
87:                        break;
0E8A  D025     BRA 0xED6
88:                    case 8: daysInMonth = 31;
89:                        break;
90:                    case 9: daysInMonth = 30;
91:                        break;
92:                    case 10: daysInMonth = 31;
93:                        break;
94:                    case 11: daysInMonth = 30;
95:                        break;
96:                    case 12: daysInMonth = 31;
97:                        break;
98:                }
99:            
100:               // If the month is February, check for leap year
101:               if (dateTime.mon == 2 && (dateTime.year % 400 == 0 ||
102:                       (dateTime.year % 4 == 0 && dateTime.year % 100 != 0))) {
0ED6  5030     MOVF 0x30, W, ACCESS
0ED8  0A02     XORLW 0x2
0EDA  A4D8     BTFSS STATUS, 2, ACCESS
0EDC  D038     BRA 0xF4E
0EDE  0100     MOVLB 0x0
0EE0  C031     MOVFF 0x31, __pcstackBANK0
0EE2  F060     NOP
0EE4  0100     MOVLB 0x0
0EE6  0100     MOVLB 0x0
0EE8  6B61     CLRF col, BANKED
0EEA  0E01     MOVLW 0x1
0EEC  0100     MOVLB 0x0
0EEE  0100     MOVLB 0x0
0EF0  6F63     MOVWF string_index, BANKED
0EF2  0E90     MOVLW 0x90
0EF4  0100     MOVLB 0x0
0EF6  6F62     MOVWF c, BANKED
0EF8  ECC5     CALL 0x258A, 0
0EFA  F012     NOP
0EFC  0100     MOVLB 0x0
0EFE  0100     MOVLB 0x0
0F00  5161     MOVF col, W, BANKED
0F02  0100     MOVLB 0x0
0F04  1160     IORWF __pcstackBANK0, W, BANKED
0F06  B4D8     BTFSC STATUS, 2, ACCESS
0F08  D01A     BRA 0xF3E
0F0A  5031     MOVF 0x31, W, ACCESS
0F0C  0B03     ANDLW 0x3
0F0E  A4D8     BTFSS STATUS, 2, ACCESS
0F10  D01E     BRA 0xF4E
0F12  0100     MOVLB 0x0
0F14  C031     MOVFF 0x31, __pcstackBANK0
0F16  F060     NOP
0F18  0100     MOVLB 0x0
0F1A  0100     MOVLB 0x0
0F1C  6B61     CLRF col, BANKED
0F1E  0E00     MOVLW 0x0
0F20  0100     MOVLB 0x0
0F22  0100     MOVLB 0x0
0F24  6F63     MOVWF string_index, BANKED
0F26  0E64     MOVLW 0x64
0F28  0100     MOVLB 0x0
0F2A  6F62     MOVWF c, BANKED
0F2C  ECC5     CALL 0x258A, 0
0F2E  F012     NOP
0F30  0100     MOVLB 0x0
0F32  0100     MOVLB 0x0
0F34  5161     MOVF col, W, BANKED
0F36  0100     MOVLB 0x0
0F38  1160     IORWF __pcstackBANK0, W, BANKED
0F3A  B4D8     BTFSC STATUS, 2, ACCESS
0F3C  D008     BRA 0xF4E
103:                   daysInMonth = 29;
0F3E  0100     MOVLB 0x0
0F40  6F8A     MOVWF 0x8A, BANKED
0F42  0E1D     MOVLW 0x1D
0F44  0100     MOVLB 0x0
0F46  0100     MOVLB 0x0
0F48  6F8C     MOVWF daysInMonth, BANKED
0F4A  0100     MOVLB 0x0
0F4C  518A     MOVF 0x8A, W, BANKED
104:               }
105:               // Date
106:               dateTime.mday = InputNumber("DATE", 1, daysInMonth);
0F4E  0E3F     MOVLW 0x3F
0F50  0100     MOVLB 0x0
0F52  0100     MOVLB 0x0
0F54  6F7E     MOVWF row, BANKED
0F56  0E2F     MOVLW 0x2F
0F58  0100     MOVLB 0x0
0F5A  6F7D     MOVWF istring, BANKED
0F5C  0100     MOVLB 0x0
0F5E  6F8A     MOVWF 0x8A, BANKED
0F60  0E01     MOVLW 0x1
0F62  0100     MOVLB 0x0
0F64  0100     MOVLB 0x0
0F66  6F7F     MOVWF min, BANKED
0F68  0100     MOVLB 0x0
0F6A  518A     MOVF 0x8A, W, BANKED
0F6C  C08C     MOVFF daysInMonth, max
0F6E  F080     NOP
0F70  EC81     CALL 0x1702, 0
0F72  F00B     NOP
0F74  6E2F     MOVWF 0x2F, ACCESS
107:               // Day
108:               dateTime.wday = InputString("DAY", 1, 7, dow_str);
0F76  0E3F     MOVLW 0x3F
0F78  0100     MOVLB 0x0
0F7A  0100     MOVLB 0x0
0F7C  6F7E     MOVWF row, BANKED
0F7E  0E98     MOVLW 0x98
0F80  0100     MOVLB 0x0
0F82  6F7D     MOVWF istring, BANKED
0F84  0100     MOVLB 0x0
0F86  6F8A     MOVWF 0x8A, BANKED
0F88  0E01     MOVLW 0x1
0F8A  0100     MOVLB 0x0
0F8C  0100     MOVLB 0x0
0F8E  6F7F     MOVWF min, BANKED
0F90  0100     MOVLB 0x0
0F92  518A     MOVF 0x8A, W, BANKED
0F94  0100     MOVLB 0x0
0F96  6F8B     MOVWF 0x8B, BANKED
0F98  0E07     MOVLW 0x7
0F9A  0100     MOVLB 0x0
0F9C  0100     MOVLB 0x0
0F9E  6F80     MOVWF max, BANKED
0FA0  0100     MOVLB 0x0
0FA2  518B     MOVF 0x8B, W, BANKED
0FA4  0100     MOVLB 0x0
0FA6  0E00     MOVLW 0x0
0FA8  0100     MOVLB 0x0
0FAA  0100     MOVLB 0x0
0FAC  6F82     MOVWF numberString, BANKED
0FAE  0100     MOVLB 0x0
0FB0  0EE9     MOVLW 0xE9
0FB2  0100     MOVLB 0x0
0FB4  6F81     MOVWF stringArray, BANKED
0FB6  EC50     CALL 0x18A0, 0
0FB8  F00C     NOP
0FBA  6E2E     MOVWF 0x2E, ACCESS
109:           
110:               /*RTCSetTime();*/
111:           
112:               BUTTON_INTS_ENABLE();
0FBC  92F2     BCF INTCON, 1, ACCESS
0FBE  90F0     BCF INTCON3, 0, ACCESS
0FC0  92F0     BCF INTCON3, 1, ACCESS
0FC2  88F2     BSF INTCON, 4, ACCESS
0FC4  86F0     BSF INTCON3, 3, ACCESS
0FC6  88F0     BSF INTCON3, 4, ACCESS
113:           }
0FC8  0012     RETURN 0
114:           
115:           uint8_t InputNumber(const char *istring, uint8_t min, uint8_t max){
116:           
117:               unsigned char done = FALSE;
1702  0100     MOVLB 0x0
1704  6F81     MOVWF stringArray, BANKED
1706  0E00     MOVLW 0x0
1708  0100     MOVLB 0x0
170A  0100     MOVLB 0x0
170C  6F87     MOVWF done, BANKED
170E  0100     MOVLB 0x0
1710  5181     MOVF stringArray, W, BANKED
118:               uint8_t numberString[5];
119:               uint8_t result = min;
1712  C07F     MOVFF min, result
1714  F089     NOP
120:               uint8_t currentNumber = 0xFF;
1716  0100     MOVLB 0x0
1718  0100     MOVLB 0x0
171A  6988     SETF currentNumber, BANKED
121:           
122:               buttonState[UP] = OFF;
171C  0100     MOVLB 0x0
171E  6F81     MOVWF stringArray, BANKED
1720  0E00     MOVLW 0x0
1722  0100     MOVLB 0x0
1724  0100     MOVLB 0x0
1726  6F9B     MOVWF buttonState, BANKED
1728  0100     MOVLB 0x0
172A  5181     MOVF stringArray, W, BANKED
123:               buttonState[DOWN] = OFF;
172C  0100     MOVLB 0x0
172E  6F81     MOVWF stringArray, BANKED
1730  0E00     MOVLW 0x0
1732  0100     MOVLB 0x0
1734  0100     MOVLB 0x0
1736  6F9C     MOVWF 0x9C, BANKED
1738  0100     MOVLB 0x0
173A  5181     MOVF stringArray, W, BANKED
124:               buttonState[ENTER] = OFF;
173C  0100     MOVLB 0x0
173E  6F81     MOVWF stringArray, BANKED
1740  0E00     MOVLW 0x0
1742  0100     MOVLB 0x0
1744  0100     MOVLB 0x0
1746  6F9D     MOVWF 0x9D, BANKED
1748  0100     MOVLB 0x0
174A  5181     MOVF stringArray, W, BANKED
125:           
126:               displayString[0] = '\0';
174C  0100     MOVLB 0x0
174E  6F81     MOVWF stringArray, BANKED
1750  0E00     MOVLW 0x0
1752  0101     MOVLB 0x1
1754  0101     MOVLB 0x1
1756  6F00     MOVWF 0x0, BANKED
1758  0100     MOVLB 0x0
175A  5181     MOVF stringArray, W, BANKED
127:               strcat(displayString, leadIn);
175C  0101     MOVLB 0x1
175E  0E01     MOVLW 0x1
1760  0100     MOVLB 0x0
1762  0100     MOVLB 0x0
1764  6F61     MOVWF col, BANKED
1766  0101     MOVLB 0x1
1768  0E00     MOVLW 0x0
176A  0100     MOVLB 0x0
176C  6F60     MOVWF __pcstackBANK0, BANKED
176E  0E3E     MOVLW 0x3E
1770  0100     MOVLB 0x0
1772  0100     MOVLB 0x0
1774  6F63     MOVWF string_index, BANKED
1776  0EF6     MOVLW 0xF6
1778  0100     MOVLB 0x0
177A  6F62     MOVWF c, BANKED
177C  EC48     CALL 0x3290, 0
177E  F019     NOP
128:               strcat(displayString, istring);
1780  0101     MOVLB 0x1
1782  0E01     MOVLW 0x1
1784  0100     MOVLB 0x0
1786  0100     MOVLB 0x0
1788  6F61     MOVWF col, BANKED
178A  0101     MOVLB 0x1
178C  0E00     MOVLW 0x0
178E  0100     MOVLB 0x0
1790  6F60     MOVWF __pcstackBANK0, BANKED
1792  C07D     MOVFF istring, c
1794  F062     NOP
1796  C07E     MOVFF row, string_index
1798  F063     NOP
179A  EC48     CALL 0x3290, 0
179C  F019     NOP
129:               DisplayScrollText();
179E  ECE5     CALL 0xFCA, 0
17A0  F007     NOP
130:           
131:               while(!done) {
17A2  D075     BRA 0x188E
188E  0100     MOVLB 0x0
1890  0100     MOVLB 0x0
1892  5187     MOVF done, W, BANKED
1894  B4D8     BTFSC STATUS, 2, ACCESS
1896  D786     BRA 0x17A4
132:           
133:                   // Get the current button states (with on and off debouncing)
134:                   ReadButtonState();
17A4  EC9E     CALL 0x213C, 0
17A6  F010     NOP
135:                   // Adjust the result accordingly
136:                   if (buttonState[UP] == ON) {
17A8  0100     MOVLB 0x0
17AA  0100     MOVLB 0x0
17AC  059B     DECF buttonState, W, BANKED
17AE  A4D8     BTFSS STATUS, 2, ACCESS
17B0  D00C     BRA 0x17CA
137:                       result++;
17B2  0100     MOVLB 0x0
17B4  0100     MOVLB 0x0
17B6  2B89     INCF result, F, BANKED
138:                       if (result > max) result = min;
17B8  0100     MOVLB 0x0
17BA  0100     MOVLB 0x0
17BC  5189     MOVF result, W, BANKED
17BE  0100     MOVLB 0x0
17C0  0100     MOVLB 0x0
17C2  6180     CPFSLT max, BANKED
17C4  D002     BRA 0x17CA
17C6  C07F     MOVFF min, result
17C8  F089     NOP
139:                   }
140:                   if (buttonState[DOWN] == ON) {
17CA  0100     MOVLB 0x0
17CC  0100     MOVLB 0x0
17CE  059C     DECF 0x9C, W, BANKED
17D0  A4D8     BTFSS STATUS, 2, ACCESS
17D2  D00D     BRA 0x17EE
141:                       if (result > min) result--;
17D4  0100     MOVLB 0x0
17D6  0100     MOVLB 0x0
17D8  5189     MOVF result, W, BANKED
17DA  0100     MOVLB 0x0
17DC  0100     MOVLB 0x0
17DE  617F     CPFSLT min, BANKED
17E0  D004     BRA 0x17EA
17E2  0100     MOVLB 0x0
17E4  0100     MOVLB 0x0
17E6  0789     DECF result, F, BANKED
17E8  D002     BRA 0x17EE
142:                       else result = max;
17EA  C080     MOVFF max, result
17EC  F089     NOP
143:                   }
144:                   if (buttonState[ENTER] == ON) done = TRUE;
17EE  0100     MOVLB 0x0
17F0  0100     MOVLB 0x0
17F2  059D     DECF 0x9D, W, BANKED
17F4  A4D8     BTFSS STATUS, 2, ACCESS
17F6  D008     BRA 0x1808
17F8  0100     MOVLB 0x0
17FA  6F81     MOVWF stringArray, BANKED
17FC  0E01     MOVLW 0x1
17FE  0100     MOVLB 0x0
1800  0100     MOVLB 0x0
1802  6F87     MOVWF done, BANKED
1804  0100     MOVLB 0x0
1806  5181     MOVF stringArray, W, BANKED
145:           
146:                   //change display with input
147:                   if (currentNumber != result) {
1808  0100     MOVLB 0x0
180A  0100     MOVLB 0x0
180C  5188     MOVF currentNumber, W, BANKED
180E  0100     MOVLB 0x0
1810  0100     MOVLB 0x0
1812  1989     XORWF result, W, BANKED
1814  B4D8     BTFSC STATUS, 2, ACCESS
1816  D03B     BRA 0x188E
148:                       NumberToString(result, numberString);
1818  0100     MOVLB 0x0
181A  0100     MOVLB 0x0
181C  C089     MOVFF result, min
181E  F074     NOP
1820  0100     MOVLB 0x0
1822  0100     MOVLB 0x0
1824  6B75     CLRF max, BANKED
1826  0100     MOVLB 0x0
1828  0E00     MOVLW 0x0
182A  0100     MOVLB 0x0
182C  0100     MOVLB 0x0
182E  6F77     MOVWF r, BANKED
1830  0100     MOVLB 0x0
1832  0E82     MOVLW 0x82
1834  0100     MOVLB 0x0
1836  6F76     MOVWF cc, BANKED
1838  EC2E     CALL 0xA5C, 0
183A  F005     NOP
149:                       displayString[0] = '\0';
183C  0100     MOVLB 0x0
183E  6F81     MOVWF stringArray, BANKED
1840  0E00     MOVLW 0x0
1842  0101     MOVLB 0x1
1844  0101     MOVLB 0x1
1846  6F00     MOVWF 0x0, BANKED
1848  0100     MOVLB 0x0
184A  5181     MOVF stringArray, W, BANKED
150:                       strcat(displayString, numberString);
184C  0101     MOVLB 0x1
184E  0E01     MOVLW 0x1
1850  0100     MOVLB 0x0
1852  0100     MOVLB 0x0
1854  6F61     MOVWF col, BANKED
1856  0101     MOVLB 0x1
1858  0E00     MOVLW 0x0
185A  0100     MOVLB 0x0
185C  6F60     MOVWF __pcstackBANK0, BANKED
185E  0100     MOVLB 0x0
1860  0E00     MOVLW 0x0
1862  0100     MOVLB 0x0
1864  0100     MOVLB 0x0
1866  6F63     MOVWF string_index, BANKED
1868  0100     MOVLB 0x0
186A  0E82     MOVLW 0x82
186C  0100     MOVLB 0x0
186E  6F62     MOVWF c, BANKED
1870  EC48     CALL 0x3290, 0
1872  F019     NOP
151:                       DisplayString();
1874  ECAB     CALL 0x1556, 0
1876  F00A     NOP
152:                       DelayMs(500);
1878  0E01     MOVLW 0x1
187A  0100     MOVLB 0x0
187C  0100     MOVLB 0x0
187E  6F61     MOVWF col, BANKED
1880  0EF4     MOVLW 0xF4
1882  0100     MOVLB 0x0
1884  6F60     MOVWF __pcstackBANK0, BANKED
1886  ECFB     CALL 0x2BF6, 0
1888  F015     NOP
153:                       currentNumber = result;
188A  C089     MOVFF result, currentNumber
188C  F088     NOP
154:                   }
155:               }
156:               return result;
1898  0100     MOVLB 0x0
189A  0100     MOVLB 0x0
189C  5189     MOVF result, W, BANKED
189E  0012     RETURN 0
157:           }
158:           
159:           uint8_t InputString(const char *istring, uint8_t min, uint8_t max, const uint8_t **stringArray){
160:           
161:               uint8_t result = min;
18A0  C07F     MOVFF min, result
18A2  F086     NOP
162:               uint8_t currentNumber = 0xFF;
18A4  0100     MOVLB 0x0
18A6  0100     MOVLB 0x0
18A8  6984     SETF currentNumber, BANKED
163:               unsigned char done = FALSE;
18AA  0100     MOVLB 0x0
18AC  6F83     MOVWF 0x83, BANKED
18AE  0E00     MOVLW 0x0
18B0  0100     MOVLB 0x0
18B2  0100     MOVLB 0x0
18B4  6F85     MOVWF done, BANKED
18B6  0100     MOVLB 0x0
18B8  5183     MOVF 0x83, W, BANKED
164:           
165:               buttonState[UP] = OFF;
18BA  0100     MOVLB 0x0
18BC  6F83     MOVWF 0x83, BANKED
18BE  0E00     MOVLW 0x0
18C0  0100     MOVLB 0x0
18C2  0100     MOVLB 0x0
18C4  6F9B     MOVWF buttonState, BANKED
18C6  0100     MOVLB 0x0
18C8  5183     MOVF 0x83, W, BANKED
166:               buttonState[DOWN] = OFF;
18CA  0100     MOVLB 0x0
18CC  6F83     MOVWF 0x83, BANKED
18CE  0E00     MOVLW 0x0
18D0  0100     MOVLB 0x0
18D2  0100     MOVLB 0x0
18D4  6F9C     MOVWF 0x9C, BANKED
18D6  0100     MOVLB 0x0
18D8  5183     MOVF 0x83, W, BANKED
167:               buttonState[ENTER] = OFF;
18DA  0100     MOVLB 0x0
18DC  6F83     MOVWF 0x83, BANKED
18DE  0E00     MOVLW 0x0
18E0  0100     MOVLB 0x0
18E2  0100     MOVLB 0x0
18E4  6F9D     MOVWF 0x9D, BANKED
18E6  0100     MOVLB 0x0
18E8  5183     MOVF 0x83, W, BANKED
168:           
169:               displayString[0] = '\0';
18EA  0100     MOVLB 0x0
18EC  6F83     MOVWF 0x83, BANKED
18EE  0E00     MOVLW 0x0
18F0  0101     MOVLB 0x1
18F2  0101     MOVLB 0x1
18F4  6F00     MOVWF 0x0, BANKED
18F6  0100     MOVLB 0x0
18F8  5183     MOVF 0x83, W, BANKED
170:               strcat(displayString, leadIn);
18FA  0101     MOVLB 0x1
18FC  0E01     MOVLW 0x1
18FE  0100     MOVLB 0x0
1900  0100     MOVLB 0x0
1902  6F61     MOVWF col, BANKED
1904  0101     MOVLB 0x1
1906  0E00     MOVLW 0x0
1908  0100     MOVLB 0x0
190A  6F60     MOVWF __pcstackBANK0, BANKED
190C  0E3E     MOVLW 0x3E
190E  0100     MOVLB 0x0
1910  0100     MOVLB 0x0
1912  6F63     MOVWF string_index, BANKED
1914  0EF6     MOVLW 0xF6
1916  0100     MOVLB 0x0
1918  6F62     MOVWF c, BANKED
191A  EC48     CALL 0x3290, 0
191C  F019     NOP
171:               strcat(displayString, istring);
191E  0101     MOVLB 0x1
1920  0E01     MOVLW 0x1
1922  0100     MOVLB 0x0
1924  0100     MOVLB 0x0
1926  6F61     MOVWF col, BANKED
1928  0101     MOVLB 0x1
192A  0E00     MOVLW 0x0
192C  0100     MOVLB 0x0
192E  6F60     MOVWF __pcstackBANK0, BANKED
1930  C07D     MOVFF istring, c
1932  F062     NOP
1934  C07E     MOVFF row, string_index
1936  F063     NOP
1938  EC48     CALL 0x3290, 0
193A  F019     NOP
172:               DisplayScrollText();
193C  ECE5     CALL 0xFCA, 0
193E  F007     NOP
173:           
174:               while(!done) {
1940  D06E     BRA 0x1A1E
1A1E  0100     MOVLB 0x0
1A20  0100     MOVLB 0x0
1A22  5185     MOVF done, W, BANKED
1A24  B4D8     BTFSC STATUS, 2, ACCESS
1A26  D78D     BRA 0x1942
175:           
176:                   // Get the current button states (with on and off debouncing)
177:                   ReadButtonState();
1942  EC9E     CALL 0x213C, 0
1944  F010     NOP
178:                   // Adjust the result accordingly
179:                   if (buttonState[UP] == ON) {
1946  0100     MOVLB 0x0
1948  0100     MOVLB 0x0
194A  059B     DECF buttonState, W, BANKED
194C  A4D8     BTFSS STATUS, 2, ACCESS
194E  D00C     BRA 0x1968
180:                       result++;
1950  0100     MOVLB 0x0
1952  0100     MOVLB 0x0
1954  2B86     INCF result, F, BANKED
181:                       if (result > max) result = min;
1956  0100     MOVLB 0x0
1958  0100     MOVLB 0x0
195A  5186     MOVF result, W, BANKED
195C  0100     MOVLB 0x0
195E  0100     MOVLB 0x0
1960  6180     CPFSLT max, BANKED
1962  D002     BRA 0x1968
1964  C07F     MOVFF min, result
1966  F086     NOP
182:                   }
183:                   if (buttonState[DOWN] == ON) {
1968  0100     MOVLB 0x0
196A  0100     MOVLB 0x0
196C  059C     DECF 0x9C, W, BANKED
196E  A4D8     BTFSS STATUS, 2, ACCESS
1970  D00D     BRA 0x198C
184:                       if (result > min) result--;
1972  0100     MOVLB 0x0
1974  0100     MOVLB 0x0
1976  5186     MOVF result, W, BANKED
1978  0100     MOVLB 0x0
197A  0100     MOVLB 0x0
197C  617F     CPFSLT min, BANKED
197E  D004     BRA 0x1988
1980  0100     MOVLB 0x0
1982  0100     MOVLB 0x0
1984  0786     DECF result, F, BANKED
1986  D002     BRA 0x198C
185:                       else result = max;
1988  C080     MOVFF max, result
198A  F086     NOP
186:                   }
187:                   if (buttonState[ENTER] == ON) done = TRUE;
198C  0100     MOVLB 0x0
198E  0100     MOVLB 0x0
1990  059D     DECF 0x9D, W, BANKED
1992  A4D8     BTFSS STATUS, 2, ACCESS
1994  D008     BRA 0x19A6
1996  0100     MOVLB 0x0
1998  6F83     MOVWF 0x83, BANKED
199A  0E01     MOVLW 0x1
199C  0100     MOVLB 0x0
199E  0100     MOVLB 0x0
19A0  6F85     MOVWF done, BANKED
19A2  0100     MOVLB 0x0
19A4  5183     MOVF 0x83, W, BANKED
188:           
189:                   //change display with input
190:                   if (currentNumber != result) {
19A6  0100     MOVLB 0x0
19A8  0100     MOVLB 0x0
19AA  5184     MOVF currentNumber, W, BANKED
19AC  0100     MOVLB 0x0
19AE  0100     MOVLB 0x0
19B0  1986     XORWF result, W, BANKED
19B2  B4D8     BTFSC STATUS, 2, ACCESS
19B4  D034     BRA 0x1A1E
191:                       displayString[0] = '\0';
19B6  0100     MOVLB 0x0
19B8  6F83     MOVWF 0x83, BANKED
19BA  0E00     MOVLW 0x0
19BC  0101     MOVLB 0x1
19BE  0101     MOVLB 0x1
19C0  6F00     MOVWF 0x0, BANKED
19C2  0100     MOVLB 0x0
19C4  5183     MOVF 0x83, W, BANKED
192:                       strcat(displayString, stringArray[result]);
19C6  0101     MOVLB 0x1
19C8  0E01     MOVLW 0x1
19CA  0100     MOVLB 0x0
19CC  0100     MOVLB 0x0
19CE  6F61     MOVWF col, BANKED
19D0  0101     MOVLB 0x1
19D2  0E00     MOVLW 0x0
19D4  0100     MOVLB 0x0
19D6  6F60     MOVWF __pcstackBANK0, BANKED
19D8  0100     MOVLB 0x0
19DA  0100     MOVLB 0x0
19DC  5186     MOVF result, W, BANKED
19DE  0D02     MULLW 0x2
19E0  50F3     MOVF PRODL, W, ACCESS
19E2  0100     MOVLB 0x0
19E4  0100     MOVLB 0x0
19E6  2581     ADDWF stringArray, W, BANKED
19E8  6ED9     MOVWF FSR2L, ACCESS
19EA  50F4     MOVF PRODH, W, ACCESS
19EC  0100     MOVLB 0x0
19EE  0100     MOVLB 0x0
19F0  2182     ADDWFC numberString, W, BANKED
19F2  6EDA     MOVWF FSR2H, ACCESS
19F4  0100     MOVLB 0x0
19F6  CFDE     MOVFF POSTINC2, c
19F8  F062     NOP
19FA  0100     MOVLB 0x0
19FC  CFDD     MOVFF POSTDEC2, string_index
19FE  F063     NOP
1A00  EC48     CALL 0x3290, 0
1A02  F019     NOP
193:                       DisplayString();
1A04  ECAB     CALL 0x1556, 0
1A06  F00A     NOP
194:                       DelayMs(500);
1A08  0E01     MOVLW 0x1
1A0A  0100     MOVLB 0x0
1A0C  0100     MOVLB 0x0
1A0E  6F61     MOVWF col, BANKED
1A10  0EF4     MOVLW 0xF4
1A12  0100     MOVLB 0x0
1A14  6F60     MOVWF __pcstackBANK0, BANKED
1A16  ECFB     CALL 0x2BF6, 0
1A18  F015     NOP
195:                       currentNumber = result;
1A1A  C086     MOVFF result, currentNumber
1A1C  F084     NOP
196:                   }
197:               }
198:               return result;
1A28  0100     MOVLB 0x0
199:           }
200:           
201:           void ReadButtonState(void){
202:           
203:               if (buttonState[UP] == OFF && UP_BUTTON == OFF) {
213C  0100     MOVLB 0x0
213E  0100     MOVLB 0x0
2140  679B     TSTFSZ buttonState, BANKED
2142  D013     BRA 0x216A
2144  B482     BTFSC PORTC, 2, ACCESS
2146  D011     BRA 0x216A
2148  D002     BRA 0x214E
204:                   DEBOUND_LO(UP_BUTTON, DEBOUNCE_AMOUNT);
214A  A482     BTFSS PORTC, 2, ACCESS
214C  D004     BRA 0x2156
214E  0E00     MOVLW 0x0
2150  6ECF     MOVWF TMR1H, ACCESS
2152  0E00     MOVLW 0x0
2154  6ECE     MOVWF TMR1L, ACCESS
2156  0EF4     MOVLW 0xF4
2158  5CCE     SUBWF TMR1L, W, ACCESS
215A  0E01     MOVLW 0x1
215C  58CF     SUBWFB TMR1H, W, ACCESS
215E  A0D8     BTFSS STATUS, 0, ACCESS
2160  D7F4     BRA 0x214A
205:                   buttonState[UP] = ON;
2162  0100     MOVLB 0x0
2164  6F60     MOVWF __pcstackBANK0, BANKED
2166  0E01     MOVLW 0x1
2168  D016     BRA 0x2196
206:               } else if (buttonState[UP] == ON && UP_BUTTON == ON) {
216A  0100     MOVLB 0x0
216C  0100     MOVLB 0x0
216E  059B     DECF buttonState, W, BANKED
2170  B4D8     BTFSC STATUS, 2, ACCESS
2172  A482     BTFSS PORTC, 2, ACCESS
2174  D015     BRA 0x21A0
2176  D002     BRA 0x217C
207:                   DEBOUND_HI(UP_BUTTON, DEBOUNCE_AMOUNT);
2178  B482     BTFSC PORTC, 2, ACCESS
217A  D004     BRA 0x2184
217C  0E00     MOVLW 0x0
217E  6ECF     MOVWF TMR1H, ACCESS
2180  0E00     MOVLW 0x0
2182  6ECE     MOVWF TMR1L, ACCESS
2184  0EF4     MOVLW 0xF4
2186  5CCE     SUBWF TMR1L, W, ACCESS
2188  0E01     MOVLW 0x1
218A  58CF     SUBWFB TMR1H, W, ACCESS
218C  A0D8     BTFSS STATUS, 0, ACCESS
218E  D7F4     BRA 0x2178
208:                   buttonState[UP] = OFF;
2190  0100     MOVLB 0x0
2192  6F60     MOVWF __pcstackBANK0, BANKED
2194  0E00     MOVLW 0x0
2196  0100     MOVLB 0x0
2198  0100     MOVLB 0x0
219A  6F9B     MOVWF buttonState, BANKED
219C  0100     MOVLB 0x0
219E  5160     MOVF __pcstackBANK0, W, BANKED
209:               }
210:               if (buttonState[DOWN] == OFF && DOWN_BUTTON == OFF) {
21A0  0100     MOVLB 0x0
21A2  0100     MOVLB 0x0
21A4  679C     TSTFSZ 0x9C, BANKED
21A6  D013     BRA 0x21CE
21A8  B082     BTFSC PORTC, 0, ACCESS
21AA  D011     BRA 0x21CE
21AC  D002     BRA 0x21B2
211:                   DEBOUND_LO(DOWN_BUTTON, DEBOUNCE_AMOUNT);
21AE  A082     BTFSS PORTC, 0, ACCESS
21B0  D004     BRA 0x21BA
21B2  0E00     MOVLW 0x0
21B4  6ECF     MOVWF TMR1H, ACCESS
21B6  0E00     MOVLW 0x0
21B8  6ECE     MOVWF TMR1L, ACCESS
21BA  0EF4     MOVLW 0xF4
21BC  5CCE     SUBWF TMR1L, W, ACCESS
21BE  0E01     MOVLW 0x1
21C0  58CF     SUBWFB TMR1H, W, ACCESS
21C2  A0D8     BTFSS STATUS, 0, ACCESS
21C4  D7F4     BRA 0x21AE
212:                   buttonState[DOWN] = ON;
21C6  0100     MOVLB 0x0
21C8  6F60     MOVWF __pcstackBANK0, BANKED
21CA  0E01     MOVLW 0x1
21CC  D016     BRA 0x21FA
213:               } else if (buttonState[DOWN] == ON && DOWN_BUTTON == ON) {
21CE  0100     MOVLB 0x0
21D0  0100     MOVLB 0x0
21D2  059C     DECF 0x9C, W, BANKED
21D4  B4D8     BTFSC STATUS, 2, ACCESS
21D6  A082     BTFSS PORTC, 0, ACCESS
21D8  D015     BRA 0x2204
21DA  D002     BRA 0x21E0
214:                   DEBOUND_HI(DOWN_BUTTON, DEBOUNCE_AMOUNT);
21DC  B082     BTFSC PORTC, 0, ACCESS
21DE  D004     BRA 0x21E8
21E0  0E00     MOVLW 0x0
21E2  6ECF     MOVWF TMR1H, ACCESS
21E4  0E00     MOVLW 0x0
21E6  6ECE     MOVWF TMR1L, ACCESS
21E8  0EF4     MOVLW 0xF4
21EA  5CCE     SUBWF TMR1L, W, ACCESS
21EC  0E01     MOVLW 0x1
21EE  58CF     SUBWFB TMR1H, W, ACCESS
21F0  A0D8     BTFSS STATUS, 0, ACCESS
21F2  D7F4     BRA 0x21DC
215:                   buttonState[DOWN] = OFF;
21F4  0100     MOVLB 0x0
21F6  6F60     MOVWF __pcstackBANK0, BANKED
21F8  0E00     MOVLW 0x0
21FA  0100     MOVLB 0x0
21FC  0100     MOVLB 0x0
21FE  6F9C     MOVWF 0x9C, BANKED
2200  0100     MOVLB 0x0
2202  5160     MOVF __pcstackBANK0, W, BANKED
216:               }
217:               if (buttonState[ENTER] == OFF && ENTER_BUTTON == OFF) {
2204  0100     MOVLB 0x0
2206  0100     MOVLB 0x0
2208  679D     TSTFSZ 0x9D, BANKED
220A  D018     BRA 0x223C
220C  B282     BTFSC PORTC, 1, ACCESS
220E  D016     BRA 0x223C
2210  D002     BRA 0x2216
218:                   DEBOUND_LO(ENTER_BUTTON, DEBOUNCE_AMOUNT);
2212  A282     BTFSS PORTC, 1, ACCESS
2214  D004     BRA 0x221E
2216  0E00     MOVLW 0x0
2218  6ECF     MOVWF TMR1H, ACCESS
221A  0E00     MOVLW 0x0
221C  6ECE     MOVWF TMR1L, ACCESS
221E  0EF4     MOVLW 0xF4
2220  5CCE     SUBWF TMR1L, W, ACCESS
2222  0E01     MOVLW 0x1
2224  58CF     SUBWFB TMR1H, W, ACCESS
2226  A0D8     BTFSS STATUS, 0, ACCESS
2228  D7F4     BRA 0x2212
219:                   buttonState[ENTER] = ON;
222A  0100     MOVLB 0x0
222C  6F60     MOVWF __pcstackBANK0, BANKED
222E  0E01     MOVLW 0x1
2230  0100     MOVLB 0x0
2232  0100     MOVLB 0x0
2234  6F9D     MOVWF 0x9D, BANKED
2236  0100     MOVLB 0x0
2238  5160     MOVF __pcstackBANK0, W, BANKED
220:               } else if (buttonState[ENTER] == ON && ENTER_BUTTON == ON) {
223A  0012     RETURN 0
223C  0100     MOVLB 0x0
223E  0100     MOVLB 0x0
2240  059D     DECF 0x9D, W, BANKED
2242  A4D8     BTFSS STATUS, 2, ACCESS
2244  0012     RETURN 0
2246  A282     BTFSS PORTC, 1, ACCESS
2248  0012     RETURN 0
224A  D002     BRA 0x2250
221:                   DEBOUND_HI(ENTER_BUTTON, DEBOUNCE_AMOUNT);
224C  B282     BTFSC PORTC, 1, ACCESS
224E  D004     BRA 0x2258
2250  0E00     MOVLW 0x0
2252  6ECF     MOVWF TMR1H, ACCESS
2254  0E00     MOVLW 0x0
2256  6ECE     MOVWF TMR1L, ACCESS
2258  0EF4     MOVLW 0xF4
225A  5CCE     SUBWF TMR1L, W, ACCESS
225C  0E01     MOVLW 0x1
225E  58CF     SUBWFB TMR1H, W, ACCESS
2260  A0D8     BTFSS STATUS, 0, ACCESS
2262  D7F4     BRA 0x224C
222:                   buttonState[ENTER] = OFF;
2264  0100     MOVLB 0x0
223:               }
224:           
225:           }
226:           
227:           void InputTimerDigit(uint8_t *num_ptr, uint8_t min, uint8_t max){
228:           
229:               unsigned char done = FALSE;
1E9A  0100     MOVLB 0x0
1E9C  6F76     MOVWF cc, BANKED
1E9E  0E00     MOVLW 0x0
1EA0  0100     MOVLB 0x0
1EA2  0100     MOVLB 0x0
1EA4  6F78     MOVWF done, BANKED
1EA6  0100     MOVLB 0x0
1EA8  5176     MOVF cc, W, BANKED
230:               uint8_t result = *num_ptr;
1EAA  C072     MOVFF num_ptr, FSR2L
1EAC  FFD9     NOP
1EAE  C073     MOVFF counter, FSR2H
1EB0  FFDA     NOP
1EB2  50DF     MOVF INDF2, W, ACCESS
1EB4  0100     MOVLB 0x0
1EB6  0100     MOVLB 0x0
1EB8  6F7A     MOVWF result, BANKED
231:               uint8_t currentNumber = 0xFF;
1EBA  0100     MOVLB 0x0
1EBC  0100     MOVLB 0x0
1EBE  6979     SETF currentNumber, BANKED
232:           
233:               buttonState[UP] = OFF;
1EC0  0100     MOVLB 0x0
1EC2  6F76     MOVWF cc, BANKED
1EC4  0E00     MOVLW 0x0
1EC6  0100     MOVLB 0x0
1EC8  0100     MOVLB 0x0
1ECA  6F9B     MOVWF buttonState, BANKED
1ECC  0100     MOVLB 0x0
1ECE  5176     MOVF cc, W, BANKED
234:               buttonState[DOWN] = OFF;
1ED0  0100     MOVLB 0x0
1ED2  6F76     MOVWF cc, BANKED
1ED4  0E00     MOVLW 0x0
1ED6  0100     MOVLB 0x0
1ED8  0100     MOVLB 0x0
1EDA  6F9C     MOVWF 0x9C, BANKED
1EDC  0100     MOVLB 0x0
1EDE  5176     MOVF cc, W, BANKED
235:               buttonState[ENTER] = OFF;
1EE0  0100     MOVLB 0x0
1EE2  6F76     MOVWF cc, BANKED
1EE4  0E00     MOVLW 0x0
1EE6  0100     MOVLB 0x0
1EE8  0100     MOVLB 0x0
1EEA  6F9D     MOVWF 0x9D, BANKED
1EEC  0100     MOVLB 0x0
1EEE  5176     MOVF cc, W, BANKED
236:           
237:              
238:                while(!done) {
1EF0  D077     BRA 0x1FE0
1FE0  0100     MOVLB 0x0
1FE2  0100     MOVLB 0x0
1FE4  5178     MOVF done, W, BANKED
1FE6  B4D8     BTFSC STATUS, 2, ACCESS
1FE8  D784     BRA 0x1EF2
239:           
240:                   // Get the current button states (with on and off debouncing)
241:                   ReadButtonState();
1EF2  EC9E     CALL 0x213C, 0
1EF4  F010     NOP
242:                   // Adjust the result accordingly
243:                   if (buttonState[UP] == ON) {
1EF6  0100     MOVLB 0x0
1EF8  0100     MOVLB 0x0
1EFA  059B     DECF buttonState, W, BANKED
1EFC  A4D8     BTFSS STATUS, 2, ACCESS
1EFE  D00C     BRA 0x1F18
244:                       result++;
1F00  0100     MOVLB 0x0
1F02  0100     MOVLB 0x0
1F04  2B7A     INCF result, F, BANKED
245:                       if (result > max) result = min;
1F06  0100     MOVLB 0x0
1F08  0100     MOVLB 0x0
1F0A  517A     MOVF result, W, BANKED
1F0C  0100     MOVLB 0x0
1F0E  0100     MOVLB 0x0
1F10  6175     CPFSLT max, BANKED
1F12  D002     BRA 0x1F18
1F14  C074     MOVFF min, result
1F16  F07A     NOP
246:                   }
247:                   if (buttonState[DOWN] == ON) {
1F18  0100     MOVLB 0x0
1F1A  0100     MOVLB 0x0
1F1C  059C     DECF 0x9C, W, BANKED
1F1E  A4D8     BTFSS STATUS, 2, ACCESS
1F20  D00D     BRA 0x1F3C
248:                       if (result > min) result--;
1F22  0100     MOVLB 0x0
1F24  0100     MOVLB 0x0
1F26  517A     MOVF result, W, BANKED
1F28  0100     MOVLB 0x0
1F2A  0100     MOVLB 0x0
1F2C  6174     CPFSLT min, BANKED
1F2E  D004     BRA 0x1F38
1F30  0100     MOVLB 0x0
1F32  0100     MOVLB 0x0
1F34  077A     DECF result, F, BANKED
1F36  D002     BRA 0x1F3C
249:                       else result = max;
1F38  C075     MOVFF max, result
1F3A  F07A     NOP
250:                   }
251:                   if (buttonState[ENTER] == ON) done = TRUE;
1F3C  0100     MOVLB 0x0
1F3E  0100     MOVLB 0x0
1F40  059D     DECF 0x9D, W, BANKED
1F42  A4D8     BTFSS STATUS, 2, ACCESS
1F44  D008     BRA 0x1F56
1F46  0100     MOVLB 0x0
1F48  6F76     MOVWF cc, BANKED
1F4A  0E01     MOVLW 0x1
1F4C  0100     MOVLB 0x0
1F4E  0100     MOVLB 0x0
1F50  6F78     MOVWF done, BANKED
1F52  0100     MOVLB 0x0
1F54  5176     MOVF cc, W, BANKED
252:           
253:                   //change display with input
254:                   
255:                   if (currentNumber != result) {
1F56  0100     MOVLB 0x0
1F58  0100     MOVLB 0x0
1F5A  5179     MOVF currentNumber, W, BANKED
1F5C  0100     MOVLB 0x0
1F5E  0100     MOVLB 0x0
1F60  197A     XORWF result, W, BANKED
1F62  B4D8     BTFSC STATUS, 2, ACCESS
1F64  D03D     BRA 0x1FE0
256:                       *num_ptr = result;
1F66  C072     MOVFF num_ptr, FSR2L
1F68  FFD9     NOP
1F6A  C073     MOVFF counter, FSR2H
1F6C  FFDA     NOP
1F6E  0100     MOVLB 0x0
1F70  C07A     MOVFF result, INDF2
1F72  FFDF     NOP
257:                       RtcNumberToString(timer.hour,timer.min,timer.string);
1F74  C040     MOVFF 0x40, row
1F76  F069     NOP
1F78  C03F     MOVFF timer, col
1F7A  F06A     NOP
1F7C  0E00     MOVLW 0x0
1F7E  0100     MOVLB 0x0
1F80  0100     MOVLB 0x0
1F82  6F6C     MOVWF quotient, BANKED
1F84  0E41     MOVLW 0x41
1F86  0100     MOVLB 0x0
1F88  6F6B     MOVWF counter, BANKED
1F8A  ECDA     CALL 0x1BB4, 0
1F8C  F00D     NOP
258:                       //TimerString();
259:                       displayString[0] = '\0';
1F8E  0100     MOVLB 0x0
1F90  6F76     MOVWF cc, BANKED
1F92  0E00     MOVLW 0x0
1F94  0101     MOVLB 0x1
1F96  0101     MOVLB 0x1
1F98  6F00     MOVWF 0x0, BANKED
1F9A  0100     MOVLB 0x0
1F9C  5176     MOVF cc, W, BANKED
260:                       strcat(displayString, timer.string);
1F9E  0101     MOVLB 0x1
1FA0  0E01     MOVLW 0x1
1FA2  0100     MOVLB 0x0
1FA4  0100     MOVLB 0x0
1FA6  6F61     MOVWF col, BANKED
1FA8  0101     MOVLB 0x1
1FAA  0E00     MOVLW 0x0
1FAC  0100     MOVLB 0x0
1FAE  6F60     MOVWF __pcstackBANK0, BANKED
1FB0  0E41     MOVLW 0x41
1FB2  0100     MOVLB 0x0
1FB4  6F76     MOVWF cc, BANKED
1FB6  0E00     MOVLW 0x0
1FB8  6F77     MOVWF r, BANKED
1FBA  C076     MOVFF cc, c
1FBC  F062     NOP
1FBE  C077     MOVFF r, string_index
1FC0  F063     NOP
1FC2  EC48     CALL 0x3290, 0
1FC4  F019     NOP
261:                       DisplayString();
1FC6  ECAB     CALL 0x1556, 0
1FC8  F00A     NOP
262:                       DelayMs(500);
1FCA  0E01     MOVLW 0x1
1FCC  0100     MOVLB 0x0
1FCE  0100     MOVLB 0x0
1FD0  6F61     MOVWF col, BANKED
1FD2  0EF4     MOVLW 0xF4
1FD4  0100     MOVLB 0x0
1FD6  6F60     MOVWF __pcstackBANK0, BANKED
1FD8  ECFB     CALL 0x2BF6, 0
1FDA  F015     NOP
263:                       currentNumber = result;
1FDC  C07A     MOVFF result, currentNumber
1FDE  F079     NOP
264:                   }
265:               }
266:               *num_ptr = result;
1FEA  C072     MOVFF num_ptr, FSR2L
1FEC  FFD9     NOP
1FEE  C073     MOVFF counter, FSR2H
1FF0  FFDA     NOP
1FF2  0100     MOVLB 0x0
1FF4  C07A     MOVFF result, INDF2
1FF6  FFDF     NOP
267:           }
1FF8  0012     RETURN 0
268:           
269:           void SetTimer(void){
270:           
271:               BUTTON_INTS_DISABLE();
28F4  98F2     BCF INTCON, 4, ACCESS
28F6  96F0     BCF INTCON3, 3, ACCESS
28F8  98F0     BCF INTCON3, 4, ACCESS
272:           
273:               displayString[0] = '\0';
28FA  0100     MOVLB 0x0
28FC  6F7B     MOVWF cell_is_alive, BANKED
28FE  0E00     MOVLW 0x0
2900  0101     MOVLB 0x1
2902  0101     MOVLB 0x1
2904  6F00     MOVWF 0x0, BANKED
2906  0100     MOVLB 0x0
2908  517B     MOVF cell_is_alive, W, BANKED
274:               strcat(displayString, timer.string);
290A  0101     MOVLB 0x1
290C  0E01     MOVLW 0x1
290E  0100     MOVLB 0x0
2910  0100     MOVLB 0x0
2912  6F61     MOVWF col, BANKED
2914  0101     MOVLB 0x1
2916  0E00     MOVLW 0x0
2918  0100     MOVLB 0x0
291A  6F60     MOVWF __pcstackBANK0, BANKED
291C  0E41     MOVLW 0x41
291E  0100     MOVLB 0x0
2920  6F7B     MOVWF cell_is_alive, BANKED
2922  0E00     MOVLW 0x0
2924  6F7C     MOVWF alive_count, BANKED
2926  C07B     MOVFF cell_is_alive, c
2928  F062     NOP
292A  C07C     MOVFF alive_count, string_index
292C  F063     NOP
292E  EC48     CALL 0x3290, 0
2930  F019     NOP
275:               DisplayString();
2932  ECAB     CALL 0x1556, 0
2934  F00A     NOP
276:               InputTimerDigit(&timer.hour,0,12);
2936  0E00     MOVLW 0x0
2938  0100     MOVLB 0x0
293A  0100     MOVLB 0x0
293C  6F73     MOVWF counter, BANKED
293E  0E40     MOVLW 0x40
2940  0100     MOVLB 0x0
2942  6F72     MOVWF num_ptr, BANKED
2944  0100     MOVLB 0x0
2946  6F7B     MOVWF cell_is_alive, BANKED
2948  0E00     MOVLW 0x0
294A  0100     MOVLB 0x0
294C  0100     MOVLB 0x0
294E  6F74     MOVWF min, BANKED
2950  0100     MOVLB 0x0
2952  517B     MOVF cell_is_alive, W, BANKED
2954  0100     MOVLB 0x0
2956  6F7C     MOVWF alive_count, BANKED
2958  0E0C     MOVLW 0xC
295A  0100     MOVLB 0x0
295C  0100     MOVLB 0x0
295E  6F75     MOVWF max, BANKED
2960  0100     MOVLB 0x0
2962  517C     MOVF alive_count, W, BANKED
2964  EC4D     CALL 0x1E9A, 0
2966  F00F     NOP
277:               DelayMs(500);
2968  0E01     MOVLW 0x1
296A  0100     MOVLB 0x0
296C  0100     MOVLB 0x0
296E  6F61     MOVWF col, BANKED
2970  0EF4     MOVLW 0xF4
2972  0100     MOVLB 0x0
2974  6F60     MOVWF __pcstackBANK0, BANKED
2976  ECFB     CALL 0x2BF6, 0
2978  F015     NOP
278:               InputTimerDigit(&timer.min,0,59);
297A  0E00     MOVLW 0x0
297C  0100     MOVLB 0x0
297E  0100     MOVLB 0x0
2980  6F73     MOVWF counter, BANKED
2982  0E3F     MOVLW 0x3F
2984  0100     MOVLB 0x0
2986  6F72     MOVWF num_ptr, BANKED
2988  0100     MOVLB 0x0
298A  6F7B     MOVWF cell_is_alive, BANKED
298C  0E00     MOVLW 0x0
298E  0100     MOVLB 0x0
2990  0100     MOVLB 0x0
2992  6F74     MOVWF min, BANKED
2994  0100     MOVLB 0x0
2996  517B     MOVF cell_is_alive, W, BANKED
2998  0100     MOVLB 0x0
299A  6F7C     MOVWF alive_count, BANKED
299C  0E3B     MOVLW 0x3B
299E  0100     MOVLB 0x0
29A0  0100     MOVLB 0x0
29A2  6F75     MOVWF max, BANKED
29A4  0100     MOVLB 0x0
29A6  517C     MOVF alive_count, W, BANKED
29A8  EC4D     CALL 0x1E9A, 0
29AA  F00F     NOP
279:               RTCSaveTimer();
29AC  EC1D     CALL 0x363A, 0
29AE  F01B     NOP
280:             
281:           
282:               BUTTON_INTS_ENABLE();
29B0  92F2     BCF INTCON, 1, ACCESS
29B2  90F0     BCF INTCON3, 0, ACCESS
29B4  92F0     BCF INTCON3, 1, ACCESS
29B6  88F2     BSF INTCON, 4, ACCESS
29B8  86F0     BSF INTCON3, 3, ACCESS
29BA  88F0     BSF INTCON3, 4, ACCESS
283:           }
29BC  0012     RETURN 0
284:           
285:           void CheckButton(void){
286:               BUTTON_INTS_DISABLE();
1FFA  98F2     BCF INTCON, 4, ACCESS
1FFC  96F0     BCF INTCON3, 3, ACCESS
1FFE  98F0     BCF INTCON3, 4, ACCESS
287:           
288:                       switch (buttonInt_flag) {
2000  D086     BRA 0x210E
210E  0100     MOVLB 0x0
2110  0100     MOVLB 0x0
2112  519E     MOVF buttonInt_flag, W, BANKED
2114  0A01     XORLW 0x1
2116  B4D8     BTFSC STATUS, 2, ACCESS
2118  D776     BRA 0x2006
211A  0A03     XORLW 0x3
211C  B4D8     BTFSC STATUS, 2, ACCESS
211E  D79D     BRA 0x205A
2120  0A01     XORLW 0x1
2122  B4D8     BTFSC STATUS, 2, ACCESS
2124  D7C4     BRA 0x20AE
289:                           case BUTTON_UP:
290:                               DEBOUNCE(UP_BUTTON);
2002  A482     BTFSS PORTC, 2, ACCESS
2004  D004     BRA 0x200E
2006  0E00     MOVLW 0x0
2008  6ECF     MOVWF TMR1H, ACCESS
200A  0E00     MOVLW 0x0
200C  6ECE     MOVWF TMR1L, ACCESS
200E  0EF4     MOVLW 0xF4
2010  5CCE     SUBWF TMR1L, W, ACCESS
2012  0E01     MOVLW 0x1
2014  58CF     SUBWFB TMR1H, W, ACCESS
2016  A0D8     BTFSS STATUS, 0, ACCESS
2018  D7F4     BRA 0x2002
201A  D002     BRA 0x2020
201C  B482     BTFSC PORTC, 2, ACCESS
201E  D004     BRA 0x2028
2020  0E00     MOVLW 0x0
2022  6ECF     MOVWF TMR1H, ACCESS
2024  0E00     MOVLW 0x0
2026  6ECE     MOVWF TMR1L, ACCESS
2028  0EF4     MOVLW 0xF4
202A  5CCE     SUBWF TMR1L, W, ACCESS
202C  0E01     MOVLW 0x1
202E  58CF     SUBWFB TMR1H, W, ACCESS
2030  B0D8     BTFSC STATUS, 0, ACCESS
2032  D007     BRA 0x2042
2034  D7F3     BRA 0x201C
291:                               switch (currentState) {
2042  0100     MOVLB 0x0
2044  0100     MOVLB 0x0
2046  51CE     MOVF currentState, W, BANKED
2048  0A01     XORLW 0x1
204A  B4D8     BTFSC STATUS, 2, ACCESS
204C  D7F4     BRA 0x2036
204E  0A05     XORLW 0x5
2050  B4D8     BTFSC STATUS, 2, ACCESS
2052  D7F4     BRA 0x203C
2054  D068     BRA 0x2126
292:           
293:                                   case TIME_NUMERICAL:
294:                                       timedate_flag = SET;
2036  0100     MOVLB 0x0
2038  8247     BSF scrollInt_flag, 1, ACCESS
295:                                       break;
203A  D075     BRA 0x2126
296:                                   case TEMP:
297:                                       tscale_flag = FAHRENHEIT;
203C  0100     MOVLB 0x0
203E  8447     BSF scrollInt_flag, 2, ACCESS
298:                                       break;
2040  D072     BRA 0x2126
299:           
300:                               }
301:                               break;
302:                           case BUTTON_ENTER:
303:                               DEBOUNCE(ENTER_BUTTON);
2056  A282     BTFSS PORTC, 1, ACCESS
2058  D004     BRA 0x2062
205A  0E00     MOVLW 0x0
205C  6ECF     MOVWF TMR1H, ACCESS
205E  0E00     MOVLW 0x0
2060  6ECE     MOVWF TMR1L, ACCESS
2062  0EF4     MOVLW 0xF4
2064  5CCE     SUBWF TMR1L, W, ACCESS
2066  0E01     MOVLW 0x1
2068  58CF     SUBWFB TMR1H, W, ACCESS
206A  A0D8     BTFSS STATUS, 0, ACCESS
206C  D7F4     BRA 0x2056
206E  D002     BRA 0x2074
2070  B282     BTFSC PORTC, 1, ACCESS
2072  D004     BRA 0x207C
2074  0E00     MOVLW 0x0
2076  6ECF     MOVWF TMR1H, ACCESS
2078  0E00     MOVLW 0x0
207A  6ECE     MOVWF TMR1L, ACCESS
207C  0EF4     MOVLW 0xF4
207E  5CCE     SUBWF TMR1L, W, ACCESS
2080  0E01     MOVLW 0x1
2082  58CF     SUBWFB TMR1H, W, ACCESS
2084  A0D8     BTFSS STATUS, 0, ACCESS
2086  D7F4     BRA 0x2070
304:                               currentState++;
2088  0100     MOVLB 0x0
208A  0100     MOVLB 0x0
208C  2BCE     INCF currentState, F, BANKED
305:                               if ((currentState) > MAIN_STATES) currentState = 1;
208E  0E06     MOVLW 0x6
2090  0100     MOVLB 0x0
2092  0100     MOVLB 0x0
2094  65CE     CPFSGT currentState, BANKED
2096  D004     BRA 0x20A0
2098  0E01     MOVLW 0x1
209A  0100     MOVLB 0x0
209C  0100     MOVLB 0x0
209E  6FCE     MOVWF currentState, BANKED
306:                               timedate_flag = CLEAR;
20A0  0100     MOVLB 0x0
20A2  9247     BCF scrollInt_flag, 1, ACCESS
307:                               ClearDisplay();
20A4  ECB1     CALL 0x3562, 0
20A6  F01A     NOP
308:                               break;
20A8  D03E     BRA 0x2126
309:           
310:                           case BUTTON_DOWN:
311:                               DEBOUNCE(DOWN_BUTTON);
20AA  A082     BTFSS PORTC, 0, ACCESS
20AC  D004     BRA 0x20B6
20AE  0E00     MOVLW 0x0
20B0  6ECF     MOVWF TMR1H, ACCESS
20B2  0E00     MOVLW 0x0
20B4  6ECE     MOVWF TMR1L, ACCESS
20B6  0EF4     MOVLW 0xF4
20B8  5CCE     SUBWF TMR1L, W, ACCESS
20BA  0E01     MOVLW 0x1
20BC  58CF     SUBWFB TMR1H, W, ACCESS
20BE  A0D8     BTFSS STATUS, 0, ACCESS
20C0  D7F4     BRA 0x20AA
20C2  D002     BRA 0x20C8
20C4  B082     BTFSC PORTC, 0, ACCESS
20C6  D004     BRA 0x20D0
20C8  0E00     MOVLW 0x0
20CA  6ECF     MOVWF TMR1H, ACCESS
20CC  0E00     MOVLW 0x0
20CE  6ECE     MOVWF TMR1L, ACCESS
20D0  0EF4     MOVLW 0xF4
20D2  5CCE     SUBWF TMR1L, W, ACCESS
20D4  0E01     MOVLW 0x1
20D6  58CF     SUBWFB TMR1H, W, ACCESS
20D8  B0D8     BTFSC STATUS, 0, ACCESS
20DA  D00C     BRA 0x20F4
20DC  D7F3     BRA 0x20C4
312:                               switch (currentState) {
20F4  0100     MOVLB 0x0
20F6  0100     MOVLB 0x0
20F8  51CE     MOVF currentState, W, BANKED
20FA  0A01     XORLW 0x1
20FC  B4D8     BTFSC STATUS, 2, ACCESS
20FE  D7EF     BRA 0x20DE
2100  0A05     XORLW 0x5
2102  B4D8     BTFSC STATUS, 2, ACCESS
2104  D7EF     BRA 0x20E4
2106  0A02     XORLW 0x2
2108  B4D8     BTFSC STATUS, 2, ACCESS
210A  D7EF     BRA 0x20EA
210C  D00C     BRA 0x2126
313:                                   case TIME_NUMERICAL:
314:                                       timedate_flag = CLEAR;
20DE  0100     MOVLB 0x0
20E0  9247     BCF scrollInt_flag, 1, ACCESS
315:                                       break;
20E2  D021     BRA 0x2126
316:                                   case TEMP:
317:                                       tscale_flag = CELSIUS;
20E4  0100     MOVLB 0x0
20E6  9447     BCF scrollInt_flag, 2, ACCESS
318:                                       break;
20E8  D01E     BRA 0x2126
319:                                   case TIMER:
320:                                       currentState = SETTIMER;
20EA  0E07     MOVLW 0x7
20EC  0100     MOVLB 0x0
20EE  0100     MOVLB 0x0
20F0  6FCE     MOVWF currentState, BANKED
321:                                       break;
20F2  D019     BRA 0x2126
322:           
323:                               }
324:                               break;
325:                       }
326:                       BUTTON_INTS_ENABLE();
2126  92F2     BCF INTCON, 1, ACCESS
2128  90F0     BCF INTCON3, 0, ACCESS
212A  92F0     BCF INTCON3, 1, ACCESS
212C  88F2     BSF INTCON, 4, ACCESS
212E  86F0     BSF INTCON3, 3, ACCESS
2130  88F0     BSF INTCON3, 4, ACCESS
327:                       
328:                       buttonInt_flag = 0;
2132  0E00     MOVLW 0x0
2134  0100     MOVLB 0x0
2136  0100     MOVLB 0x0
2138  6F9E     MOVWF buttonInt_flag, BANKED
329:           }
213A  0012     RETURN 0
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/game.c  --------------------------------
1:             /* ***************************************************************************
2:              **    game.c
3:              **
4:              **  Project      :
5:              **  Target       :
6:              **  Description  :
7:              **
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : September 10, 2013
12:             **
13:             **  R Hanlen <implod@gmail.com>
14:             ** ***************************************************************************/
15:            
16:            /*****************************************************************************
17:             **HEADER FILES
18:             *****************************************************************************/
19:            
20:            //Compiler-Standard
21:            #include <htc.h>
22:            #include <stdint.h>        /* For uint8_t definition */
23:            #include <stdbool.h>       /* For true/false definition */
24:            #include <string.h>
25:            
26:            //Project
27:            #include "global.h"
28:            #include "game.h"
29:            #include "delay.h"
30:            
31:            /*****************************************************************************
32:             **VARIABLES
33:             *****************************************************************************/
34:            uint8_t cycle_count = 0;
35:            uint8_t pattern_index = 0;
36:            /*****************************************************************************
37:             **FUNCTIONS
38:             *****************************************************************************/
39:            
40:            /* Functions that 'read' from the game board affect the 'foreground' memory*/
41:            
42:            //uint8_t get_board_value(uint8_t row, uint8_t col){
43:            //    return (game_board[CURRENT_GAMEBOARD][ GAME_BOARD_CHAR_INDEX(row, col) ]
44:            //            & (BIT(GAME_BOARD_PIXEL_OFFSET(row, col))))
45:            //            >> GAME_BOARD_PIXEL_OFFSET(row, col);
46:            //}
47:            
48:            uint8_t get_board_value(uint8_t row, uint8_t col){
49:                return(display.cols[ GAME_BOARD_CHAR_INDEX(row, col) ]
50:                        & (BIT(GAME_BOARD_PIXEL_OFFSET(row, col))))
51:                        >> GAME_BOARD_PIXEL_OFFSET(row, col);
2A80  0100     MOVLB 0x0
2A82  0100     MOVLB 0x0
2A84  516A     MOVF col, W, BANKED
2A86  0D08     MULLW 0x8
2A88  50F3     MOVF PRODL, W, ACCESS
2A8A  0100     MOVLB 0x0
2A8C  0100     MOVLB 0x0
2A8E  2569     ADDWF row, W, BANKED
2A90  0100     MOVLB 0x0
2A92  6F6B     MOVWF counter, BANKED
2A94  0E07     MOVLW 0x7
2A96  0100     MOVLB 0x0
2A98  176B     ANDWF counter, F, BANKED
2A9A  0100     MOVLB 0x0
2A9C  0100     MOVLB 0x0
2A9E  516A     MOVF col, W, BANKED
2AA0  0D08     MULLW 0x8
2AA2  0100     MOVLB 0x0
2AA4  0100     MOVLB 0x0
2AA6  5169     MOVF row, W, BANKED
2AA8  24F3     ADDWF PRODL, W, ACCESS
2AAA  0100     MOVLB 0x0
2AAC  0100     MOVLB 0x0
2AAE  6F60     MOVWF __pcstackBANK0, BANKED
2AB0  0100     MOVLB 0x0
2AB2  0E00     MOVLW 0x0
2AB4  20F4     ADDWFC PRODH, W, ACCESS
2AB6  0100     MOVLB 0x0
2AB8  6F61     MOVWF col, BANKED
2ABA  0E00     MOVLW 0x0
2ABC  0100     MOVLB 0x0
2ABE  0100     MOVLB 0x0
2AC0  6F63     MOVWF string_index, BANKED
2AC2  0E08     MOVLW 0x8
2AC4  0100     MOVLB 0x0
2AC6  6F62     MOVWF c, BANKED
2AC8  EC3B     CALL 0x2276, 0
2ACA  F011     NOP
2ACC  0100     MOVLB 0x0
2ACE  0EA3     MOVLW 0xA3
2AD0  0100     MOVLB 0x0
2AD2  0100     MOVLB 0x0
2AD4  2560     ADDWF __pcstackBANK0, W, BANKED
2AD6  6ED9     MOVWF FSR2L, ACCESS
2AD8  0100     MOVLB 0x0
2ADA  0E00     MOVLW 0x0
2ADC  0100     MOVLB 0x0
2ADE  0100     MOVLB 0x0
2AE0  2161     ADDWFC col, W, BANKED
2AE2  6EDA     MOVWF FSR2H, ACCESS
2AE4  50DF     MOVF INDF2, W, ACCESS
2AE6  0100     MOVLB 0x0
2AE8  6F6C     MOVWF quotient, BANKED
2AEA  0100     MOVLB 0x0
2AEC  0100     MOVLB 0x0
2AEE  516A     MOVF col, W, BANKED
2AF0  0D08     MULLW 0x8
2AF2  50F3     MOVF PRODL, W, ACCESS
2AF4  0100     MOVLB 0x0
2AF6  0100     MOVLB 0x0
2AF8  2569     ADDWF row, W, BANKED
2AFA  0100     MOVLB 0x0
2AFC  6F6D     MOVWF tstring, BANKED
2AFE  0E07     MOVLW 0x7
2B00  0100     MOVLB 0x0
2B02  176D     ANDWF tstring, F, BANKED
2B04  0E01     MOVLW 0x1
2B06  0100     MOVLB 0x0
2B08  6F6E     MOVWF time, BANKED
2B0A  0100     MOVLB 0x0
2B0C  2B6D     INCF tstring, F, BANKED
2B0E  D003     BRA 0x2B16
2B10  0100     MOVLB 0x0
2B12  90D8     BCF STATUS, 0, ACCESS
2B14  376E     RLCF time, F, BANKED
2B16  0100     MOVLB 0x0
2B18  2F6D     DECFSZ tstring, F, BANKED
2B1A  D7FA     BRA 0x2B10
2B1C  0100     MOVLB 0x0
2B1E  516E     MOVF time, W, BANKED
2B20  0100     MOVLB 0x0
2B22  156C     ANDWF quotient, W, BANKED
2B24  0100     MOVLB 0x0
2B26  6F6F     MOVWF 0x6F, BANKED
2B28  0100     MOVLB 0x0
2B2A  2B6B     INCF counter, F, BANKED
2B2C  D003     BRA 0x2B34
2B2E  0100     MOVLB 0x0
2B30  90D8     BCF STATUS, 0, ACCESS
2B32  336F     RRCF 0x6F, F, BANKED
2B34  0100     MOVLB 0x0
2B36  2F6B     DECFSZ counter, F, BANKED
2B38  D7FA     BRA 0x2B2E
2B3A  0100     MOVLB 0x0
2B3C  516F     MOVF 0x6F, W, BANKED
2B3E  0012     RETURN 0
52:            }
53:            
54:            /* Functions that 'write' to the game board affect the 'background' memory*/
55:            
56:            //void clear_board_location(uint8_t row, uint8_t col){
57:            //    game_board[PREVIOUS_GAMEBOARD][ GAME_BOARD_CHAR_INDEX(row, col) ] &=
58:            //            ~(BIT(GAME_BOARD_PIXEL_OFFSET(row, col)));
59:            //}
60:            //
61:            //void set_board_location(uint8_t row, uint8_t col){
62:            //    game_board[PREVIOUS_GAMEBOARD][ GAME_BOARD_CHAR_INDEX(row, col) ] |=
63:            //            BIT(GAME_BOARD_PIXEL_OFFSET(row, col));
64:            //}
65:            
66:            void clear_board_location(uint8_t row, uint8_t col){
67:                game_board[ GAME_BOARD_CHAR_INDEX(row, col) ] &=
68:                        ~(BIT(GAME_BOARD_PIXEL_OFFSET(row, col)));
2E84  0100     MOVLB 0x0
2E86  0100     MOVLB 0x0
2E88  516A     MOVF col, W, BANKED
2E8A  0D08     MULLW 0x8
2E8C  50F3     MOVF PRODL, W, ACCESS
2E8E  0100     MOVLB 0x0
2E90  0100     MOVLB 0x0
2E92  2569     ADDWF row, W, BANKED
2E94  0100     MOVLB 0x0
2E96  6F6B     MOVWF counter, BANKED
2E98  0E07     MOVLW 0x7
2E9A  0100     MOVLB 0x0
2E9C  176B     ANDWF counter, F, BANKED
2E9E  0E01     MOVLW 0x1
2EA0  0100     MOVLB 0x0
2EA2  6F6C     MOVWF quotient, BANKED
2EA4  0100     MOVLB 0x0
2EA6  2B6B     INCF counter, F, BANKED
2EA8  D003     BRA 0x2EB0
2EAA  0100     MOVLB 0x0
2EAC  90D8     BCF STATUS, 0, ACCESS
2EAE  376C     RLCF quotient, F, BANKED
2EB0  0100     MOVLB 0x0
2EB2  2F6B     DECFSZ counter, F, BANKED
2EB4  D7FA     BRA 0x2EAA
2EB6  0100     MOVLB 0x0
2EB8  516C     MOVF quotient, W, BANKED
2EBA  0AFF     XORLW 0xFF
2EBC  0100     MOVLB 0x0
2EBE  6F6D     MOVWF tstring, BANKED
2EC0  0100     MOVLB 0x0
2EC2  0100     MOVLB 0x0
2EC4  516A     MOVF col, W, BANKED
2EC6  0D08     MULLW 0x8
2EC8  0100     MOVLB 0x0
2ECA  0100     MOVLB 0x0
2ECC  5169     MOVF row, W, BANKED
2ECE  24F3     ADDWF PRODL, W, ACCESS
2ED0  0100     MOVLB 0x0
2ED2  0100     MOVLB 0x0
2ED4  6F60     MOVWF __pcstackBANK0, BANKED
2ED6  0100     MOVLB 0x0
2ED8  0E00     MOVLW 0x0
2EDA  20F4     ADDWFC PRODH, W, ACCESS
2EDC  0100     MOVLB 0x0
2EDE  6F61     MOVWF col, BANKED
2EE0  0E00     MOVLW 0x0
2EE2  0100     MOVLB 0x0
2EE4  0100     MOVLB 0x0
2EE6  6F63     MOVWF string_index, BANKED
2EE8  0E08     MOVLW 0x8
2EEA  0100     MOVLB 0x0
2EEC  6F62     MOVWF c, BANKED
2EEE  EC3B     CALL 0x2276, 0
2EF0  F011     NOP
2EF2  0100     MOVLB 0x0
2EF4  0EB3     MOVLW 0xB3
2EF6  0100     MOVLB 0x0
2EF8  0100     MOVLB 0x0
2EFA  2560     ADDWF __pcstackBANK0, W, BANKED
2EFC  6ED9     MOVWF FSR2L, ACCESS
2EFE  0100     MOVLB 0x0
2F00  0E00     MOVLW 0x0
2F02  0100     MOVLB 0x0
2F04  0100     MOVLB 0x0
2F06  2161     ADDWFC col, W, BANKED
2F08  6EDA     MOVWF FSR2H, ACCESS
2F0A  0100     MOVLB 0x0
2F0C  516D     MOVF tstring, W, BANKED
2F0E  16DF     ANDWF INDF2, F, ACCESS
69:            }
2F10  0012     RETURN 0
70:            
71:            void set_board_location(uint8_t row, uint8_t col){
72:                game_board[ GAME_BOARD_CHAR_INDEX(row, col) ] |=
73:                        BIT(GAME_BOARD_PIXEL_OFFSET(row, col));
30AC  0100     MOVLB 0x0
30AE  0100     MOVLB 0x0
30B0  516A     MOVF col, W, BANKED
30B2  0D08     MULLW 0x8
30B4  50F3     MOVF PRODL, W, ACCESS
30B6  0100     MOVLB 0x0
30B8  0100     MOVLB 0x0
30BA  2569     ADDWF row, W, BANKED
30BC  0100     MOVLB 0x0
30BE  6F6B     MOVWF counter, BANKED
30C0  0E07     MOVLW 0x7
30C2  0100     MOVLB 0x0
30C4  176B     ANDWF counter, F, BANKED
30C6  0E01     MOVLW 0x1
30C8  0100     MOVLB 0x0
30CA  6F6C     MOVWF quotient, BANKED
30CC  0100     MOVLB 0x0
30CE  2B6B     INCF counter, F, BANKED
30D0  D003     BRA 0x30D8
30D2  0100     MOVLB 0x0
30D4  90D8     BCF STATUS, 0, ACCESS
30D6  376C     RLCF quotient, F, BANKED
30D8  0100     MOVLB 0x0
30DA  2F6B     DECFSZ counter, F, BANKED
30DC  D7FA     BRA 0x30D2
30DE  0100     MOVLB 0x0
30E0  0100     MOVLB 0x0
30E2  516A     MOVF col, W, BANKED
30E4  0D08     MULLW 0x8
30E6  0100     MOVLB 0x0
30E8  0100     MOVLB 0x0
30EA  5169     MOVF row, W, BANKED
30EC  24F3     ADDWF PRODL, W, ACCESS
30EE  0100     MOVLB 0x0
30F0  0100     MOVLB 0x0
30F2  6F60     MOVWF __pcstackBANK0, BANKED
30F4  0100     MOVLB 0x0
30F6  0E00     MOVLW 0x0
30F8  20F4     ADDWFC PRODH, W, ACCESS
30FA  0100     MOVLB 0x0
30FC  6F61     MOVWF col, BANKED
30FE  0E00     MOVLW 0x0
3100  0100     MOVLB 0x0
3102  0100     MOVLB 0x0
3104  6F63     MOVWF string_index, BANKED
3106  0E08     MOVLW 0x8
3108  0100     MOVLB 0x0
310A  6F62     MOVWF c, BANKED
310C  EC3B     CALL 0x2276, 0
310E  F011     NOP
3110  0100     MOVLB 0x0
3112  0EB3     MOVLW 0xB3
3114  0100     MOVLB 0x0
3116  0100     MOVLB 0x0
3118  2560     ADDWF __pcstackBANK0, W, BANKED
311A  6ED9     MOVWF FSR2L, ACCESS
311C  0100     MOVLB 0x0
311E  0E00     MOVLW 0x0
3120  0100     MOVLB 0x0
3122  0100     MOVLB 0x0
3124  2161     ADDWFC col, W, BANKED
3126  6EDA     MOVWF FSR2H, ACCESS
3128  0100     MOVLB 0x0
312A  516C     MOVF quotient, W, BANKED
312C  12DF     IORWF INDF2, F, ACCESS
74:            }
312E  0012     RETURN 0
75:            
76:            void init_game(void){
77:            
78:                memset(game_board, 0, sizeof(game_board));
36FA  0100     MOVLB 0x0
36FC  0E00     MOVLW 0x0
36FE  0100     MOVLB 0x0
3700  0100     MOVLB 0x0
3702  6F61     MOVWF col, BANKED
3704  0100     MOVLB 0x0
3706  0EB3     MOVLW 0xB3
3708  0100     MOVLB 0x0
370A  6F60     MOVWF __pcstackBANK0, BANKED
370C  0E00     MOVLW 0x0
370E  0100     MOVLB 0x0
3710  0100     MOVLB 0x0
3712  6F63     MOVWF string_index, BANKED
3714  0E00     MOVLW 0x0
3716  0100     MOVLB 0x0
3718  6F62     MOVWF c, BANKED
371A  0E00     MOVLW 0x0
371C  0100     MOVLB 0x0
371E  0100     MOVLB 0x0
3720  6F65     MOVWF counter, BANKED
3722  0E0F     MOVLW 0xF
3724  0100     MOVLB 0x0
3726  6F64     MOVWF n, BANKED
3728  EC9B     CALL 0x3736, 0
372A  F01B     NOP
79:            
80:                glider();
372C  ECA0     CALL 0x2B40, 0
372E  F015     NOP
81:            
82:                swap_buffers();
3730  ECAD     CALL 0x335A, 0
3732  F019     NOP
83:            }
3734  0012     RETURN 0
84:            
85:            void game_loop(void){
86:            
87:                if (calculate_next_game_board() == 0) random_board();
2F12  EC4B     CALL 0x2496, 0
2F14  F012     NOP
2F16  0900     IORLW 0x0
2F18  B4D8     BTFSC STATUS, 2, ACCESS
2F1A  EC14     CALL 0x3028, 0
2F1C  F018     NOP
88:            
89:                cycle_count++;
2F1E  0100     MOVLB 0x0
2F20  0100     MOVLB 0x0
2F22  2B9F     INCF cycle_count, F, BANKED
90:                if (NUM_CYCLES_UNTIL_RESTART == cycle_count) {
2F24  0100     MOVLB 0x0
2F26  0100     MOVLB 0x0
2F28  519F     MOVF cycle_count, W, BANKED
2F2A  0A3C     XORLW 0x3C
2F2C  A4D8     BTFSS STATUS, 2, ACCESS
2F2E  D02B     BRA 0x2F86
91:                    cycle_count = 0;
2F30  0100     MOVLB 0x0
2F32  6F80     MOVWF max, BANKED
2F34  0E00     MOVLW 0x0
2F36  0100     MOVLB 0x0
2F38  0100     MOVLB 0x0
2F3A  6F9F     MOVWF cycle_count, BANKED
2F3C  0100     MOVLB 0x0
2F3E  5180     MOVF max, W, BANKED
92:                    //memset(game_board, 0, sizeof(game_board));
93:                    pattern_index = (pattern_index + 1) % 4;
2F40  0100     MOVLB 0x0
2F42  0100     MOVLB 0x0
2F44  29A0     INCF pattern_index, W, BANKED
2F46  0B03     ANDLW 0x3
2F48  0100     MOVLB 0x0
2F4A  0100     MOVLB 0x0
2F4C  6FA0     MOVWF pattern_index, BANKED
94:            
95:                    switch (pattern_index) {
2F4E  D00C     BRA 0x2F68
2F68  0100     MOVLB 0x0
2F6A  0100     MOVLB 0x0
2F6C  51A0     MOVF pattern_index, W, BANKED
2F6E  0A00     XORLW 0x0
2F70  B4D8     BTFSC STATUS, 2, ACCESS
2F72  D7EE     BRA 0x2F50
2F74  0A01     XORLW 0x1
2F76  B4D8     BTFSC STATUS, 2, ACCESS
2F78  D7EE     BRA 0x2F56
2F7A  0A03     XORLW 0x3
2F7C  B4D8     BTFSC STATUS, 2, ACCESS
2F7E  D7EE     BRA 0x2F5C
2F80  0A01     XORLW 0x1
2F82  B4D8     BTFSC STATUS, 2, ACCESS
2F84  D7EE     BRA 0x2F62
96:            
97:                        case 0:
98:                            glider();
2F50  ECA0     CALL 0x2B40, 0
2F52  F015     NOP
99:                            //				swap_buffers();
100:                           //				glider();
101:                           break;
2F54  D018     BRA 0x2F86
102:                       case 1:
103:                           block();
2F56  EC3C     CALL 0x2678, 0
2F58  F013     NOP
104:                           //				swap_buffers();
105:                           //				block();
106:                           break;
2F5A  D015     BRA 0x2F86
107:                       case 2:
108:                           blinker();
2F5C  EC11     CALL 0x3222, 0
2F5E  F019     NOP
109:                           //				swap_buffers();
110:                           //				blinker();
111:                           break;
2F60  D012     BRA 0x2F86
112:                       case 3:
113:                           random_board();
2F62  EC14     CALL 0x3028, 0
2F64  F018     NOP
114:                           //				swap_buffers();
115:                           //				copy_buffer();
116:                           break;
2F66  D00F     BRA 0x2F86
117:                   }
118:               }
119:           
120:               swap_buffers();
2F86  ECAD     CALL 0x335A, 0
2F88  F019     NOP
121:               DelayMs(200);
2F8A  0E00     MOVLW 0x0
2F8C  0100     MOVLB 0x0
2F8E  0100     MOVLB 0x0
2F90  6F61     MOVWF col, BANKED
2F92  0EC8     MOVLW 0xC8
2F94  0100     MOVLB 0x0
2F96  6F60     MOVWF __pcstackBANK0, BANKED
2F98  ECFB     CALL 0x2BF6, 0
2F9A  F015     NOP
122:           
123:               //        for(uint8_t col = 0; col < NUM_DISPLAY_COLUMNS; col++){
124:               //            display.cols[col] = game_board[CURRENT_GAMEBOARD][col];
125:               //        }
126:               /*Shift Out game_board[CURRENT_GAMEBOARD]*/
127:           }
2F9C  0012     RETURN 0
128:           
129:           uint8_t calculate_next_game_board(void){
130:           
131:               uint8_t alive_count = 0;
2496  0100     MOVLB 0x0
2498  6F79     MOVWF currentNumber, BANKED
249A  0E00     MOVLW 0x0
249C  0100     MOVLB 0x0
249E  0100     MOVLB 0x0
24A0  6F7C     MOVWF alive_count, BANKED
24A2  0100     MOVLB 0x0
24A4  5179     MOVF currentNumber, W, BANKED
132:           
133:               for (uint8_t row = 0; row < NUM_DISPLAY_ROWS; row++) {
24A6  0100     MOVLB 0x0
24A8  6F79     MOVWF currentNumber, BANKED
24AA  0E00     MOVLW 0x0
24AC  0100     MOVLB 0x0
24AE  0100     MOVLB 0x0
24B0  6F7E     MOVWF row, BANKED
24B2  0100     MOVLB 0x0
24B4  5179     MOVF currentNumber, W, BANKED
24B6  D060     BRA 0x2578
2572  0100     MOVLB 0x0
2574  0100     MOVLB 0x0
2576  2B7E     INCF row, F, BANKED
2578  0E07     MOVLW 0x7
257A  0100     MOVLB 0x0
257C  0100     MOVLB 0x0
257E  657E     CPFSGT row, BANKED
2580  D79B     BRA 0x24B8
134:                   for (uint8_t col = 0; col < NUM_DISPLAY_COLUMNS; col++) {
24B8  0100     MOVLB 0x0
24BA  6F79     MOVWF currentNumber, BANKED
24BC  0E00     MOVLW 0x0
24BE  0100     MOVLB 0x0
24C0  0100     MOVLB 0x0
24C2  6F7F     MOVWF min, BANKED
24C4  0100     MOVLB 0x0
24C6  5179     MOVF currentNumber, W, BANKED
24C8  D04F     BRA 0x2568
2562  0100     MOVLB 0x0
2564  0100     MOVLB 0x0
2566  2B7F     INCF min, F, BANKED
2568  0E0E     MOVLW 0xE
256A  0100     MOVLB 0x0
256C  0100     MOVLB 0x0
256E  657F     CPFSGT min, BANKED
2570  D7AC     BRA 0x24CA
135:                       uint8_t neighbors = get_neighbors(row, col);
24CA  C07E     MOVFF row, divisor
24CC  F070     NOP
24CE  C07F     MOVFF min, col
24D0  F071     NOP
24D2  ECD0     CALL 0x13A0, 0
24D4  F009     NOP
24D6  0100     MOVLB 0x0
24D8  0100     MOVLB 0x0
24DA  6F7A     MOVWF result, BANKED
136:                       uint8_t num_living_neighbors = num_ones(neighbors);
24DC  C07A     MOVFF result, __pcstackBANK0
24DE  F060     NOP
24E0  ECB7     CALL 0x376E, 0
24E2  F01B     NOP
24E4  0100     MOVLB 0x0
24E6  0100     MOVLB 0x0
24E8  6F7D     MOVWF istring, BANKED
137:                       uint8_t cell_is_alive = get_board_value(row, col);
24EA  C07E     MOVFF row, row
24EC  F069     NOP
24EE  C07F     MOVFF min, col
24F0  F06A     NOP
24F2  EC40     CALL 0x2A80, 0
24F4  F015     NOP
24F6  0100     MOVLB 0x0
24F8  0100     MOVLB 0x0
24FA  6F7B     MOVWF cell_is_alive, BANKED
138:           
139:                       if (cell_is_alive) {
24FC  0100     MOVLB 0x0
24FE  0100     MOVLB 0x0
2500  517B     MOVF cell_is_alive, W, BANKED
2502  B4D8     BTFSC STATUS, 2, ACCESS
2504  D018     BRA 0x2536
140:                           if (num_living_neighbors < 2 || num_living_neighbors > 3) {
2506  0E01     MOVLW 0x1
2508  0100     MOVLB 0x0
250A  0100     MOVLB 0x0
250C  657D     CPFSGT istring, BANKED
250E  D005     BRA 0x251A
2510  0E03     MOVLW 0x3
2512  0100     MOVLB 0x0
2514  0100     MOVLB 0x0
2516  657D     CPFSGT istring, BANKED
2518  D007     BRA 0x2528
141:                               clear_board_location(row, col); /* death */
251A  C07E     MOVFF row, row
251C  F069     NOP
251E  C07F     MOVFF min, col
2520  F06A     NOP
2522  EC42     CALL 0x2E84, 0
2524  F017     NOP
142:                           } else {
2526  D01D     BRA 0x2562
143:                               set_board_location(row, col); /* survival */
2528  C07E     MOVFF row, row
252A  F069     NOP
252C  C07F     MOVFF min, col
252E  F06A     NOP
2530  EC56     CALL 0x30AC, 0
2532  F018     NOP
2534  D00C     BRA 0x254E
144:                               alive_count++;
145:                           }
146:                       } else {
147:                           if (num_living_neighbors == 3) {
2536  0100     MOVLB 0x0
2538  0100     MOVLB 0x0
253A  517D     MOVF istring, W, BANKED
253C  0A03     XORLW 0x3
253E  A4D8     BTFSS STATUS, 2, ACCESS
2540  D00A     BRA 0x2556
148:                               set_board_location(row, col); /* birth */
2542  C07E     MOVFF row, row
2544  F069     NOP
2546  C07F     MOVFF min, col
2548  F06A     NOP
254A  EC56     CALL 0x30AC, 0
254C  F018     NOP
149:                               alive_count++;
254E  0100     MOVLB 0x0
2550  0100     MOVLB 0x0
2552  2B7C     INCF alive_count, F, BANKED
150:                           } else {
2554  D006     BRA 0x2562
151:                               clear_board_location(row, col); /* desolation */
2556  C07E     MOVFF row, row
2558  F069     NOP
255A  C07F     MOVFF min, col
255C  F06A     NOP
255E  EC42     CALL 0x2E84, 0
2560  F017     NOP
152:                           }
153:                       }
154:           
155:                   }
156:               }
157:               return alive_count;
2582  0100     MOVLB 0x0
158:           }
159:           
160:           uint8_t get_neighbors(uint8_t row, uint8_t col){
161:               uint8_t return_value = 0;
13A0  0100     MOVLB 0x0
13A2  6F72     MOVWF num_ptr, BANKED
13A4  0E00     MOVLW 0x0
13A6  0100     MOVLB 0x0
13A8  0100     MOVLB 0x0
13AA  6F73     MOVWF counter, BANKED
13AC  0100     MOVLB 0x0
13AE  5172     MOVF num_ptr, W, BANKED
162:               int8_t r = 0, c = 0;
13B0  0100     MOVLB 0x0
13B2  6F72     MOVWF num_ptr, BANKED
13B4  0E00     MOVLW 0x0
13B6  0100     MOVLB 0x0
13B8  0100     MOVLB 0x0
13BA  6F77     MOVWF r, BANKED
13BC  0100     MOVLB 0x0
13BE  5172     MOVF num_ptr, W, BANKED
13C0  0100     MOVLB 0x0
13C2  6F72     MOVWF num_ptr, BANKED
13C4  0E00     MOVLW 0x0
13C6  0100     MOVLB 0x0
13C8  0100     MOVLB 0x0
13CA  6F78     MOVWF done, BANKED
13CC  0100     MOVLB 0x0
13CE  5172     MOVF num_ptr, W, BANKED
163:               uint8_t neighbor_value = 0;
13D0  0100     MOVLB 0x0
13D2  6F72     MOVWF num_ptr, BANKED
13D4  0E00     MOVLW 0x0
13D6  0100     MOVLB 0x0
13D8  0100     MOVLB 0x0
13DA  6F74     MOVWF min, BANKED
13DC  0100     MOVLB 0x0
13DE  5172     MOVF num_ptr, W, BANKED
164:           
165:               for (int8_t rr = -1; rr <= 1; rr++) {
13E0  0100     MOVLB 0x0
13E2  0100     MOVLB 0x0
13E4  6975     SETF max, BANKED
13E6  0100     MOVLB 0x0
13E8  0100     MOVLB 0x0
13EA  5175     MOVF max, W, BANKED
13EC  0A80     XORLW 0x80
13EE  0F7E     ADDLW 0x7E
13F0  B0D8     BTFSC STATUS, 0, ACCESS
13F2  D0AD     BRA 0x154E
1546  0100     MOVLB 0x0
1548  0100     MOVLB 0x0
154A  2B75     INCF max, F, BANKED
154C  D74C     BRA 0x13E6
166:                   for (int8_t cc = -1; cc <= 1; cc++) {
13F4  0100     MOVLB 0x0
13F6  0100     MOVLB 0x0
13F8  6976     SETF cc, BANKED
13FA  0100     MOVLB 0x0
13FC  0100     MOVLB 0x0
13FE  5176     MOVF cc, W, BANKED
1400  0A80     XORLW 0x80
1402  0F7E     ADDLW 0x7E
1404  B0D8     BTFSC STATUS, 0, ACCESS
1406  D09F     BRA 0x1546
153E  0100     MOVLB 0x0
1540  0100     MOVLB 0x0
1542  2B76     INCF cc, F, BANKED
1544  D75A     BRA 0x13FA
167:                       if (rr != 0 || cc != 0) { // you can't be your own neighbor
1408  0100     MOVLB 0x0
140A  0100     MOVLB 0x0
140C  6775     TSTFSZ max, BANKED
140E  D005     BRA 0x141A
1410  0100     MOVLB 0x0
1412  0100     MOVLB 0x0
1414  5176     MOVF cc, W, BANKED
1416  B4D8     BTFSC STATUS, 2, ACCESS
1418  D092     BRA 0x153E
168:                           r = row + rr;
141A  0100     MOVLB 0x0
141C  0100     MOVLB 0x0
141E  5170     MOVF divisor, W, BANKED
1420  0100     MOVLB 0x0
1422  0100     MOVLB 0x0
1424  2575     ADDWF max, W, BANKED
1426  0100     MOVLB 0x0
1428  0100     MOVLB 0x0
142A  6F77     MOVWF r, BANKED
169:                           c = col + cc;
142C  0100     MOVLB 0x0
142E  0100     MOVLB 0x0
1430  5171     MOVF col, W, BANKED
1432  0100     MOVLB 0x0
1434  0100     MOVLB 0x0
1436  2576     ADDWF cc, W, BANKED
1438  0100     MOVLB 0x0
143A  0100     MOVLB 0x0
143C  6F78     MOVWF done, BANKED
170:           
171:                           if ((r < 0) || (r >= NUM_DISPLAY_ROWS) || (c < 0) || (c >= NUM_DISPLAY_COLUMNS)) {
143E  0100     MOVLB 0x0
1440  0100     MOVLB 0x0
1442  BF77     BTFSC r, 7, BANKED
1444  D05C     BRA 0x14FE
1446  0100     MOVLB 0x0
1448  0100     MOVLB 0x0
144A  5177     MOVF r, W, BANKED
144C  0A80     XORLW 0x80
144E  0F78     ADDLW 0x78
1450  B0D8     BTFSC STATUS, 0, ACCESS
1452  D055     BRA 0x14FE
1454  0100     MOVLB 0x0
1456  0100     MOVLB 0x0
1458  BF78     BTFSC done, 7, BANKED
145A  D051     BRA 0x14FE
145C  0100     MOVLB 0x0
145E  0100     MOVLB 0x0
1460  5178     MOVF done, W, BANKED
1462  0A80     XORLW 0x80
1464  0F71     ADDLW 0x71
1466  B0D8     BTFSC STATUS, 0, ACCESS
1468  D04A     BRA 0x14FE
146A  D057     BRA 0x151A
172:                               switch (boundary_condition) {
14FE  5048     MOVF boundary_condition, W, ACCESS
1500  0A00     XORLW 0x0
1502  B4D8     BTFSC STATUS, 2, ACCESS
1504  D7B3     BRA 0x146C
1506  0A01     XORLW 0x1
1508  B4D8     BTFSC STATUS, 2, ACCESS
150A  D7B4     BRA 0x1474
150C  0A03     XORLW 0x3
150E  B4D8     BTFSC STATUS, 2, ACCESS
1510  D7BA     BRA 0x1486
1512  0A01     XORLW 0x1
1514  B4D8     BTFSC STATUS, 2, ACCESS
1516  D7EC     BRA 0x14F0
1518  D009     BRA 0x152C
173:                                   case WASTELAND:
174:                                       neighbor_value = 0;
146C  0100     MOVLB 0x0
146E  6F72     MOVWF num_ptr, BANKED
1470  0E00     MOVLW 0x0
1472  D003     BRA 0x147A
175:                                       break;
176:                                   case PARADISE:
177:                                       neighbor_value = 1;
1474  0100     MOVLB 0x0
1476  6F72     MOVWF num_ptr, BANKED
1478  0E01     MOVLW 0x1
147A  0100     MOVLB 0x0
147C  0100     MOVLB 0x0
147E  6F74     MOVWF min, BANKED
1480  0100     MOVLB 0x0
1482  5172     MOVF num_ptr, W, BANKED
178:                                       break;
1484  D053     BRA 0x152C
179:                                   case TOROIDAL:
180:                                       if (r < 0) r = NUM_DISPLAY_ROWS - 1;
1486  0100     MOVLB 0x0
1488  0100     MOVLB 0x0
148A  AF77     BTFSS r, 7, BANKED
148C  D004     BRA 0x1496
148E  0100     MOVLB 0x0
1490  6F72     MOVWF num_ptr, BANKED
1492  0E07     MOVLW 0x7
1494  D00A     BRA 0x14AA
181:                                       else if (r >= NUM_DISPLAY_ROWS) r = 0;
1496  0100     MOVLB 0x0
1498  0100     MOVLB 0x0
149A  5177     MOVF r, W, BANKED
149C  0A80     XORLW 0x80
149E  0F78     ADDLW 0x78
14A0  A0D8     BTFSS STATUS, 0, ACCESS
14A2  D008     BRA 0x14B4
14A4  0100     MOVLB 0x0
14A6  6F72     MOVWF num_ptr, BANKED
14A8  0E00     MOVLW 0x0
14AA  0100     MOVLB 0x0
14AC  0100     MOVLB 0x0
14AE  6F77     MOVWF r, BANKED
14B0  0100     MOVLB 0x0
14B2  5172     MOVF num_ptr, W, BANKED
182:                                       if (c < 0) c = NUM_DISPLAY_COLUMNS - 1;
14B4  0100     MOVLB 0x0
14B6  0100     MOVLB 0x0
14B8  AF78     BTFSS done, 7, BANKED
14BA  D004     BRA 0x14C4
14BC  0100     MOVLB 0x0
14BE  6F72     MOVWF num_ptr, BANKED
14C0  0E0E     MOVLW 0xE
14C2  D00A     BRA 0x14D8
183:                                       else if (c >= NUM_DISPLAY_COLUMNS) c = 0;
14C4  0100     MOVLB 0x0
14C6  0100     MOVLB 0x0
14C8  5178     MOVF done, W, BANKED
14CA  0A80     XORLW 0x80
14CC  0F71     ADDLW 0x71
14CE  A0D8     BTFSS STATUS, 0, ACCESS
14D0  D008     BRA 0x14E2
14D2  0100     MOVLB 0x0
14D4  6F72     MOVWF num_ptr, BANKED
14D6  0E00     MOVLW 0x0
14D8  0100     MOVLB 0x0
14DA  0100     MOVLB 0x0
14DC  6F78     MOVWF done, BANKED
14DE  0100     MOVLB 0x0
14E0  5172     MOVF num_ptr, W, BANKED
184:                                       neighbor_value = get_board_value(r, c);
14E2  C077     MOVFF r, row
14E4  F069     NOP
14E6  C078     MOVFF done, col
14E8  F06A     NOP
14EA  EC40     CALL 0x2A80, 0
14EC  F015     NOP
14EE  D01B     BRA 0x1526
185:                                       break;
186:                                   case MIRROR:
187:                                       neighbor_value = get_board_value(row, col);
14F0  C070     MOVFF divisor, row
14F2  F069     NOP
14F4  C071     MOVFF col, col
14F6  F06A     NOP
14F8  EC40     CALL 0x2A80, 0
14FA  F015     NOP
14FC  D014     BRA 0x1526
188:                                       break;
189:                               }
190:                           } else {
191:                               neighbor_value = get_board_value(r, c);
151A  C077     MOVFF r, row
151C  F069     NOP
151E  C078     MOVFF done, col
1520  F06A     NOP
1522  EC40     CALL 0x2A80, 0
1524  F015     NOP
1526  0100     MOVLB 0x0
1528  0100     MOVLB 0x0
152A  6F74     MOVWF min, BANKED
192:                           }
193:           
194:                           return_value <<= 1;
152C  0100     MOVLB 0x0
152E  90D8     BCF STATUS, 0, ACCESS
1530  3773     RLCF counter, F, BANKED
195:                           return_value |= neighbor_value;
1532  0100     MOVLB 0x0
1534  0100     MOVLB 0x0
1536  5174     MOVF min, W, BANKED
1538  0100     MOVLB 0x0
153A  0100     MOVLB 0x0
153C  1373     IORWF counter, F, BANKED
196:                       }
197:                   }
198:               }
199:           
200:               return return_value;
154E  0100     MOVLB 0x0
201:           }
202:           
203:           uint8_t num_ones(uint8_t v){
204:               uint8_t c; // c accumulates the total bits set in v
205:               for (c = 0; v; c++) {
376E  0100     MOVLB 0x0
3770  6F61     MOVWF col, BANKED
3772  0E00     MOVLW 0x0
3774  0100     MOVLB 0x0
3776  0100     MOVLB 0x0
3778  6F62     MOVWF c, BANKED
377A  0100     MOVLB 0x0
377C  5161     MOVF col, W, BANKED
377E  D009     BRA 0x3792
378C  0100     MOVLB 0x0
378E  0100     MOVLB 0x0
3790  2B62     INCF c, F, BANKED
3792  0100     MOVLB 0x0
3794  0100     MOVLB 0x0
3796  6760     TSTFSZ __pcstackBANK0, BANKED
3798  D7F3     BRA 0x3780
206:                   v &= (v - 1); // clear the least significant bit set
3780  0100     MOVLB 0x0
3782  0100     MOVLB 0x0
3784  0560     DECF __pcstackBANK0, W, BANKED
3786  0100     MOVLB 0x0
3788  0100     MOVLB 0x0
378A  1760     ANDWF __pcstackBANK0, F, BANKED
207:               }
208:               return c;
379A  0100     MOVLB 0x0
209:           }
210:           
211:           void swap_buffers(void){
212:               //CURRENT_GAMEBOARD = PREVIOUS_GAMEBOARD;
213:               for (uint8_t col = 0; col < NUM_DISPLAY_COLUMNS; col++) {
335A  0100     MOVLB 0x0
335C  6F60     MOVWF __pcstackBANK0, BANKED
335E  0E00     MOVLW 0x0
3360  0100     MOVLB 0x0
3362  0100     MOVLB 0x0
3364  6F61     MOVWF col, BANKED
3366  0100     MOVLB 0x0
3368  5160     MOVF __pcstackBANK0, W, BANKED
336A  0E0E     MOVLW 0xE
336C  0100     MOVLB 0x0
336E  0100     MOVLB 0x0
3370  6561     CPFSGT col, BANKED
3372  D001     BRA 0x3376
3374  0012     RETURN 0
33AA  0100     MOVLB 0x0
214:                   display.cols[col] = game_board[col];
3376  0100     MOVLB 0x0
3378  0100     MOVLB 0x0
337A  5161     MOVF col, W, BANKED
337C  0D01     MULLW 0x1
337E  0100     MOVLB 0x0
3380  0EB3     MOVLW 0xB3
3382  24F3     ADDWF PRODL, W, ACCESS
3384  6ED9     MOVWF FSR2L, ACCESS
3386  0100     MOVLB 0x0
3388  0E00     MOVLW 0x0
338A  20F4     ADDWFC PRODH, W, ACCESS
338C  6EDA     MOVWF FSR2H, ACCESS
338E  0100     MOVLB 0x0
3390  0100     MOVLB 0x0
3392  5161     MOVF col, W, BANKED
3394  0D01     MULLW 0x1
3396  0100     MOVLB 0x0
3398  0EA3     MOVLW 0xA3
339A  24F3     ADDWF PRODL, W, ACCESS
339C  6EE1     MOVWF FSR1L, ACCESS
339E  0100     MOVLB 0x0
33A0  0E00     MOVLW 0x0
33A2  20F4     ADDWFC PRODH, W, ACCESS
33A4  6EE2     MOVWF FSR1H, ACCESS
33A6  CFDF     MOVFF INDF2, INDF1
33A8  FFE7     NOP
215:               }
216:           }
217:           
218:           /* block */
219:           void block(){
220:               set_board_location(2, 4);
2678  0100     MOVLB 0x0
267A  6F6D     MOVWF tstring, BANKED
267C  0E02     MOVLW 0x2
267E  0100     MOVLB 0x0
2680  0100     MOVLB 0x0
2682  6F69     MOVWF row, BANKED
2684  0100     MOVLB 0x0
2686  516D     MOVF tstring, W, BANKED
2688  0100     MOVLB 0x0
268A  6F6E     MOVWF time, BANKED
268C  0E04     MOVLW 0x4
268E  0100     MOVLB 0x0
2690  0100     MOVLB 0x0
2692  6F6A     MOVWF col, BANKED
2694  0100     MOVLB 0x0
2696  516E     MOVF time, W, BANKED
2698  EC56     CALL 0x30AC, 0
269A  F018     NOP
221:               set_board_location(2, 3);
269C  0100     MOVLB 0x0
269E  6F6D     MOVWF tstring, BANKED
26A0  0E02     MOVLW 0x2
26A2  0100     MOVLB 0x0
26A4  0100     MOVLB 0x0
26A6  6F69     MOVWF row, BANKED
26A8  0100     MOVLB 0x0
26AA  516D     MOVF tstring, W, BANKED
26AC  0100     MOVLB 0x0
26AE  6F6E     MOVWF time, BANKED
26B0  0E03     MOVLW 0x3
26B2  0100     MOVLB 0x0
26B4  0100     MOVLB 0x0
26B6  6F6A     MOVWF col, BANKED
26B8  0100     MOVLB 0x0
26BA  516E     MOVF time, W, BANKED
26BC  EC56     CALL 0x30AC, 0
26BE  F018     NOP
222:               set_board_location(3, 4);
26C0  0100     MOVLB 0x0
26C2  6F6D     MOVWF tstring, BANKED
26C4  0E03     MOVLW 0x3
26C6  0100     MOVLB 0x0
26C8  0100     MOVLB 0x0
26CA  6F69     MOVWF row, BANKED
26CC  0100     MOVLB 0x0
26CE  516D     MOVF tstring, W, BANKED
26D0  0100     MOVLB 0x0
26D2  6F6E     MOVWF time, BANKED
26D4  0E04     MOVLW 0x4
26D6  0100     MOVLB 0x0
26D8  0100     MOVLB 0x0
26DA  6F6A     MOVWF col, BANKED
26DC  0100     MOVLB 0x0
26DE  516E     MOVF time, W, BANKED
26E0  EC56     CALL 0x30AC, 0
26E2  F018     NOP
223:               set_board_location(4, 3);
26E4  0100     MOVLB 0x0
26E6  6F6D     MOVWF tstring, BANKED
26E8  0E04     MOVLW 0x4
26EA  0100     MOVLB 0x0
26EC  0100     MOVLB 0x0
26EE  6F69     MOVWF row, BANKED
26F0  0100     MOVLB 0x0
26F2  516D     MOVF tstring, W, BANKED
26F4  0100     MOVLB 0x0
26F6  6F6E     MOVWF time, BANKED
26F8  0E03     MOVLW 0x3
26FA  0100     MOVLB 0x0
26FC  0100     MOVLB 0x0
26FE  6F6A     MOVWF col, BANKED
2700  0100     MOVLB 0x0
2702  516E     MOVF time, W, BANKED
2704  EC56     CALL 0x30AC, 0
2706  F018     NOP
224:               set_board_location(3, 3);
2708  0100     MOVLB 0x0
270A  6F6D     MOVWF tstring, BANKED
270C  0E03     MOVLW 0x3
270E  0100     MOVLB 0x0
2710  0100     MOVLB 0x0
2712  6F69     MOVWF row, BANKED
2714  0100     MOVLB 0x0
2716  516D     MOVF tstring, W, BANKED
2718  0100     MOVLB 0x0
271A  6F6E     MOVWF time, BANKED
271C  0E03     MOVLW 0x3
271E  0100     MOVLB 0x0
2720  0100     MOVLB 0x0
2722  6F6A     MOVWF col, BANKED
2724  0100     MOVLB 0x0
2726  516E     MOVF time, W, BANKED
2728  EC56     CALL 0x30AC, 0
272A  F018     NOP
225:               set_board_location(4, 4);
272C  0100     MOVLB 0x0
272E  6F6D     MOVWF tstring, BANKED
2730  0E04     MOVLW 0x4
2732  0100     MOVLB 0x0
2734  0100     MOVLB 0x0
2736  6F69     MOVWF row, BANKED
2738  0100     MOVLB 0x0
273A  516D     MOVF tstring, W, BANKED
273C  0100     MOVLB 0x0
273E  6F6E     MOVWF time, BANKED
2740  0E04     MOVLW 0x4
2742  0100     MOVLB 0x0
2744  0100     MOVLB 0x0
2746  6F6A     MOVWF col, BANKED
2748  0100     MOVLB 0x0
274A  516E     MOVF time, W, BANKED
274C  EC56     CALL 0x30AC, 0
274E  F018     NOP
226:           }
2750  0012     RETURN 0
227:           
228:           /* blinker */
229:           void blinker(){
230:               set_board_location(6, 2);
3222  0100     MOVLB 0x0
3224  6F6D     MOVWF tstring, BANKED
3226  0E06     MOVLW 0x6
3228  0100     MOVLB 0x0
322A  0100     MOVLB 0x0
322C  6F69     MOVWF row, BANKED
322E  0100     MOVLB 0x0
3230  516D     MOVF tstring, W, BANKED
3232  0100     MOVLB 0x0
3234  6F6E     MOVWF time, BANKED
3236  0E02     MOVLW 0x2
3238  0100     MOVLB 0x0
323A  0100     MOVLB 0x0
323C  6F6A     MOVWF col, BANKED
323E  0100     MOVLB 0x0
3240  516E     MOVF time, W, BANKED
3242  EC56     CALL 0x30AC, 0
3244  F018     NOP
231:               set_board_location(6, 3);
3246  0100     MOVLB 0x0
3248  6F6D     MOVWF tstring, BANKED
324A  0E06     MOVLW 0x6
324C  0100     MOVLB 0x0
324E  0100     MOVLB 0x0
3250  6F69     MOVWF row, BANKED
3252  0100     MOVLB 0x0
3254  516D     MOVF tstring, W, BANKED
3256  0100     MOVLB 0x0
3258  6F6E     MOVWF time, BANKED
325A  0E03     MOVLW 0x3
325C  0100     MOVLB 0x0
325E  0100     MOVLB 0x0
3260  6F6A     MOVWF col, BANKED
3262  0100     MOVLB 0x0
3264  516E     MOVF time, W, BANKED
3266  EC56     CALL 0x30AC, 0
3268  F018     NOP
232:               set_board_location(6, 4);
326A  0100     MOVLB 0x0
326C  6F6D     MOVWF tstring, BANKED
326E  0E06     MOVLW 0x6
3270  0100     MOVLB 0x0
3272  0100     MOVLB 0x0
3274  6F69     MOVWF row, BANKED
3276  0100     MOVLB 0x0
3278  516D     MOVF tstring, W, BANKED
327A  0100     MOVLB 0x0
327C  6F6E     MOVWF time, BANKED
327E  0E04     MOVLW 0x4
3280  0100     MOVLB 0x0
3282  0100     MOVLB 0x0
3284  6F6A     MOVWF col, BANKED
3286  0100     MOVLB 0x0
3288  516E     MOVF time, W, BANKED
328A  EC56     CALL 0x30AC, 0
328C  F018     NOP
233:           }
328E  0012     RETURN 0
234:           
235:           /* glider */
236:           void glider(){
237:               set_board_location(6, 2);
2B40  0100     MOVLB 0x0
2B42  6F6D     MOVWF tstring, BANKED
2B44  0E06     MOVLW 0x6
2B46  0100     MOVLB 0x0
2B48  0100     MOVLB 0x0
2B4A  6F69     MOVWF row, BANKED
2B4C  0100     MOVLB 0x0
2B4E  516D     MOVF tstring, W, BANKED
2B50  0100     MOVLB 0x0
2B52  6F6E     MOVWF time, BANKED
2B54  0E02     MOVLW 0x2
2B56  0100     MOVLB 0x0
2B58  0100     MOVLB 0x0
2B5A  6F6A     MOVWF col, BANKED
2B5C  0100     MOVLB 0x0
2B5E  516E     MOVF time, W, BANKED
2B60  EC56     CALL 0x30AC, 0
2B62  F018     NOP
238:               set_board_location(6, 3);
2B64  0100     MOVLB 0x0
2B66  6F6D     MOVWF tstring, BANKED
2B68  0E06     MOVLW 0x6
2B6A  0100     MOVLB 0x0
2B6C  0100     MOVLB 0x0
2B6E  6F69     MOVWF row, BANKED
2B70  0100     MOVLB 0x0
2B72  516D     MOVF tstring, W, BANKED
2B74  0100     MOVLB 0x0
2B76  6F6E     MOVWF time, BANKED
2B78  0E03     MOVLW 0x3
2B7A  0100     MOVLB 0x0
2B7C  0100     MOVLB 0x0
2B7E  6F6A     MOVWF col, BANKED
2B80  0100     MOVLB 0x0
2B82  516E     MOVF time, W, BANKED
2B84  EC56     CALL 0x30AC, 0
2B86  F018     NOP
239:               set_board_location(6, 4);
2B88  0100     MOVLB 0x0
2B8A  6F6D     MOVWF tstring, BANKED
2B8C  0E06     MOVLW 0x6
2B8E  0100     MOVLB 0x0
2B90  0100     MOVLB 0x0
2B92  6F69     MOVWF row, BANKED
2B94  0100     MOVLB 0x0
2B96  516D     MOVF tstring, W, BANKED
2B98  0100     MOVLB 0x0
2B9A  6F6E     MOVWF time, BANKED
2B9C  0E04     MOVLW 0x4
2B9E  0100     MOVLB 0x0
2BA0  0100     MOVLB 0x0
2BA2  6F6A     MOVWF col, BANKED
2BA4  0100     MOVLB 0x0
2BA6  516E     MOVF time, W, BANKED
2BA8  EC56     CALL 0x30AC, 0
2BAA  F018     NOP
240:               set_board_location(5, 4);
2BAC  0100     MOVLB 0x0
2BAE  6F6D     MOVWF tstring, BANKED
2BB0  0E05     MOVLW 0x5
2BB2  0100     MOVLB 0x0
2BB4  0100     MOVLB 0x0
2BB6  6F69     MOVWF row, BANKED
2BB8  0100     MOVLB 0x0
2BBA  516D     MOVF tstring, W, BANKED
2BBC  0100     MOVLB 0x0
2BBE  6F6E     MOVWF time, BANKED
2BC0  0E04     MOVLW 0x4
2BC2  0100     MOVLB 0x0
2BC4  0100     MOVLB 0x0
2BC6  6F6A     MOVWF col, BANKED
2BC8  0100     MOVLB 0x0
2BCA  516E     MOVF time, W, BANKED
2BCC  EC56     CALL 0x30AC, 0
2BCE  F018     NOP
241:               set_board_location(4, 3);
2BD0  0100     MOVLB 0x0
2BD2  6F6D     MOVWF tstring, BANKED
2BD4  0E04     MOVLW 0x4
2BD6  0100     MOVLB 0x0
2BD8  0100     MOVLB 0x0
2BDA  6F69     MOVWF row, BANKED
2BDC  0100     MOVLB 0x0
2BDE  516D     MOVF tstring, W, BANKED
2BE0  0100     MOVLB 0x0
2BE2  6F6E     MOVWF time, BANKED
2BE4  0E03     MOVLW 0x3
2BE6  0100     MOVLB 0x0
2BE8  0100     MOVLB 0x0
2BEA  6F6A     MOVWF col, BANKED
2BEC  0100     MOVLB 0x0
2BEE  516E     MOVF time, W, BANKED
2BF0  EC56     CALL 0x30AC, 0
2BF2  F018     NOP
242:           }
2BF4  0012     RETURN 0
243:           
244:           void random_board(){
245:               for (uint8_t row = 0; row < NUM_DISPLAY_ROWS; row++) {
3028  0100     MOVLB 0x0
302A  6F6E     MOVWF time, BANKED
302C  0E00     MOVLW 0x0
302E  0100     MOVLB 0x0
3030  0100     MOVLB 0x0
3032  6F70     MOVWF divisor, BANKED
3034  0100     MOVLB 0x0
3036  516E     MOVF time, W, BANKED
3038  0E07     MOVLW 0x7
303A  0100     MOVLB 0x0
303C  0100     MOVLB 0x0
303E  6570     CPFSGT divisor, BANKED
3040  D001     BRA 0x3044
3042  0012     RETURN 0
309A  0100     MOVLB 0x0
309C  0100     MOVLB 0x0
309E  2B70     INCF divisor, F, BANKED
30A0  0E07     MOVLW 0x7
30A2  0100     MOVLB 0x0
30A4  0100     MOVLB 0x0
30A6  6570     CPFSGT divisor, BANKED
30A8  D7CD     BRA 0x3044
30AA  0012     RETURN 0
246:                   for (uint8_t col = 0; col < NUM_DISPLAY_COLUMNS; col++) {
3044  0100     MOVLB 0x0
3046  6F6E     MOVWF time, BANKED
3048  0E00     MOVLW 0x0
304A  0100     MOVLB 0x0
304C  0100     MOVLB 0x0
304E  6F71     MOVWF col, BANKED
3050  0100     MOVLB 0x0
3052  516E     MOVF time, W, BANKED
3054  D01D     BRA 0x3090
308A  0100     MOVLB 0x0
308C  0100     MOVLB 0x0
308E  2B71     INCF col, F, BANKED
3090  0E0E     MOVLW 0xE
3092  0100     MOVLB 0x0
3094  0100     MOVLB 0x0
3096  6571     CPFSGT col, BANKED
3098  D7DE     BRA 0x3056
247:                       if ((TMR0 + TMR3) % 2) {
3056  CFD6     MOVFF TMR0L, time
3058  F06E     NOP
305A  CFD7     MOVFF TMR0H, 0x6F
305C  F06F     NOP
305E  50B2     MOVF TMR3L, W, ACCESS
3060  0100     MOVLB 0x0
3062  276E     ADDWF time, F, BANKED
3064  50B3     MOVF TMR3H, W, ACCESS
3066  0100     MOVLB 0x0
3068  236F     ADDWFC 0x6F, F, BANKED
306A  0100     MOVLB 0x0
306C  A16E     BTFSS time, 0, BANKED
306E  D007     BRA 0x307E
248:                           set_board_location(row, col);
3070  C070     MOVFF divisor, row
3072  F069     NOP
3074  C071     MOVFF col, col
3076  F06A     NOP
3078  EC56     CALL 0x30AC, 0
307A  F018     NOP
249:                       } else {
307C  D006     BRA 0x308A
250:                           clear_board_location(row, col);
307E  C070     MOVFF divisor, row
3080  F069     NOP
3082  C071     MOVFF col, col
3084  F06A     NOP
3086  EC42     CALL 0x2E84, 0
3088  F017     NOP
251:                       }
252:                   }
253:               }
254:           }
255:           
256:           void copy_buffer(){
257:               for (uint8_t row = 0; row < NUM_DISPLAY_ROWS; row++) {
258:                   for (uint8_t col = 0; col < NUM_DISPLAY_COLUMNS; col++) {
259:                       if (get_board_value(row, col)) {
260:                           set_board_location(row, col);
261:                       } else {
262:                           clear_board_location(row, col);
263:                       }
264:                   }
265:               }
266:           }
267:           
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/display.c  -----------------------------
1:             /* ***************************************************************************
2:              **    display.c
3:              **
4:              **  Project      : ClockMatrix_v0
5:              **  Target       : PIC18F14K50
6:              **  Description  : Project used to develop clock firmware.  Tested methods and
7:              **                 determined functionality (needed, wanted, and the possible)
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : 5/8/2013
12:             **  Branched     : 6/27/2013 -- started v2
13:             **
14:             **  R Hanlen <implod@gmail.com>
15:             ** ***************************************************************************/
16:            
17:            /*****************************************************************************
18:             ** Files to Include
19:             *****************************************************************************/
20:            
21:            //  Global Includes
22:            #include <htc.h>
23:            #include <stdint.h>
24:            #include <string.h>
25:            
26:            //  Local Includes
27:            #include "global.h"
28:            #include "delay.h"
29:            #include "fonts.h"
30:            #include "display.h"
31:            
32:            /*****************************************************************************
33:             ** Variables
34:             *****************************************************************************/
35:            extern volatile bit scrollInt_flag;
36:            extern volatile uint8_t newFrame;
37:            
38:            /*****************************************************************************
39:             **Functions
40:             *****************************************************************************/
41:            
42:            void DisplayInit(void){
43:            
44:                CLK_LOW();
37A2  968B     BCF LATC, 3, ACCESS
45:                DATA_LOW();
37A4  988B     BCF LATC, 4, ACCESS
46:                LATCH_LOW();
37A6  9A8B     BCF LATC, 5, ACCESS
47:            
48:                CLK_TRIS = OUTPUT;
37A8  9694     BCF TRISC, 3, ACCESS
49:                DATA_TRIS = OUTPUT;
37AA  9894     BCF TRISC, 4, ACCESS
50:                LATCH_TRIS = OUTPUT;
37AC  9A94     BCF TRISC, 5, ACCESS
51:            
52:                ClearDisplay();
37AE  ECB1     CALL 0x3562, 0
37B0  F01A     NOP
53:                display.activeRow = 0;
37B2  0100     MOVLB 0x0
37B4  6F62     MOVWF c, BANKED
37B6  0E00     MOVLW 0x0
37B8  0100     MOVLB 0x0
37BA  0100     MOVLB 0x0
37BC  6FB2     MOVWF 0xB2, BANKED
37BE  0100     MOVLB 0x0
37C0  5162     MOVF c, W, BANKED
54:                scrollDelay = 100;
37C2  0100     MOVLB 0x0
37C4  6F62     MOVWF c, BANKED
37C6  0E64     MOVLW 0x64
37C8  0100     MOVLB 0x0
37CA  0100     MOVLB 0x0
37CC  6FA2     MOVWF scrollDelay, BANKED
37CE  0100     MOVLB 0x0
37D0  5162     MOVF c, W, BANKED
55:            }/***DISPLAYiNIT****/
37D2  0012     RETURN 0
56:            
57:            void ShiftOutNextRow(void){
58:            
59:                CollumnData();
388A  ECD5     CALL 0x31AA, 0
388C  F018     NOP
60:                RowData();
388E  ECFA     CALL 0x35F4, 0
3890  F01A     NOP
61:                //PulseOut(1 << db.activeRow);
62:                LATCH_HIGH();
3892  8A8B     BSF LATC, 5, ACCESS
63:                DelayUs(1);
3894  0E00     MOVLW 0x0
3896  6E13     MOVWF 0x13, ACCESS
3898  0E01     MOVLW 0x1
389A  6E12     MOVWF DelayUs, ACCESS
389C  EC6A     CALL 0x38D4, 0
389E  F01C     NOP
64:                LATCH_LOW();
38A0  9A8B     BCF LATC, 5, ACCESS
65:            }/****NEXTrOW****/
38A2  0012     RETURN 0
66:            
67:            void CollumnData(void){
68:            
69:                for (uint8_t x = 0; x < 15; ++x) {
31AA  6E14     MOVWF 0x14, ACCESS
31AC  0E00     MOVLW 0x0
31AE  6E19     MOVWF x, ACCESS
31B0  5014     MOVF 0x14, W, ACCESS
31B2  0E0E     MOVLW 0xE
31B4  6419     CPFSGT x, ACCESS
31B6  D001     BRA 0x31BA
31B8  0012     RETURN 0
3218  2A19     INCF x, F, ACCESS
70:                    if (display.cols[14 - x] & (0x01 << display.activeRow)) {
31BA  5019     MOVF x, W, ACCESS
31BC  6E14     MOVWF 0x14, ACCESS
31BE  6A15     CLRF 0x15, ACCESS
31C0  1E14     COMF 0x14, F, ACCESS
31C2  1E15     COMF 0x15, F, ACCESS
31C4  4A14     INFSNZ 0x14, F, ACCESS
31C6  2A15     INCF 0x15, F, ACCESS
31C8  0E0E     MOVLW 0xE
31CA  2614     ADDWF 0x14, F, ACCESS
31CC  0E00     MOVLW 0x0
31CE  2215     ADDWFC 0x15, F, ACCESS
31D0  0100     MOVLB 0x0
31D2  0EA3     MOVLW 0xA3
31D4  2414     ADDWF 0x14, W, ACCESS
31D6  6ED9     MOVWF FSR2L, ACCESS
31D8  0100     MOVLB 0x0
31DA  0E00     MOVLW 0x0
31DC  2015     ADDWFC 0x15, W, ACCESS
31DE  6EDA     MOVWF FSR2H, ACCESS
31E0  50DF     MOVF INDF2, W, ACCESS
31E2  6E16     MOVWF y, ACCESS
31E4  C0B2     MOVFF 0xB2, 0x17
31E6  F017     NOP
31E8  0E01     MOVLW 0x1
31EA  6E18     MOVWF 0x18, ACCESS
31EC  2A17     INCF 0x17, F, ACCESS
31EE  D002     BRA 0x31F4
31F0  90D8     BCF STATUS, 0, ACCESS
31F2  3618     RLCF 0x18, F, ACCESS
31F4  2E17     DECFSZ 0x17, F, ACCESS
31F6  D7FC     BRA 0x31F0
31F8  5018     MOVF 0x18, W, ACCESS
31FA  1416     ANDWF y, W, ACCESS
31FC  0900     IORLW 0x0
31FE  B4D8     BTFSC STATUS, 2, ACCESS
3200  D002     BRA 0x3206
71:                        DATA_HIGH();
3202  888B     BSF LATC, 4, ACCESS
72:                    } else {
3204  D001     BRA 0x3208
73:                        DATA_LOW();
3206  988B     BCF LATC, 4, ACCESS
74:                    }
75:                    CLK_HIGH();
3208  868B     BSF LATC, 3, ACCESS
76:                    DelayUs(1);
320A  0E00     MOVLW 0x0
320C  6E13     MOVWF 0x13, ACCESS
320E  0E01     MOVLW 0x1
3210  6E12     MOVWF DelayUs, ACCESS
3212  EC6A     CALL 0x38D4, 0
3214  F01C     NOP
77:                    CLK_LOW();
3216  968B     BCF LATC, 3, ACCESS
78:                }
79:            }/***COLLUMNdATA***/
80:            
81:            void RowData(void){
82:                for (uint8_t y = 8; y > 0; --y) {
35F4  6E14     MOVWF 0x14, ACCESS
35F6  0E08     MOVLW 0x8
35F8  6E16     MOVWF y, ACCESS
35FA  5014     MOVF 0x14, W, ACCESS
35FC  6616     TSTFSZ y, ACCESS
35FE  D001     BRA 0x3602
3600  0012     RETURN 0
3632  0616     DECF y, F, ACCESS
83:                    if (display.activeRow == (y - 1)) {
3602  0EFF     MOVLW 0xFF
3604  2416     ADDWF y, W, ACCESS
3606  6E14     MOVWF 0x14, ACCESS
3608  6A15     CLRF 0x15, ACCESS
360A  0EFF     MOVLW 0xFF
360C  2215     ADDWFC 0x15, F, ACCESS
360E  0100     MOVLB 0x0
3610  0100     MOVLB 0x0
3612  51B2     MOVF 0xB2, W, BANKED
3614  1814     XORWF 0x14, W, ACCESS
3616  1015     IORWF 0x15, W, ACCESS
3618  A4D8     BTFSS STATUS, 2, ACCESS
361A  D002     BRA 0x3620
84:                        DATA_HIGH();
361C  888B     BSF LATC, 4, ACCESS
85:                    } else {
361E  D001     BRA 0x3622
86:                        DATA_LOW();
3620  988B     BCF LATC, 4, ACCESS
87:                    }
88:                    CLK_HIGH();
3622  868B     BSF LATC, 3, ACCESS
89:                    DelayUs(1);
3624  0E00     MOVLW 0x0
3626  6E13     MOVWF 0x13, ACCESS
3628  0E01     MOVLW 0x1
362A  6E12     MOVWF DelayUs, ACCESS
362C  EC6A     CALL 0x38D4, 0
362E  F01C     NOP
90:                    CLK_LOW();
3630  968B     BCF LATC, 3, ACCESS
91:                }
92:            }/***ROWdATA***/
93:            
94:            //void PulseOut(uint8_t value){
95:            //
96:            //    uint8_t bitCheck;
97:            //    for (uint8_t i = 0; i < 8; i++) {
98:            //        bitCheck = value & 0b10000000;
99:            //        value = value << 1;
100:           //        if (bitCheck == 128) {
101:           //            DATA_HIGH();
102:           //        } else {
103:           //            DATA_LOW();
104:           //        }
105:           //        CLK_HIGH();
106:           //        DelayUs(1);
107:           //        CLK_LOW();
108:           //    }
109:           //
110:           //}/****PULSEoUT****/
111:           
112:           void ClearDisplay(void){
113:           
114:               // Initialise the display state
115:               for (uint8_t i = 0; i < 15; i++) {
3562  0100     MOVLB 0x0
3564  6F60     MOVWF __pcstackBANK0, BANKED
3566  0E00     MOVLW 0x0
3568  0100     MOVLB 0x0
356A  0100     MOVLB 0x0
356C  6F61     MOVWF col, BANKED
356E  0100     MOVLB 0x0
3570  5160     MOVF __pcstackBANK0, W, BANKED
3572  0E0E     MOVLW 0xE
3574  0100     MOVLB 0x0
3576  0100     MOVLB 0x0
3578  6561     CPFSGT col, BANKED
357A  D001     BRA 0x357E
357C  0012     RETURN 0
359A  0100     MOVLB 0x0
116:                   display.cols[i] = 0x00;
357E  0100     MOVLB 0x0
3580  0100     MOVLB 0x0
3582  5161     MOVF col, W, BANKED
3584  0D01     MULLW 0x1
3586  0100     MOVLB 0x0
3588  0EA3     MOVLW 0xA3
358A  24F3     ADDWF PRODL, W, ACCESS
358C  6ED9     MOVWF FSR2L, ACCESS
358E  0100     MOVLB 0x0
3590  0E00     MOVLW 0x0
3592  20F4     ADDWFC PRODH, W, ACCESS
3594  6EDA     MOVWF FSR2H, ACCESS
3596  0E00     MOVLW 0x0
3598  6EDF     MOVWF INDF2, ACCESS
117:               }
118:           }/****CLEARdISPLAY****/
119:           
120:           void DisplayPlot(uint8_t x, uint8_t y, uint8_t state){
121:               // Check for out of bounds
122:               if (x > 14 || y > 7) {
2D52  0E0F     MOVLW 0xF
2D54  0100     MOVLB 0x0
2D56  0100     MOVLB 0x0
2D58  6160     CPFSLT __pcstackBANK0, BANKED
2D5A  0012     RETURN 0
2D5C  0E07     MOVLW 0x7
2D5E  0100     MOVLB 0x0
2D60  0100     MOVLB 0x0
2D62  6561     CPFSGT col, BANKED
2D64  D001     BRA 0x2D68
2D66  0012     RETURN 0
123:                   return;
124:               }
125:           
126:               if (state == ON) display.cols[x] |= (1 << y);
2D68  0100     MOVLB 0x0
2D6A  0100     MOVLB 0x0
2D6C  0562     DECF c, W, BANKED
2D6E  A4D8     BTFSS STATUS, 2, ACCESS
2D70  D01E     BRA 0x2DAE
2D72  C061     MOVFF col, string_index
2D74  F063     NOP
2D76  0E01     MOVLW 0x1
2D78  0100     MOVLB 0x0
2D7A  6F64     MOVWF n, BANKED
2D7C  0100     MOVLB 0x0
2D7E  2B63     INCF string_index, F, BANKED
2D80  D003     BRA 0x2D88
2D82  0100     MOVLB 0x0
2D84  90D8     BCF STATUS, 0, ACCESS
2D86  3764     RLCF n, F, BANKED
2D88  0100     MOVLB 0x0
2D8A  2F63     DECFSZ string_index, F, BANKED
2D8C  D7FA     BRA 0x2D82
2D8E  0100     MOVLB 0x0
2D90  0100     MOVLB 0x0
2D92  5160     MOVF __pcstackBANK0, W, BANKED
2D94  0D01     MULLW 0x1
2D96  0100     MOVLB 0x0
2D98  0EA3     MOVLW 0xA3
2D9A  24F3     ADDWF PRODL, W, ACCESS
2D9C  6ED9     MOVWF FSR2L, ACCESS
2D9E  0100     MOVLB 0x0
2DA0  0E00     MOVLW 0x0
2DA2  20F4     ADDWFC PRODH, W, ACCESS
2DA4  6EDA     MOVWF FSR2H, ACCESS
2DA6  0100     MOVLB 0x0
2DA8  5164     MOVF n, W, BANKED
2DAA  12DF     IORWF INDF2, F, ACCESS
2DAC  0012     RETURN 0
127:               else display.cols[x] &= ~(1 << y);
2DAE  C061     MOVFF col, string_index
128:           }/***DISPLAYpLOT***/
129:           
130:           void DisplayString(void){
131:               int currentChar = 0;
1556  0E00     MOVLW 0x0
1558  0100     MOVLB 0x0
155A  0100     MOVLB 0x0
155C  6F68     MOVWF divisor, BANKED
155E  0E00     MOVLW 0x0
1560  0100     MOVLB 0x0
1562  6F67     MOVWF quotient, BANKED
132:               uint8_t string_index = 0;
1564  0100     MOVLB 0x0
1566  6F60     MOVWF __pcstackBANK0, BANKED
1568  0E00     MOVLW 0x0
156A  0100     MOVLB 0x0
156C  0100     MOVLB 0x0
156E  6F63     MOVWF string_index, BANKED
1570  0100     MOVLB 0x0
1572  5160     MOVF __pcstackBANK0, W, BANKED
133:               uint16_t char_index = 0;
1574  0E00     MOVLW 0x0
1576  0100     MOVLB 0x0
1578  0100     MOVLB 0x0
157A  6F66     MOVWF dividend, BANKED
157C  0E00     MOVLW 0x0
157E  0100     MOVLB 0x0
1580  6F65     MOVWF counter, BANKED
134:               uint8_t char_width = 0;
1582  0100     MOVLB 0x0
1584  6F60     MOVWF __pcstackBANK0, BANKED
1586  0E00     MOVLW 0x0
1588  0100     MOVLB 0x0
158A  0100     MOVLB 0x0
158C  6F64     MOVWF n, BANKED
158E  0100     MOVLB 0x0
1590  5160     MOVF __pcstackBANK0, W, BANKED
135:               uint8_t x = 0;
1592  0100     MOVLB 0x0
1594  6F60     MOVWF __pcstackBANK0, BANKED
1596  0E00     MOVLW 0x0
1598  0100     MOVLB 0x0
159A  0100     MOVLB 0x0
159C  6F69     MOVWF row, BANKED
159E  0100     MOVLB 0x0
15A0  5160     MOVF __pcstackBANK0, W, BANKED
136:           
137:               // Plot a display full of text
138:               for (x = 0; x < 15; x++) {
15A2  0100     MOVLB 0x0
15A4  6F60     MOVWF __pcstackBANK0, BANKED
15A6  0E00     MOVLW 0x0
15A8  0100     MOVLB 0x0
15AA  0100     MOVLB 0x0
15AC  6F69     MOVWF row, BANKED
15AE  0100     MOVLB 0x0
15B0  5160     MOVF __pcstackBANK0, W, BANKED
15B2  0E0E     MOVLW 0xE
15B4  0100     MOVLB 0x0
15B6  0100     MOVLB 0x0
15B8  6569     CPFSGT row, BANKED
15BA  D001     BRA 0x15BE
15BC  0012     RETURN 0
16F0  0100     MOVLB 0x0
139:                   if (char_width == 0) {
15BE  0100     MOVLB 0x0
15C0  0100     MOVLB 0x0
15C2  6764     TSTFSZ n, BANKED
15C4  D063     BRA 0x168C
140:                       currentChar = displayString[string_index++];
15C6  0100     MOVLB 0x0
15C8  0100     MOVLB 0x0
15CA  5163     MOVF string_index, W, BANKED
15CC  0D01     MULLW 0x1
15CE  0101     MOVLB 0x1
15D0  0E00     MOVLW 0x0
15D2  24F3     ADDWF PRODL, W, ACCESS
15D4  6ED9     MOVWF FSR2L, ACCESS
15D6  0101     MOVLB 0x1
15D8  0E01     MOVLW 0x1
15DA  20F4     ADDWFC PRODH, W, ACCESS
15DC  6EDA     MOVWF FSR2H, ACCESS
15DE  50DF     MOVF INDF2, W, ACCESS
15E0  0100     MOVLB 0x0
15E2  6F60     MOVWF __pcstackBANK0, BANKED
15E4  0100     MOVLB 0x0
15E6  5160     MOVF __pcstackBANK0, W, BANKED
15E8  0100     MOVLB 0x0
15EA  0100     MOVLB 0x0
15EC  6F67     MOVWF quotient, BANKED
15EE  0100     MOVLB 0x0
15F0  6B68     CLRF divisor, BANKED
15F2  0100     MOVLB 0x0
15F4  0100     MOVLB 0x0
15F6  2B63     INCF string_index, F, BANKED
141:                       if (currentChar == '\0') {
15F8  0100     MOVLB 0x0
15FA  0100     MOVLB 0x0
15FC  5168     MOVF divisor, W, BANKED
15FE  1167     IORWF quotient, W, BANKED
1600  A4D8     BTFSS STATUS, 2, ACCESS
1602  D010     BRA 0x1624
142:                           char_width = 14;
1604  0100     MOVLB 0x0
1606  6F60     MOVWF __pcstackBANK0, BANKED
1608  0E0E     MOVLW 0xE
160A  0100     MOVLB 0x0
160C  0100     MOVLB 0x0
160E  6F64     MOVWF n, BANKED
1610  0100     MOVLB 0x0
1612  5160     MOVF __pcstackBANK0, W, BANKED
143:                           char_index = 0;
1614  0E00     MOVLW 0x0
1616  0100     MOVLB 0x0
1618  0100     MOVLB 0x0
161A  6F66     MOVWF dividend, BANKED
161C  0E00     MOVLW 0x0
161E  0100     MOVLB 0x0
1620  6F65     MOVWF counter, BANKED
144:                       } else {
1622  D034     BRA 0x168C
145:                           char_index = (currentChar - 32)*4;
1624  0100     MOVLB 0x0
1626  C067     MOVFF quotient, __pcstackBANK0
1628  F060     NOP
162A  0100     MOVLB 0x0
162C  C068     MOVFF divisor, col
162E  F061     NOP
1630  0100     MOVLB 0x0
1632  90D8     BCF STATUS, 0, ACCESS
1634  3760     RLCF __pcstackBANK0, F, BANKED
1636  3761     RLCF col, F, BANKED
1638  0100     MOVLB 0x0
163A  90D8     BCF STATUS, 0, ACCESS
163C  3760     RLCF __pcstackBANK0, F, BANKED
163E  3761     RLCF col, F, BANKED
1640  0E80     MOVLW 0x80
1642  0100     MOVLB 0x0
1644  2560     ADDWF __pcstackBANK0, W, BANKED
1646  0100     MOVLB 0x0
1648  0100     MOVLB 0x0
164A  6F65     MOVWF counter, BANKED
164C  0EFF     MOVLW 0xFF
164E  0100     MOVLB 0x0
1650  2161     ADDWFC col, W, BANKED
1652  0100     MOVLB 0x0
1654  6F66     MOVWF dividend, BANKED
146:                           char_width = font3_1[ char_index + 3] + 1; // Include 1 empty column between chars.
1656  0E03     MOVLW 0x3
1658  0100     MOVLB 0x0
165A  0100     MOVLB 0x0
165C  2565     ADDWF counter, W, BANKED
165E  0100     MOVLB 0x0
1660  6F60     MOVWF __pcstackBANK0, BANKED
1662  0E00     MOVLW 0x0
1664  0100     MOVLB 0x0
1666  0100     MOVLB 0x0
1668  2166     ADDWFC dividend, W, BANKED
166A  0100     MOVLB 0x0
166C  6F61     MOVWF col, BANKED
166E  0EEC     MOVLW 0xEC
1670  0100     MOVLB 0x0
1672  2560     ADDWF __pcstackBANK0, W, BANKED
1674  6EF6     MOVWF TBLPTRL, ACCESS
1676  0E3D     MOVLW 0x3D
1678  2161     ADDWFC col, W, BANKED
167A  6EF7     MOVWF TBLPTRH, ACCESS
167C  0008     TBLRD*
167E  CFF5     MOVFF TABLAT, c
1680  F062     NOP
1682  0100     MOVLB 0x0
1684  2962     INCF c, W, BANKED
1686  0100     MOVLB 0x0
1688  0100     MOVLB 0x0
168A  6F64     MOVWF n, BANKED
147:                       }
148:                   }
149:                   display.cols[x] = font3_1[ char_index ];
168C  0EEC     MOVLW 0xEC
168E  0100     MOVLB 0x0
1690  0100     MOVLB 0x0
1692  2565     ADDWF counter, W, BANKED
1694  6EF6     MOVWF TBLPTRL, ACCESS
1696  0E3D     MOVLW 0x3D
1698  0100     MOVLB 0x0
169A  2166     ADDWFC dividend, W, BANKED
169C  6EF7     MOVWF TBLPTRH, ACCESS
169E  0100     MOVLB 0x0
16A0  0100     MOVLB 0x0
16A2  5169     MOVF row, W, BANKED
16A4  0D01     MULLW 0x1
16A6  0100     MOVLB 0x0
16A8  0EA3     MOVLW 0xA3
16AA  24F3     ADDWF PRODL, W, ACCESS
16AC  6ED9     MOVWF FSR2L, ACCESS
16AE  0100     MOVLB 0x0
16B0  0E00     MOVLW 0x0
16B2  20F4     ADDWFC PRODH, W, ACCESS
16B4  6EDA     MOVWF FSR2H, ACCESS
16B6  0008     TBLRD*
16B8  CFF5     MOVFF TABLAT, INDF2
16BA  FFDF     NOP
150:           
151:                   if (currentChar != '\0') {
16BC  0100     MOVLB 0x0
16BE  0100     MOVLB 0x0
16C0  5168     MOVF divisor, W, BANKED
16C2  1167     IORWF quotient, W, BANKED
16C4  B4D8     BTFSC STATUS, 2, ACCESS
16C6  D011     BRA 0x16EA
152:                       if (char_width > 2) {
16C8  0E02     MOVLW 0x2
16CA  0100     MOVLB 0x0
16CC  0100     MOVLB 0x0
16CE  6564     CPFSGT n, BANKED
16D0  D005     BRA 0x16DC
153:                           ++char_index;
16D2  0100     MOVLB 0x0
16D4  0100     MOVLB 0x0
16D6  4B65     INFSNZ counter, F, BANKED
16D8  2B66     INCF dividend, F, BANKED
154:                       } else {
16DA  D007     BRA 0x16EA
155:                           char_index = 0; // Empty column.
16DC  0E00     MOVLW 0x0
16DE  0100     MOVLB 0x0
16E0  0100     MOVLB 0x0
16E2  6F66     MOVWF dividend, BANKED
16E4  0E00     MOVLW 0x0
16E6  0100     MOVLB 0x0
16E8  6F65     MOVWF counter, BANKED
156:                       }
157:                   }
158:                   --char_width;
16EA  0100     MOVLB 0x0
16EC  0100     MOVLB 0x0
16EE  0764     DECF n, F, BANKED
159:               }/*x loop*/
160:           }/***DISPLAYsTRING***/
161:           
162:           void DisplayScrollText(void){
163:               int currentChar = 0;
0FCA  0E00     MOVLW 0x0
0FCC  0100     MOVLB 0x0
0FCE  0100     MOVLB 0x0
0FD0  6F7B     MOVWF cell_is_alive, BANKED
0FD2  0E00     MOVLW 0x0
0FD4  0100     MOVLB 0x0
0FD6  6F7A     MOVWF result, BANKED
164:               uint8_t string_index = 0;
0FD8  0100     MOVLB 0x0
0FDA  6F72     MOVWF num_ptr, BANKED
0FDC  0E00     MOVLW 0x0
0FDE  0100     MOVLB 0x0
0FE0  0100     MOVLB 0x0
0FE2  6F76     MOVWF cc, BANKED
0FE4  0100     MOVLB 0x0
0FE6  5172     MOVF num_ptr, W, BANKED
165:               uint16_t char_index = 0;
0FE8  0E00     MOVLW 0x0
0FEA  0100     MOVLB 0x0
0FEC  0100     MOVLB 0x0
0FEE  6F79     MOVWF currentNumber, BANKED
0FF0  0E00     MOVLW 0x0
0FF2  0100     MOVLB 0x0
0FF4  6F78     MOVWF done, BANKED
166:               uint8_t char_width = 0;
0FF6  0100     MOVLB 0x0
0FF8  6F72     MOVWF num_ptr, BANKED
0FFA  0E00     MOVLW 0x0
0FFC  0100     MOVLB 0x0
0FFE  0100     MOVLB 0x0
1000  6F77     MOVWF r, BANKED
1002  0100     MOVLB 0x0
1004  5172     MOVF num_ptr, W, BANKED
167:               uint8_t length;
168:           
169:               scrollInt_flag = 0;
1006  0100     MOVLB 0x0
1008  9047     BCF scrollInt_flag, 0, ACCESS
170:               length = (strlen(displayString));
100A  0101     MOVLB 0x1
100C  0E01     MOVLW 0x1
100E  0100     MOVLB 0x0
1010  0100     MOVLB 0x0
1012  6F61     MOVWF col, BANKED
1014  0101     MOVLB 0x1
1016  0E00     MOVLW 0x0
1018  0100     MOVLB 0x0
101A  6F60     MOVWF __pcstackBANK0, BANKED
101C  EC0F     CALL 0x341E, 0
101E  F01A     NOP
1020  0100     MOVLB 0x0
1022  0100     MOVLB 0x0
1024  5160     MOVF __pcstackBANK0, W, BANKED
1026  0100     MOVLB 0x0
1028  0100     MOVLB 0x0
102A  6F75     MOVWF max, BANKED
171:           
172:               while(string_index < length) {
102C  D0CE     BRA 0x11CA
11CA  0100     MOVLB 0x0
11CC  0100     MOVLB 0x0
11CE  5175     MOVF max, W, BANKED
11D0  0100     MOVLB 0x0
11D2  0100     MOVLB 0x0
11D4  5D76     SUBWF cc, W, BANKED
11D6  B0D8     BTFSC STATUS, 0, ACCESS
11DA  D729     BRA 0x102E
173:           
174:                   if (scrollInt_flag == 1) {
102E  0100     MOVLB 0x0
1030  B047     BTFSC scrollInt_flag, 0, ACCESS
1032  0012     RETURN 0
175:                       break;
176:                   }
177:           
178:                   if (char_width == 0) {
1034  0100     MOVLB 0x0
1036  0100     MOVLB 0x0
1038  6777     TSTFSZ r, BANKED
103A  D063     BRA 0x1102
179:                       currentChar = displayString[string_index++];
103C  0100     MOVLB 0x0
103E  0100     MOVLB 0x0
1040  5176     MOVF cc, W, BANKED
1042  0D01     MULLW 0x1
1044  0101     MOVLB 0x1
1046  0E00     MOVLW 0x0
1048  24F3     ADDWF PRODL, W, ACCESS
104A  6ED9     MOVWF FSR2L, ACCESS
104C  0101     MOVLB 0x1
104E  0E01     MOVLW 0x1
1050  20F4     ADDWFC PRODH, W, ACCESS
1052  6EDA     MOVWF FSR2H, ACCESS
1054  50DF     MOVF INDF2, W, ACCESS
1056  0100     MOVLB 0x0
1058  6F72     MOVWF num_ptr, BANKED
105A  0100     MOVLB 0x0
105C  5172     MOVF num_ptr, W, BANKED
105E  0100     MOVLB 0x0
1060  0100     MOVLB 0x0
1062  6F7A     MOVWF result, BANKED
1064  0100     MOVLB 0x0
1066  6B7B     CLRF cell_is_alive, BANKED
1068  0100     MOVLB 0x0
106A  0100     MOVLB 0x0
106C  2B76     INCF cc, F, BANKED
180:                       if (currentChar == '\0') {
106E  0100     MOVLB 0x0
1070  0100     MOVLB 0x0
1072  517B     MOVF cell_is_alive, W, BANKED
1074  117A     IORWF result, W, BANKED
1076  A4D8     BTFSS STATUS, 2, ACCESS
1078  D010     BRA 0x109A
181:                           char_width = 14;
107A  0100     MOVLB 0x0
107C  6F72     MOVWF num_ptr, BANKED
107E  0E0E     MOVLW 0xE
1080  0100     MOVLB 0x0
1082  0100     MOVLB 0x0
1084  6F77     MOVWF r, BANKED
1086  0100     MOVLB 0x0
1088  5172     MOVF num_ptr, W, BANKED
182:                           char_index = 0;
108A  0E00     MOVLW 0x0
108C  0100     MOVLB 0x0
108E  0100     MOVLB 0x0
1090  6F79     MOVWF currentNumber, BANKED
1092  0E00     MOVLW 0x0
1094  0100     MOVLB 0x0
1096  6F78     MOVWF done, BANKED
183:                       } else {
1098  D034     BRA 0x1102
184:                           char_index = (currentChar - 32)*4;
109A  0100     MOVLB 0x0
109C  C07A     MOVFF result, num_ptr
109E  F072     NOP
10A0  0100     MOVLB 0x0
10A2  C07B     MOVFF cell_is_alive, counter
10A4  F073     NOP
10A6  0100     MOVLB 0x0
10A8  90D8     BCF STATUS, 0, ACCESS
10AA  3772     RLCF num_ptr, F, BANKED
10AC  3773     RLCF counter, F, BANKED
10AE  0100     MOVLB 0x0
10B0  90D8     BCF STATUS, 0, ACCESS
10B2  3772     RLCF num_ptr, F, BANKED
10B4  3773     RLCF counter, F, BANKED
10B6  0E80     MOVLW 0x80
10B8  0100     MOVLB 0x0
10BA  2572     ADDWF num_ptr, W, BANKED
10BC  0100     MOVLB 0x0
10BE  0100     MOVLB 0x0
10C0  6F78     MOVWF done, BANKED
10C2  0EFF     MOVLW 0xFF
10C4  0100     MOVLB 0x0
10C6  2173     ADDWFC counter, W, BANKED
10C8  0100     MOVLB 0x0
10CA  6F79     MOVWF currentNumber, BANKED
185:                           char_width = font3_1[ char_index + 3] + 1; // Include 1 empty column between chars.
10CC  0E03     MOVLW 0x3
10CE  0100     MOVLB 0x0
10D0  0100     MOVLB 0x0
10D2  2578     ADDWF done, W, BANKED
10D4  0100     MOVLB 0x0
10D6  6F72     MOVWF num_ptr, BANKED
10D8  0E00     MOVLW 0x0
10DA  0100     MOVLB 0x0
10DC  0100     MOVLB 0x0
10DE  2179     ADDWFC currentNumber, W, BANKED
10E0  0100     MOVLB 0x0
10E2  6F73     MOVWF counter, BANKED
10E4  0EEC     MOVLW 0xEC
10E6  0100     MOVLB 0x0
10E8  2572     ADDWF num_ptr, W, BANKED
10EA  6EF6     MOVWF TBLPTRL, ACCESS
10EC  0E3D     MOVLW 0x3D
10EE  2173     ADDWFC counter, W, BANKED
10F0  6EF7     MOVWF TBLPTRH, ACCESS
10F2  0008     TBLRD*
10F4  CFF5     MOVFF TABLAT, min
10F6  F074     NOP
10F8  0100     MOVLB 0x0
10FA  2974     INCF min, W, BANKED
10FC  0100     MOVLB 0x0
10FE  0100     MOVLB 0x0
1100  6F77     MOVWF r, BANKED
186:                       }
187:                   }
188:           
189:                   for (uint8_t i = 0; i < 14; i++) {
1102  0100     MOVLB 0x0
1104  6F72     MOVWF num_ptr, BANKED
1106  0E00     MOVLW 0x0
1108  0100     MOVLB 0x0
110A  0100     MOVLB 0x0
110C  6F7C     MOVWF alive_count, BANKED
110E  0100     MOVLB 0x0
1110  5172     MOVF num_ptr, W, BANKED
1112  D026     BRA 0x1160
115A  0100     MOVLB 0x0
115C  0100     MOVLB 0x0
115E  2B7C     INCF alive_count, F, BANKED
1160  0E0D     MOVLW 0xD
1162  0100     MOVLB 0x0
1164  0100     MOVLB 0x0
1166  657C     CPFSGT alive_count, BANKED
1168  D7D5     BRA 0x1114
190:                       display.cols[i] = display.cols[i + 1];
1114  0100     MOVLB 0x0
1116  0100     MOVLB 0x0
1118  517C     MOVF alive_count, W, BANKED
111A  0100     MOVLB 0x0
111C  6F72     MOVWF num_ptr, BANKED
111E  6B73     CLRF counter, BANKED
1120  0E01     MOVLW 0x1
1122  0100     MOVLB 0x0
1124  2772     ADDWF num_ptr, F, BANKED
1126  0E00     MOVLW 0x0
1128  2373     ADDWFC counter, F, BANKED
112A  0100     MOVLB 0x0
112C  0EA3     MOVLW 0xA3
112E  0100     MOVLB 0x0
1130  2572     ADDWF num_ptr, W, BANKED
1132  6ED9     MOVWF FSR2L, ACCESS
1134  0100     MOVLB 0x0
1136  0E00     MOVLW 0x0
1138  0100     MOVLB 0x0
113A  2173     ADDWFC counter, W, BANKED
113C  6EDA     MOVWF FSR2H, ACCESS
113E  0100     MOVLB 0x0
1140  0100     MOVLB 0x0
1142  517C     MOVF alive_count, W, BANKED
1144  0D01     MULLW 0x1
1146  0100     MOVLB 0x0
1148  0EA3     MOVLW 0xA3
114A  24F3     ADDWF PRODL, W, ACCESS
114C  6EE1     MOVWF FSR1L, ACCESS
114E  0100     MOVLB 0x0
1150  0E00     MOVLW 0x0
1152  20F4     ADDWFC PRODH, W, ACCESS
1154  6EE2     MOVWF FSR1H, ACCESS
1156  CFDF     MOVFF INDF2, INDF1
1158  FFE7     NOP
191:                   }
192:           
193:                   display.cols[14] = font3_1[ char_index ];
116A  0EEC     MOVLW 0xEC
116C  0100     MOVLB 0x0
116E  0100     MOVLB 0x0
1170  2578     ADDWF done, W, BANKED
1172  6EF6     MOVWF TBLPTRL, ACCESS
1174  0E3D     MOVLW 0x3D
1176  0100     MOVLB 0x0
1178  2179     ADDWFC currentNumber, W, BANKED
117A  6EF7     MOVWF TBLPTRH, ACCESS
117C  0008     TBLRD*
117E  0100     MOVLB 0x0
1180  CFF5     MOVFF TABLAT, 0xB1
1182  F0B1     NOP
194:           
195:                   if (currentChar != '\0') {
1184  0100     MOVLB 0x0
1186  0100     MOVLB 0x0
1188  517B     MOVF cell_is_alive, W, BANKED
118A  117A     IORWF result, W, BANKED
118C  B4D8     BTFSC STATUS, 2, ACCESS
118E  D011     BRA 0x11B2
196:                       if (char_width > 2) {
1190  0E02     MOVLW 0x2
1192  0100     MOVLB 0x0
1194  0100     MOVLB 0x0
1196  6577     CPFSGT r, BANKED
1198  D005     BRA 0x11A4
197:                           ++char_index;
119A  0100     MOVLB 0x0
119C  0100     MOVLB 0x0
119E  4B78     INFSNZ done, F, BANKED
11A0  2B79     INCF currentNumber, F, BANKED
198:                       } else {
11A2  D007     BRA 0x11B2
199:                           char_index = 0; // Empty column.
11A4  0E00     MOVLW 0x0
11A6  0100     MOVLB 0x0
11A8  0100     MOVLB 0x0
11AA  6F79     MOVWF currentNumber, BANKED
11AC  0E00     MOVLW 0x0
11AE  0100     MOVLB 0x0
11B0  6F78     MOVWF done, BANKED
200:                       }
201:                   }
202:                   --char_width;
11B2  0100     MOVLB 0x0
11B4  0100     MOVLB 0x0
11B6  0777     DECF r, F, BANKED
203:           
204:                   DelayMs(scrollDelay);
11B8  0100     MOVLB 0x0
11BA  0100     MOVLB 0x0
11BC  C0A2     MOVFF scrollDelay, __pcstackBANK0
11BE  F060     NOP
11C0  0100     MOVLB 0x0
11C2  0100     MOVLB 0x0
11C4  6B61     CLRF col, BANKED
11C6  ECFB     CALL 0x2BF6, 0
11C8  F015     NOP
205:               }
206:           }/***DISPLAYsCROLLtEXT***/
11D8  0012     RETURN 0
207:           
208:           void NumberToString(uint16_t number, uint8_t *strPtr){
209:           
210:               uint8_t i = 0;
0A5C  0100     MOVLB 0x0
0A5E  6F78     MOVWF done, BANKED
0A60  0E00     MOVLW 0x0
0A62  0100     MOVLB 0x0
0A64  0100     MOVLB 0x0
0A66  6F79     MOVWF currentNumber, BANKED
0A68  0100     MOVLB 0x0
0A6A  5178     MOVF done, W, BANKED
211:               if (number / 10000) {
0A6C  C074     MOVFF min, dividend
0A6E  F066     NOP
0A70  C075     MOVFF max, quotient
0A72  F067     NOP
0A74  0E27     MOVLW 0x27
0A76  0100     MOVLB 0x0
0A78  0100     MOVLB 0x0
0A7A  6F69     MOVWF row, BANKED
0A7C  0E10     MOVLW 0x10
0A7E  0100     MOVLB 0x0
0A80  6F68     MOVWF divisor, BANKED
0A82  EC54     CALL 0x2CA8, 0
0A84  F016     NOP
0A86  0100     MOVLB 0x0
0A88  0100     MOVLB 0x0
0A8A  5167     MOVF quotient, W, BANKED
0A8C  0100     MOVLB 0x0
0A8E  1166     IORWF dividend, W, BANKED
0A90  B4D8     BTFSC STATUS, 2, ACCESS
0A92  D032     BRA 0xAF8
212:                   strPtr[i] = (number / 10000) % 10 + '0';
0A94  0100     MOVLB 0x0
0A96  0100     MOVLB 0x0
0A98  5179     MOVF currentNumber, W, BANKED
0A9A  0D01     MULLW 0x1
0A9C  50F3     MOVF PRODL, W, ACCESS
0A9E  0100     MOVLB 0x0
0AA0  0100     MOVLB 0x0
0AA2  2576     ADDWF cc, W, BANKED
0AA4  6ED9     MOVWF FSR2L, ACCESS
0AA6  50F4     MOVF PRODH, W, ACCESS
0AA8  0100     MOVLB 0x0
0AAA  0100     MOVLB 0x0
0AAC  2177     ADDWFC r, W, BANKED
0AAE  6EDA     MOVWF FSR2H, ACCESS
0AB0  0E27     MOVLW 0x27
0AB2  0100     MOVLB 0x0
0AB4  0100     MOVLB 0x0
0AB6  6F69     MOVWF row, BANKED
0AB8  0E10     MOVLW 0x10
0ABA  0100     MOVLB 0x0
0ABC  6F68     MOVWF divisor, BANKED
0ABE  C074     MOVFF min, dividend
0AC0  F066     NOP
0AC2  C075     MOVFF max, quotient
0AC4  F067     NOP
0AC6  EC54     CALL 0x2CA8, 0
0AC8  F016     NOP
0ACA  0100     MOVLB 0x0
0ACC  C066     MOVFF dividend, time
0ACE  F06E     NOP
0AD0  0100     MOVLB 0x0
0AD2  C067     MOVFF quotient, 0x6F
0AD4  F06F     NOP
0AD6  0E00     MOVLW 0x0
0AD8  0100     MOVLB 0x0
0ADA  0100     MOVLB 0x0
0ADC  6F71     MOVWF col, BANKED
0ADE  0E0A     MOVLW 0xA
0AE0  0100     MOVLB 0x0
0AE2  6F70     MOVWF divisor, BANKED
0AE4  ECCF     CALL 0x2F9E, 0
0AE6  F017     NOP
0AE8  0100     MOVLB 0x0
0AEA  0100     MOVLB 0x0
0AEC  516E     MOVF time, W, BANKED
0AEE  0F30     ADDLW 0x30
0AF0  6EDF     MOVWF INDF2, ACCESS
213:                   i++;
0AF2  0100     MOVLB 0x0
0AF4  0100     MOVLB 0x0
0AF6  2B79     INCF currentNumber, F, BANKED
214:               }
215:               if (number / 1000) {
0AF8  C074     MOVFF min, dividend
0AFA  F066     NOP
0AFC  C075     MOVFF max, quotient
0AFE  F067     NOP
0B00  0E03     MOVLW 0x3
0B02  0100     MOVLB 0x0
0B04  0100     MOVLB 0x0
0B06  6F69     MOVWF row, BANKED
0B08  0EE8     MOVLW 0xE8
0B0A  0100     MOVLB 0x0
0B0C  6F68     MOVWF divisor, BANKED
0B0E  EC54     CALL 0x2CA8, 0
0B10  F016     NOP
0B12  0100     MOVLB 0x0
0B14  0100     MOVLB 0x0
0B16  5167     MOVF quotient, W, BANKED
0B18  0100     MOVLB 0x0
0B1A  1166     IORWF dividend, W, BANKED
0B1C  B4D8     BTFSC STATUS, 2, ACCESS
0B1E  D032     BRA 0xB84
216:                   strPtr[i] = (number / 1000) % 10 + '0';
0B20  0100     MOVLB 0x0
0B22  0100     MOVLB 0x0
0B24  5179     MOVF currentNumber, W, BANKED
0B26  0D01     MULLW 0x1
0B28  50F3     MOVF PRODL, W, ACCESS
0B2A  0100     MOVLB 0x0
0B2C  0100     MOVLB 0x0
0B2E  2576     ADDWF cc, W, BANKED
0B30  6ED9     MOVWF FSR2L, ACCESS
0B32  50F4     MOVF PRODH, W, ACCESS
0B34  0100     MOVLB 0x0
0B36  0100     MOVLB 0x0
0B38  2177     ADDWFC r, W, BANKED
0B3A  6EDA     MOVWF FSR2H, ACCESS
0B3C  0E03     MOVLW 0x3
0B3E  0100     MOVLB 0x0
0B40  0100     MOVLB 0x0
0B42  6F69     MOVWF row, BANKED
0B44  0EE8     MOVLW 0xE8
0B46  0100     MOVLB 0x0
0B48  6F68     MOVWF divisor, BANKED
0B4A  C074     MOVFF min, dividend
0B4C  F066     NOP
0B4E  C075     MOVFF max, quotient
0B50  F067     NOP
0B52  EC54     CALL 0x2CA8, 0
0B54  F016     NOP
0B56  0100     MOVLB 0x0
0B58  C066     MOVFF dividend, time
0B5A  F06E     NOP
0B5C  0100     MOVLB 0x0
0B5E  C067     MOVFF quotient, 0x6F
0B60  F06F     NOP
0B62  0E00     MOVLW 0x0
0B64  0100     MOVLB 0x0
0B66  0100     MOVLB 0x0
0B68  6F71     MOVWF col, BANKED
0B6A  0E0A     MOVLW 0xA
0B6C  0100     MOVLB 0x0
0B6E  6F70     MOVWF divisor, BANKED
0B70  ECCF     CALL 0x2F9E, 0
0B72  F017     NOP
0B74  0100     MOVLB 0x0
0B76  0100     MOVLB 0x0
0B78  516E     MOVF time, W, BANKED
0B7A  0F30     ADDLW 0x30
0B7C  6EDF     MOVWF INDF2, ACCESS
217:                   i++;
0B7E  0100     MOVLB 0x0
0B80  0100     MOVLB 0x0
0B82  2B79     INCF currentNumber, F, BANKED
218:               }
219:               if ((number / 100) || (i != 0)) {
0B84  C074     MOVFF min, dividend
0B86  F066     NOP
0B88  C075     MOVFF max, quotient
0B8A  F067     NOP
0B8C  0E00     MOVLW 0x0
0B8E  0100     MOVLB 0x0
0B90  0100     MOVLB 0x0
0B92  6F69     MOVWF row, BANKED
0B94  0E64     MOVLW 0x64
0B96  0100     MOVLB 0x0
0B98  6F68     MOVWF divisor, BANKED
0B9A  EC54     CALL 0x2CA8, 0
0B9C  F016     NOP
0B9E  0100     MOVLB 0x0
0BA0  0100     MOVLB 0x0
0BA2  5167     MOVF quotient, W, BANKED
0BA4  0100     MOVLB 0x0
0BA6  1166     IORWF dividend, W, BANKED
0BA8  A4D8     BTFSS STATUS, 2, ACCESS
0BAA  D005     BRA 0xBB6
0BAC  0100     MOVLB 0x0
0BAE  0100     MOVLB 0x0
0BB0  5179     MOVF currentNumber, W, BANKED
0BB2  B4D8     BTFSC STATUS, 2, ACCESS
0BB4  D032     BRA 0xC1A
220:                   strPtr[i] = (number / 100) % 10 + '0';
0BB6  0100     MOVLB 0x0
0BB8  0100     MOVLB 0x0
0BBA  5179     MOVF currentNumber, W, BANKED
0BBC  0D01     MULLW 0x1
0BBE  50F3     MOVF PRODL, W, ACCESS
0BC0  0100     MOVLB 0x0
0BC2  0100     MOVLB 0x0
0BC4  2576     ADDWF cc, W, BANKED
0BC6  6ED9     MOVWF FSR2L, ACCESS
0BC8  50F4     MOVF PRODH, W, ACCESS
0BCA  0100     MOVLB 0x0
0BCC  0100     MOVLB 0x0
0BCE  2177     ADDWFC r, W, BANKED
0BD0  6EDA     MOVWF FSR2H, ACCESS
0BD2  0E00     MOVLW 0x0
0BD4  0100     MOVLB 0x0
0BD6  0100     MOVLB 0x0
0BD8  6F69     MOVWF row, BANKED
0BDA  0E64     MOVLW 0x64
0BDC  0100     MOVLB 0x0
0BDE  6F68     MOVWF divisor, BANKED
0BE0  C074     MOVFF min, dividend
0BE2  F066     NOP
0BE4  C075     MOVFF max, quotient
0BE6  F067     NOP
0BE8  EC54     CALL 0x2CA8, 0
0BEA  F016     NOP
0BEC  0100     MOVLB 0x0
0BEE  C066     MOVFF dividend, time
0BF0  F06E     NOP
0BF2  0100     MOVLB 0x0
0BF4  C067     MOVFF quotient, 0x6F
0BF6  F06F     NOP
0BF8  0E00     MOVLW 0x0
0BFA  0100     MOVLB 0x0
0BFC  0100     MOVLB 0x0
0BFE  6F71     MOVWF col, BANKED
0C00  0E0A     MOVLW 0xA
0C02  0100     MOVLB 0x0
0C04  6F70     MOVWF divisor, BANKED
0C06  ECCF     CALL 0x2F9E, 0
0C08  F017     NOP
0C0A  0100     MOVLB 0x0
0C0C  0100     MOVLB 0x0
0C0E  516E     MOVF time, W, BANKED
0C10  0F30     ADDLW 0x30
0C12  6EDF     MOVWF INDF2, ACCESS
221:                   i++;
0C14  0100     MOVLB 0x0
0C16  0100     MOVLB 0x0
0C18  2B79     INCF currentNumber, F, BANKED
222:               }
223:               if ((number / 10) || (i != 0)) {
0C1A  C074     MOVFF min, dividend
0C1C  F066     NOP
0C1E  C075     MOVFF max, quotient
0C20  F067     NOP
0C22  0E00     MOVLW 0x0
0C24  0100     MOVLB 0x0
0C26  0100     MOVLB 0x0
0C28  6F69     MOVWF row, BANKED
0C2A  0E0A     MOVLW 0xA
0C2C  0100     MOVLB 0x0
0C2E  6F68     MOVWF divisor, BANKED
0C30  EC54     CALL 0x2CA8, 0
0C32  F016     NOP
0C34  0100     MOVLB 0x0
0C36  0100     MOVLB 0x0
0C38  5167     MOVF quotient, W, BANKED
0C3A  0100     MOVLB 0x0
0C3C  1166     IORWF dividend, W, BANKED
0C3E  A4D8     BTFSS STATUS, 2, ACCESS
0C40  D005     BRA 0xC4C
0C42  0100     MOVLB 0x0
0C44  0100     MOVLB 0x0
0C46  5179     MOVF currentNumber, W, BANKED
0C48  B4D8     BTFSC STATUS, 2, ACCESS
0C4A  D032     BRA 0xCB0
224:                   strPtr[i] = (number / 10) % 10 + '0';
0C4C  0100     MOVLB 0x0
0C4E  0100     MOVLB 0x0
0C50  5179     MOVF currentNumber, W, BANKED
0C52  0D01     MULLW 0x1
0C54  50F3     MOVF PRODL, W, ACCESS
0C56  0100     MOVLB 0x0
0C58  0100     MOVLB 0x0
0C5A  2576     ADDWF cc, W, BANKED
0C5C  6ED9     MOVWF FSR2L, ACCESS
0C5E  50F4     MOVF PRODH, W, ACCESS
0C60  0100     MOVLB 0x0
0C62  0100     MOVLB 0x0
0C64  2177     ADDWFC r, W, BANKED
0C66  6EDA     MOVWF FSR2H, ACCESS
0C68  0E00     MOVLW 0x0
0C6A  0100     MOVLB 0x0
0C6C  0100     MOVLB 0x0
0C6E  6F69     MOVWF row, BANKED
0C70  0E0A     MOVLW 0xA
0C72  0100     MOVLB 0x0
0C74  6F68     MOVWF divisor, BANKED
0C76  C074     MOVFF min, dividend
0C78  F066     NOP
0C7A  C075     MOVFF max, quotient
0C7C  F067     NOP
0C7E  EC54     CALL 0x2CA8, 0
0C80  F016     NOP
0C82  0100     MOVLB 0x0
0C84  C066     MOVFF dividend, time
0C86  F06E     NOP
0C88  0100     MOVLB 0x0
0C8A  C067     MOVFF quotient, 0x6F
0C8C  F06F     NOP
0C8E  0E00     MOVLW 0x0
0C90  0100     MOVLB 0x0
0C92  0100     MOVLB 0x0
0C94  6F71     MOVWF col, BANKED
0C96  0E0A     MOVLW 0xA
0C98  0100     MOVLB 0x0
0C9A  6F70     MOVWF divisor, BANKED
0C9C  ECCF     CALL 0x2F9E, 0
0C9E  F017     NOP
0CA0  0100     MOVLB 0x0
0CA2  0100     MOVLB 0x0
0CA4  516E     MOVF time, W, BANKED
0CA6  0F30     ADDLW 0x30
0CA8  6EDF     MOVWF INDF2, ACCESS
225:                   i++;
0CAA  0100     MOVLB 0x0
0CAC  0100     MOVLB 0x0
0CAE  2B79     INCF currentNumber, F, BANKED
226:               }
227:           
228:               strPtr[i] = number % 10 + '0';
0CB0  0100     MOVLB 0x0
0CB2  0100     MOVLB 0x0
0CB4  5179     MOVF currentNumber, W, BANKED
0CB6  0D01     MULLW 0x1
0CB8  50F3     MOVF PRODL, W, ACCESS
0CBA  0100     MOVLB 0x0
0CBC  0100     MOVLB 0x0
0CBE  2576     ADDWF cc, W, BANKED
0CC0  6ED9     MOVWF FSR2L, ACCESS
0CC2  50F4     MOVF PRODH, W, ACCESS
0CC4  0100     MOVLB 0x0
0CC6  0100     MOVLB 0x0
0CC8  2177     ADDWFC r, W, BANKED
0CCA  6EDA     MOVWF FSR2H, ACCESS
0CCC  C074     MOVFF min, time
0CCE  F06E     NOP
0CD0  C075     MOVFF max, 0x6F
0CD2  F06F     NOP
0CD4  0E00     MOVLW 0x0
0CD6  0100     MOVLB 0x0
0CD8  0100     MOVLB 0x0
0CDA  6F71     MOVWF col, BANKED
0CDC  0E0A     MOVLW 0xA
0CDE  0100     MOVLB 0x0
0CE0  6F70     MOVWF divisor, BANKED
0CE2  ECCF     CALL 0x2F9E, 0
0CE4  F017     NOP
0CE6  0100     MOVLB 0x0
0CE8  0100     MOVLB 0x0
0CEA  516E     MOVF time, W, BANKED
0CEC  0F30     ADDLW 0x30
0CEE  6EDF     MOVWF INDF2, ACCESS
229:               i++;
0CF0  0100     MOVLB 0x0
0CF2  0100     MOVLB 0x0
0CF4  2B79     INCF currentNumber, F, BANKED
230:               strPtr[i] = '\0';
0CF6  0100     MOVLB 0x0
0CF8  0100     MOVLB 0x0
0CFA  5179     MOVF currentNumber, W, BANKED
0CFC  0D01     MULLW 0x1
0CFE  50F3     MOVF PRODL, W, ACCESS
0D00  0100     MOVLB 0x0
0D02  0100     MOVLB 0x0
0D04  2576     ADDWF cc, W, BANKED
0D06  6ED9     MOVWF FSR2L, ACCESS
0D08  50F4     MOVF PRODH, W, ACCESS
0D0A  0100     MOVLB 0x0
0D0C  0100     MOVLB 0x0
0D0E  2177     ADDWFC r, W, BANKED
0D10  6EDA     MOVWF FSR2H, ACCESS
0D12  0E00     MOVLW 0x0
0D14  6EDF     MOVWF INDF2, ACCESS
231:           }/****NUMBERtOsTRING****/
0D16  0012     RETURN 0
232:           
233:           void Checkerboard(void){
234:               static int16_t frame = 0;
235:               uint8_t i, j;
236:               frame++;
3130  4A29     INFSNZ __pbssCOMRAM, F, ACCESS
3132  2A2A     INCF 0x2A, F, ACCESS
237:               ClearDisplay();
3134  ECB1     CALL 0x3562, 0
3136  F01A     NOP
238:               for (i = 0; i < 15; i++) {
3138  0100     MOVLB 0x0
313A  6F66     MOVWF dividend, BANKED
313C  0E00     MOVLW 0x0
313E  0100     MOVLB 0x0
3140  0100     MOVLB 0x0
3142  6F67     MOVWF quotient, BANKED
3144  0100     MOVLB 0x0
3146  5166     MOVF dividend, W, BANKED
3148  0E0E     MOVLW 0xE
314A  0100     MOVLB 0x0
314C  0100     MOVLB 0x0
314E  6567     CPFSGT quotient, BANKED
3150  D001     BRA 0x3154
3152  0012     RETURN 0
3198  0100     MOVLB 0x0
319A  0100     MOVLB 0x0
319C  2B67     INCF quotient, F, BANKED
319E  0E0E     MOVLW 0xE
31A0  0100     MOVLB 0x0
31A2  0100     MOVLB 0x0
31A4  6567     CPFSGT quotient, BANKED
31A6  D7D6     BRA 0x3154
31A8  0012     RETURN 0
239:                   for (j = 0; j < 8; j++) {
3154  0100     MOVLB 0x0
3156  6F66     MOVWF dividend, BANKED
3158  0E00     MOVLW 0x0
315A  0100     MOVLB 0x0
315C  0100     MOVLB 0x0
315E  6F68     MOVWF divisor, BANKED
3160  0100     MOVLB 0x0
3162  5166     MOVF dividend, W, BANKED
3164  D014     BRA 0x318E
3188  0100     MOVLB 0x0
318A  0100     MOVLB 0x0
318C  2B68     INCF divisor, F, BANKED
318E  0E07     MOVLW 0x7
3190  0100     MOVLB 0x0
3192  0100     MOVLB 0x0
3194  6568     CPFSGT divisor, BANKED
3196  D7E7     BRA 0x3166
240:                       DisplayPlot(i, j, (j + i + frame) % 2);
3166  C067     MOVFF quotient, __pcstackBANK0
3168  F060     NOP
316A  C068     MOVFF divisor, col
316C  F061     NOP
316E  0100     MOVLB 0x0
3170  0100     MOVLB 0x0
3172  5168     MOVF divisor, W, BANKED
3174  0100     MOVLB 0x0
3176  0100     MOVLB 0x0
3178  2567     ADDWF quotient, W, BANKED
317A  2429     ADDWF __pbssCOMRAM, W, ACCESS
317C  0B01     ANDLW 0x1
317E  0100     MOVLB 0x0
3180  0100     MOVLB 0x0
3182  6F62     MOVWF c, BANKED
3184  ECA9     CALL 0x2D52, 0
3186  F016     NOP
241:                   }
242:               }
243:           }/****CHECKERBOARD****/
244:           
245:           void BinaryTime(void){
246:           
247:               display.cols[0] = display.cols[1] = binFont[dateTime.hour / 10];
1D30  0100     MOVLB 0x0
1D32  C02D     MOVFF 0x2D, __pcstackBANK0
1D34  F060     NOP
1D36  0100     MOVLB 0x0
1D38  0100     MOVLB 0x0
1D3A  6B61     CLRF col, BANKED
1D3C  0E00     MOVLW 0x0
1D3E  0100     MOVLB 0x0
1D40  0100     MOVLB 0x0
1D42  6F63     MOVWF string_index, BANKED
1D44  0E0A     MOVLW 0xA
1D46  0100     MOVLB 0x0
1D48  6F62     MOVWF c, BANKED
1D4A  EC3B     CALL 0x2276, 0
1D4C  F011     NOP
1D4E  0EEC     MOVLW 0xEC
1D50  0100     MOVLB 0x0
1D52  0100     MOVLB 0x0
1D54  2560     ADDWF __pcstackBANK0, W, BANKED
1D56  6EF6     MOVWF TBLPTRL, ACCESS
1D58  0E3E     MOVLW 0x3E
1D5A  0100     MOVLB 0x0
1D5C  2161     ADDWFC col, W, BANKED
1D5E  6EF7     MOVWF TBLPTRH, ACCESS
1D60  0008     TBLRD*
1D62  0100     MOVLB 0x0
1D64  CFF5     MOVFF TABLAT, 0xA4
1D66  F0A4     NOP
1D68  C0A4     MOVFF 0xA4, display
1D6A  F0A3     NOP
248:               display.cols[3] = display.cols[4] = binFont[dateTime.hour % 10];
1D6C  0100     MOVLB 0x0
1D6E  C02D     MOVFF 0x2D, __pcstackBANK0
1D70  F060     NOP
1D72  0100     MOVLB 0x0
1D74  0100     MOVLB 0x0
1D76  6B61     CLRF col, BANKED
1D78  0E00     MOVLW 0x0
1D7A  0100     MOVLB 0x0
1D7C  0100     MOVLB 0x0
1D7E  6F63     MOVWF string_index, BANKED
1D80  0E0A     MOVLW 0xA
1D82  0100     MOVLB 0x0
1D84  6F62     MOVWF c, BANKED
1D86  ECC5     CALL 0x258A, 0
1D88  F012     NOP
1D8A  0EEC     MOVLW 0xEC
1D8C  0100     MOVLB 0x0
1D8E  0100     MOVLB 0x0
1D90  2560     ADDWF __pcstackBANK0, W, BANKED
1D92  6EF6     MOVWF TBLPTRL, ACCESS
1D94  0E3E     MOVLW 0x3E
1D96  0100     MOVLB 0x0
1D98  2161     ADDWFC col, W, BANKED
1D9A  6EF7     MOVWF TBLPTRH, ACCESS
1D9C  0008     TBLRD*
1D9E  0100     MOVLB 0x0
1DA0  CFF5     MOVFF TABLAT, 0xA7
1DA2  F0A7     NOP
1DA4  C0A7     MOVFF 0xA7, 0xA6
1DA6  F0A6     NOP
249:               display.cols[5] = display.cols[6] = binFont[dateTime.min / 10];
1DA8  0100     MOVLB 0x0
1DAA  C02C     MOVFF 0x2C, __pcstackBANK0
1DAC  F060     NOP
1DAE  0100     MOVLB 0x0
1DB0  0100     MOVLB 0x0
1DB2  6B61     CLRF col, BANKED
1DB4  0E00     MOVLW 0x0
1DB6  0100     MOVLB 0x0
1DB8  0100     MOVLB 0x0
1DBA  6F63     MOVWF string_index, BANKED
1DBC  0E0A     MOVLW 0xA
1DBE  0100     MOVLB 0x0
1DC0  6F62     MOVWF c, BANKED
1DC2  EC3B     CALL 0x2276, 0
1DC4  F011     NOP
1DC6  0EEC     MOVLW 0xEC
1DC8  0100     MOVLB 0x0
1DCA  0100     MOVLB 0x0
1DCC  2560     ADDWF __pcstackBANK0, W, BANKED
1DCE  6EF6     MOVWF TBLPTRL, ACCESS
1DD0  0E3E     MOVLW 0x3E
1DD2  0100     MOVLB 0x0
1DD4  2161     ADDWFC col, W, BANKED
1DD6  6EF7     MOVWF TBLPTRH, ACCESS
1DD8  0008     TBLRD*
1DDA  0100     MOVLB 0x0
1DDC  CFF5     MOVFF TABLAT, 0xA9
1DDE  F0A9     NOP
1DE0  C0A9     MOVFF 0xA9, 0xA8
1DE2  F0A8     NOP
250:               display.cols[8] = display.cols[9] = binFont[dateTime.min % 10];
1DE4  0100     MOVLB 0x0
1DE6  C02C     MOVFF 0x2C, __pcstackBANK0
1DE8  F060     NOP
1DEA  0100     MOVLB 0x0
1DEC  0100     MOVLB 0x0
1DEE  6B61     CLRF col, BANKED
1DF0  0E00     MOVLW 0x0
1DF2  0100     MOVLB 0x0
1DF4  0100     MOVLB 0x0
1DF6  6F63     MOVWF string_index, BANKED
1DF8  0E0A     MOVLW 0xA
1DFA  0100     MOVLB 0x0
1DFC  6F62     MOVWF c, BANKED
1DFE  ECC5     CALL 0x258A, 0
1E00  F012     NOP
1E02  0EEC     MOVLW 0xEC
1E04  0100     MOVLB 0x0
1E06  0100     MOVLB 0x0
1E08  2560     ADDWF __pcstackBANK0, W, BANKED
1E0A  6EF6     MOVWF TBLPTRL, ACCESS
1E0C  0E3E     MOVLW 0x3E
1E0E  0100     MOVLB 0x0
1E10  2161     ADDWFC col, W, BANKED
1E12  6EF7     MOVWF TBLPTRH, ACCESS
1E14  0008     TBLRD*
1E16  0100     MOVLB 0x0
1E18  CFF5     MOVFF TABLAT, 0xAC
1E1A  F0AC     NOP
1E1C  C0AC     MOVFF 0xAC, 0xAB
1E1E  F0AB     NOP
251:               display.cols[10] = display.cols[11] = binFont[dateTime.sec / 10];
1E20  0100     MOVLB 0x0
1E22  C02B     MOVFF dateTime, __pcstackBANK0
1E24  F060     NOP
1E26  0100     MOVLB 0x0
1E28  0100     MOVLB 0x0
1E2A  6B61     CLRF col, BANKED
1E2C  0E00     MOVLW 0x0
1E2E  0100     MOVLB 0x0
1E30  0100     MOVLB 0x0
1E32  6F63     MOVWF string_index, BANKED
1E34  0E0A     MOVLW 0xA
1E36  0100     MOVLB 0x0
1E38  6F62     MOVWF c, BANKED
1E3A  EC3B     CALL 0x2276, 0
1E3C  F011     NOP
1E3E  0EEC     MOVLW 0xEC
1E40  0100     MOVLB 0x0
1E42  0100     MOVLB 0x0
1E44  2560     ADDWF __pcstackBANK0, W, BANKED
1E46  6EF6     MOVWF TBLPTRL, ACCESS
1E48  0E3E     MOVLW 0x3E
1E4A  0100     MOVLB 0x0
1E4C  2161     ADDWFC col, W, BANKED
1E4E  6EF7     MOVWF TBLPTRH, ACCESS
1E50  0008     TBLRD*
1E52  0100     MOVLB 0x0
1E54  CFF5     MOVFF TABLAT, 0xAE
1E56  F0AE     NOP
1E58  C0AE     MOVFF 0xAE, 0xAD
1E5A  F0AD     NOP
252:               display.cols[13] = display.cols[14] = binFont[dateTime.sec % 10];
1E5C  0100     MOVLB 0x0
1E5E  C02B     MOVFF dateTime, __pcstackBANK0
1E60  F060     NOP
1E62  0100     MOVLB 0x0
1E64  0100     MOVLB 0x0
1E66  6B61     CLRF col, BANKED
1E68  0E00     MOVLW 0x0
1E6A  0100     MOVLB 0x0
1E6C  0100     MOVLB 0x0
1E6E  6F63     MOVWF string_index, BANKED
1E70  0E0A     MOVLW 0xA
1E72  0100     MOVLB 0x0
1E74  6F62     MOVWF c, BANKED
1E76  ECC5     CALL 0x258A, 0
1E78  F012     NOP
1E7A  0EEC     MOVLW 0xEC
1E7C  0100     MOVLB 0x0
1E7E  0100     MOVLB 0x0
1E80  2560     ADDWF __pcstackBANK0, W, BANKED
1E82  6EF6     MOVWF TBLPTRL, ACCESS
1E84  0E3E     MOVLW 0x3E
1E86  0100     MOVLB 0x0
1E88  2161     ADDWFC col, W, BANKED
1E8A  6EF7     MOVWF TBLPTRH, ACCESS
1E8C  0008     TBLRD*
1E8E  0100     MOVLB 0x0
1E90  CFF5     MOVFF TABLAT, 0xB1
1E92  F0B1     NOP
1E94  C0B1     MOVFF 0xB1, 0xB0
1E96  F0B0     NOP
253:           }/***BINARYTIME***/
1E98  0012     RETURN 0
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/delay.c  -------------------------------
1:             /* ***************************************************************************
2:              **   delay.c
3:              **
4:              **  Project      : ClockMatrix_v0
5:              **  Target       : PIC18F14K50
6:              **  Description  : Project used to develop clock firmware.  Tested methods and
7:              **                 determined functionality (needed, wanted, and the possible)
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : 5/8/2013
12:             **  Branched     : 6/27/2013 -- started v2
13:             **
14:             **  R Hanlen <implod@gmail.com>
15:             ** ***************************************************************************/
16:            
17:            
18:            #ifndef _DELAY_C
19:            #define _DELAY_C
20:            
21:            /*****************************************************************************
22:             **Files to Include
23:             *****************************************************************************/
24:            #include <htc.h>
25:            #include "delay.h"
26:            
27:            /*****************************************************************************
28:             ** Global Variables
29:             *****************************************************************************/
30:            extern volatile unsigned long milliseconds;
31:            
32:            /*****************************************************************************
33:             **Delay Functions
34:             *****************************************************************************/
35:            
36:            
37:            void DelayFor12TCY(void){
38:                Nop();
3870  F000     NOP
38A4  F000     NOP
39:                Nop();
3872  F000     NOP
38A6  F000     NOP
40:                Nop();
3874  F000     NOP
38A8  F000     NOP
41:                Nop();
3876  F000     NOP
38AA  F000     NOP
42:                Nop();
3878  F000     NOP
38AC  F000     NOP
43:                Nop();
387A  F000     NOP
38AE  F000     NOP
44:                Nop();
387C  F000     NOP
38B0  F000     NOP
45:                Nop();
387E  F000     NOP
38B2  F000     NOP
46:                Nop();
3880  F000     NOP
38B4  F000     NOP
47:                Nop();
3882  F000     NOP
38B6  F000     NOP
48:                Nop();
3884  F000     NOP
38B8  F000     NOP
49:                Nop();
3886  F000     NOP
38BA  F000     NOP
50:            }
3888  0012     RETURN 0
38BC  0012     RETURN 0
51:            
52:            // Delay specified amount of microseconds
53:            
54:            void DelayUs(int us){
55:                while(us != 0) {
3852  D007     BRA 0x3862
3862  0100     MOVLB 0x0
3864  0100     MOVLB 0x0
3866  5161     MOVF col, W, BANKED
3868  1160     IORWF __pcstackBANK0, W, BANKED
386A  B4D8     BTFSC STATUS, 2, ACCESS
386E  D7F2     BRA 0x3854
38D4  D005     BRA 0x38E0
38E0  5013     MOVF 0x13, W, ACCESS
38E2  1012     IORWF DelayUs, W, ACCESS
38E4  B4D8     BTFSC STATUS, 2, ACCESS
38E8  D7F6     BRA 0x38D6
56:                    DelayFor12TCY();
3854  EC38     CALL 0x3870, 0
3856  F01C     NOP
38D6  EC52     CALL 0x38A4, 0
38D8  F01C     NOP
57:                    us--;
3858  0100     MOVLB 0x0
385A  0100     MOVLB 0x0
385C  0760     DECF __pcstackBANK0, F, BANKED
385E  A0D8     BTFSS STATUS, 0, ACCESS
3860  0761     DECF col, F, BANKED
38DA  0612     DECF DelayUs, F, ACCESS
38DC  A0D8     BTFSS STATUS, 0, ACCESS
38DE  0613     DECF 0x13, F, ACCESS
58:                }
59:            }
386C  0012     RETURN 0
38E6  0012     RETURN 0
60:            
61:            void DelayMs(int ms){
62:               unsigned long time = milliseconds;
2BF6  C097     MOVFF milliseconds, time
2BF8  F06E     NOP
2BFA  C098     MOVFF 0x98, 0x6F
2BFC  F06F     NOP
2BFE  C099     MOVFF 0x99, divisor
2C00  F070     NOP
2C02  C09A     MOVFF 0x9A, col
2C04  F071     NOP
63:               while((milliseconds-time) < ms);
2C06  0100     MOVLB 0x0
2C08  C060     MOVFF __pcstackBANK0, c
2C0A  F062     NOP
2C0C  0100     MOVLB 0x0
2C0E  C061     MOVFF col, string_index
2C10  F063     NOP
2C12  0E00     MOVLW 0x0
2C14  0100     MOVLB 0x0
2C16  BF63     BTFSC string_index, 7, BANKED
2C18  0EFF     MOVLW 0xFF
2C1A  6F64     MOVWF n, BANKED
2C1C  6F65     MOVWF counter, BANKED
2C1E  0100     MOVLB 0x0
2C20  C06E     MOVFF time, dividend
2C22  F066     NOP
2C24  0100     MOVLB 0x0
2C26  C06F     MOVFF 0x6F, quotient
2C28  F067     NOP
2C2A  0100     MOVLB 0x0
2C2C  C070     MOVFF divisor, divisor
2C2E  F068     NOP
2C30  0100     MOVLB 0x0
2C32  C071     MOVFF col, row
2C34  F069     NOP
2C36  0100     MOVLB 0x0
2C38  1F66     COMF dividend, F, BANKED
2C3A  1F67     COMF quotient, F, BANKED
2C3C  1F68     COMF divisor, F, BANKED
2C3E  1F69     COMF row, F, BANKED
2C40  2B66     INCF dividend, F, BANKED
2C42  0E00     MOVLW 0x0
2C44  2367     ADDWFC quotient, F, BANKED
2C46  2368     ADDWFC divisor, F, BANKED
2C48  2369     ADDWFC row, F, BANKED
2C4A  0100     MOVLB 0x0
2C4C  0100     MOVLB 0x0
2C4E  5197     MOVF milliseconds, W, BANKED
2C50  0100     MOVLB 0x0
2C52  2566     ADDWF dividend, W, BANKED
2C54  0100     MOVLB 0x0
2C56  6F6A     MOVWF col, BANKED
2C58  0100     MOVLB 0x0
2C5A  0100     MOVLB 0x0
2C5C  5198     MOVF 0x98, W, BANKED
2C5E  0100     MOVLB 0x0
2C60  2167     ADDWFC quotient, W, BANKED
2C62  0100     MOVLB 0x0
2C64  6F6B     MOVWF counter, BANKED
2C66  0100     MOVLB 0x0
2C68  0100     MOVLB 0x0
2C6A  5199     MOVF 0x99, W, BANKED
2C6C  0100     MOVLB 0x0
2C6E  2168     ADDWFC divisor, W, BANKED
2C70  0100     MOVLB 0x0
2C72  6F6C     MOVWF quotient, BANKED
2C74  0100     MOVLB 0x0
2C76  0100     MOVLB 0x0
2C78  519A     MOVF 0x9A, W, BANKED
2C7A  0100     MOVLB 0x0
2C7C  2169     ADDWFC row, W, BANKED
2C7E  0100     MOVLB 0x0
2C80  6F6D     MOVWF tstring, BANKED
2C82  0100     MOVLB 0x0
2C84  5162     MOVF c, W, BANKED
2C86  0100     MOVLB 0x0
2C88  5D6A     SUBWF col, W, BANKED
2C8A  0100     MOVLB 0x0
2C8C  5163     MOVF string_index, W, BANKED
2C8E  0100     MOVLB 0x0
2C90  596B     SUBWFB counter, W, BANKED
2C92  0100     MOVLB 0x0
2C94  5164     MOVF n, W, BANKED
2C96  0100     MOVLB 0x0
2C98  596C     SUBWFB quotient, W, BANKED
2C9A  0100     MOVLB 0x0
2C9C  5165     MOVF counter, W, BANKED
2C9E  0100     MOVLB 0x0
2CA0  596D     SUBWFB tstring, W, BANKED
2CA2  B0D8     BTFSC STATUS, 0, ACCESS
2CA6  D7AF     BRA 0x2C06
64:            
65:            }
2CA4  0012     RETURN 0
66:            
67:            
68:            
69:            #endif //_DELAY_C
70:            
71:            
---  C:/Users/Master/MPLABXProjects/PIC18F14K50/ClockMatrix_main/DS1307.c  ------------------------------
1:             /* ***************************************************************************
2:              **    DS1307.c
3:              **
4:              **  Project      : ClockMatrix_v0
5:              **  Target       : PIC18F14K50
6:              **  Description  : Project used to develop clock firmware.  Tested methods and
7:              **                 determined functionality (needed, wanted, and the possible)
8:              **
9:              **  Compiler     : HI-TECH C  Version 9.80
10:             **  IDE          : MPLABX v1.80
11:             **  Created      : 5/8/2013
12:             **  Branched     : 6/27/2013 -- started v2
13:             **
14:             **  R Hanlen <implod@gmail.com>
15:             ** ***************************************************************************/
16:            
17:            /*****************************************************************************
18:             **HEADER FILES
19:             *****************************************************************************/
20:            //  Global
21:            #include <htc.h>
22:            #include <stdint.h>
23:            #include <string.h>
24:            
25:            //  Local
26:            #include "global.h"
27:            #include "DS1307.h"
28:            #include "swI2C.h"
29:            
30:            /*****************************************************************************
31:             **VARABLES
32:             *****************************************************************************/
33:            
34:            /*****************************************************************************
35:             **FUNCTIONS
36:             *****************************************************************************/
37:            
38:            uint8_t RTCInit(void){
39:            
40:                dateTime.tstring[2] = 58;// ':'
35AC  0100     MOVLB 0x0
35AE  6F6F     MOVWF 0x6F, BANKED
35B0  0E3A     MOVLW 0x3A
35B2  6E35     MOVWF 0x35, ACCESS
35B4  0100     MOVLB 0x0
35B6  516F     MOVF 0x6F, W, BANKED
41:                dateTime.dstring[2] = 47; // '/'
35B8  0100     MOVLB 0x0
35BA  6F6F     MOVWF 0x6F, BANKED
35BC  0E2F     MOVLW 0x2F
35BE  6E3B     MOVWF 0x3B, ACCESS
35C0  0100     MOVLB 0x0
35C2  516F     MOVF 0x6F, W, BANKED
42:                timer.string[2] = 58; // ':'
35C4  0100     MOVLB 0x0
35C6  6F6F     MOVWF 0x6F, BANKED
35C8  0E3A     MOVLW 0x3A
35CA  6E43     MOVWF 0x43, ACCESS
35CC  0100     MOVLB 0x0
35CE  516F     MOVF 0x6F, W, BANKED
43:                if (AckPolling(DS1307_ID)) { //check if rtc responds on i2c bus
35D0  0100     MOVLB 0x0
35D2  6F6F     MOVWF 0x6F, BANKED
35D4  0ED0     MOVLW 0xD0
35D6  0100     MOVLB 0x0
35D8  0100     MOVLB 0x0
35DA  6F67     MOVWF quotient, BANKED
35DC  0100     MOVLB 0x0
35DE  516F     MOVF 0x6F, W, BANKED
35E0  EC3E     CALL 0x367C, 0
35E2  F01B     NOP
35E4  0900     IORLW 0x0
35E6  A4D8     BTFSS STATUS, 2, ACCESS
35E8  0012     RETURN 0
44:                    return(RTC_NOT_RESPONDING);
45:                }
46:            
47:                RTCGetDateTime();
35EA  EC18     CALL 0x1A30, 0
35EC  F00D     NOP
48:                RTCGetTimer();
35EE  ECFA     CALL 0x2DF4, 0
49:                if (dateTime.sec > 60) { //check if oscillator is running
50:                    //RTCStartClock();
51:                    return(RTC_CLOCKHALT_BIT_SET);
52:                }
53:            
54:                return(RTC_INITIALIZED);  // everything checks out
55:            }
56:            
57:            void RTCStartClock(void){
58:            
59:                StartI2C(); // Issue start signal
60:                TransmitI2C(DS1307_ID); // Address
61:                TransmitI2C(RTC_SECONDS); // Start from address 0
62:                TransmitI2C(0x00);
63:                StopI2C();
64:            
65:            }
66:            
67:            void RTCStopClock(void){
68:            
69:                StartI2C(); // Issue start signal
70:                TransmitI2C(DS1307_ID); // Device
71:                TransmitI2C(RTC_SECONDS); // Address
72:                TransmitI2C(RTC_CH_BIT);
73:                StopI2C();
74:            
75:            }
76:            
77:            void RTCGetDateTime(void){
78:            
79:                uint8_t i2cBuffer;
80:                StartI2C(); // Issue start signal
1A30  ECEA     CALL 0x37D4, 0
1A32  F01B     NOP
81:                TransmitI2C(DS1307_ID); // Device
1A34  0100     MOVLB 0x0
1A36  6F6D     MOVWF tstring, BANKED
1A38  0ED0     MOVLW 0xD0
1A3A  0100     MOVLB 0x0
1A3C  0100     MOVLB 0x0
1A3E  6F63     MOVWF string_index, BANKED
1A40  0100     MOVLB 0x0
1A42  516D     MOVF tstring, W, BANKED
1A44  EC14     CALL 0x2828, 0
1A46  F014     NOP
82:                TransmitI2C(RTC_SECONDS); // Address
1A48  0100     MOVLB 0x0
1A4A  6F6D     MOVWF tstring, BANKED
1A4C  0E00     MOVLW 0x0
1A4E  0100     MOVLB 0x0
1A50  0100     MOVLB 0x0
1A52  6F63     MOVWF string_index, BANKED
1A54  0100     MOVLB 0x0
1A56  516D     MOVF tstring, W, BANKED
1A58  EC14     CALL 0x2828, 0
1A5A  F014     NOP
83:                StartI2C(); // Issue repeated start signal
1A5C  ECEA     CALL 0x37D4, 0
1A5E  F01B     NOP
84:                TransmitI2C(0xD1); // Device plus R/W=1
1A60  0100     MOVLB 0x0
1A62  6F6D     MOVWF tstring, BANKED
1A64  0ED1     MOVLW 0xD1
1A66  0100     MOVLB 0x0
1A68  0100     MOVLB 0x0
1A6A  6F63     MOVWF string_index, BANKED
1A6C  0100     MOVLB 0x0
1A6E  516D     MOVF tstring, W, BANKED
1A70  EC14     CALL 0x2828, 0
1A72  F014     NOP
85:                i2cBuffer = RecieveI2C(1); // Read seconds byte
1A74  0100     MOVLB 0x0
1A76  6F6D     MOVWF tstring, BANKED
1A78  0E01     MOVLW 0x1
1A7A  0100     MOVLB 0x0
1A7C  0100     MOVLB 0x0
1A7E  6F63     MOVWF string_index, BANKED
1A80  0100     MOVLB 0x0
1A82  516D     MOVF tstring, W, BANKED
1A84  ECC6     CALL 0x238C, 0
1A86  F011     NOP
1A88  0100     MOVLB 0x0
1A8A  0100     MOVLB 0x0
1A8C  6F6E     MOVWF time, BANKED
86:                dateTime.sec = bcd_to_dec(i2cBuffer);
1A8E  C06E     MOVFF time, __pcstackBANK0
1A90  F060     NOP
1A92  EC5F     CALL 0x38BE, 0
1A94  F01C     NOP
1A96  6E2B     MOVWF dateTime, ACCESS
87:                i2cBuffer = RecieveI2C(1); // Read minutes byte
1A98  0100     MOVLB 0x0
1A9A  6F6D     MOVWF tstring, BANKED
1A9C  0E01     MOVLW 0x1
1A9E  0100     MOVLB 0x0
1AA0  0100     MOVLB 0x0
1AA2  6F63     MOVWF string_index, BANKED
1AA4  0100     MOVLB 0x0
1AA6  516D     MOVF tstring, W, BANKED
1AA8  ECC6     CALL 0x238C, 0
1AAA  F011     NOP
1AAC  0100     MOVLB 0x0
1AAE  0100     MOVLB 0x0
1AB0  6F6E     MOVWF time, BANKED
88:                dateTime.min = bcd_to_dec(i2cBuffer);
1AB2  C06E     MOVFF time, __pcstackBANK0
1AB4  F060     NOP
1AB6  EC5F     CALL 0x38BE, 0
1AB8  F01C     NOP
1ABA  6E2C     MOVWF 0x2C, ACCESS
89:                i2cBuffer = RecieveI2C(1); // Read hours byte
1ABC  0100     MOVLB 0x0
1ABE  6F6D     MOVWF tstring, BANKED
1AC0  0E01     MOVLW 0x1
1AC2  0100     MOVLB 0x0
1AC4  0100     MOVLB 0x0
1AC6  6F63     MOVWF string_index, BANKED
1AC8  0100     MOVLB 0x0
1ACA  516D     MOVF tstring, W, BANKED
1ACC  ECC6     CALL 0x238C, 0
1ACE  F011     NOP
1AD0  0100     MOVLB 0x0
1AD2  0100     MOVLB 0x0
1AD4  6F6E     MOVWF time, BANKED
90:                dateTime.hour = bcd_to_dec(i2cBuffer & 0x1F);
1AD6  0100     MOVLB 0x0
1AD8  0100     MOVLB 0x0
1ADA  516E     MOVF time, W, BANKED
1ADC  0B1F     ANDLW 0x1F
1ADE  0100     MOVLB 0x0
1AE0  0100     MOVLB 0x0
1AE2  6F60     MOVWF __pcstackBANK0, BANKED
1AE4  EC5F     CALL 0x38BE, 0
1AE6  F01C     NOP
1AE8  6E2D     MOVWF 0x2D, ACCESS
91:                i2cBuffer = RecieveI2C(1); // Read day of week byte
1AEA  0100     MOVLB 0x0
1AEC  6F6D     MOVWF tstring, BANKED
1AEE  0E01     MOVLW 0x1
1AF0  0100     MOVLB 0x0
1AF2  0100     MOVLB 0x0
1AF4  6F63     MOVWF string_index, BANKED
1AF6  0100     MOVLB 0x0
1AF8  516D     MOVF tstring, W, BANKED
1AFA  ECC6     CALL 0x238C, 0
1AFC  F011     NOP
1AFE  0100     MOVLB 0x0
1B00  0100     MOVLB 0x0
1B02  6F6E     MOVWF time, BANKED
92:                dateTime.wday = bcd_to_dec(i2cBuffer);
1B04  C06E     MOVFF time, __pcstackBANK0
1B06  F060     NOP
1B08  EC5F     CALL 0x38BE, 0
1B0A  F01C     NOP
1B0C  6E2E     MOVWF 0x2E, ACCESS
93:                i2cBuffer = RecieveI2C(1); //Read date of month
1B0E  0100     MOVLB 0x0
1B10  6F6D     MOVWF tstring, BANKED
1B12  0E01     MOVLW 0x1
1B14  0100     MOVLB 0x0
1B16  0100     MOVLB 0x0
1B18  6F63     MOVWF string_index, BANKED
1B1A  0100     MOVLB 0x0
1B1C  516D     MOVF tstring, W, BANKED
1B1E  ECC6     CALL 0x238C, 0
1B20  F011     NOP
1B22  0100     MOVLB 0x0
1B24  0100     MOVLB 0x0
1B26  6F6E     MOVWF time, BANKED
94:                dateTime.mday = bcd_to_dec(i2cBuffer);
1B28  C06E     MOVFF time, __pcstackBANK0
1B2A  F060     NOP
1B2C  EC5F     CALL 0x38BE, 0
1B2E  F01C     NOP
1B30  6E2F     MOVWF 0x2F, ACCESS
95:                i2cBuffer = RecieveI2C(1); // Read month byte
1B32  0100     MOVLB 0x0
1B34  6F6D     MOVWF tstring, BANKED
1B36  0E01     MOVLW 0x1
1B38  0100     MOVLB 0x0
1B3A  0100     MOVLB 0x0
1B3C  6F63     MOVWF string_index, BANKED
1B3E  0100     MOVLB 0x0
1B40  516D     MOVF tstring, W, BANKED
1B42  ECC6     CALL 0x238C, 0
1B44  F011     NOP
1B46  0100     MOVLB 0x0
1B48  0100     MOVLB 0x0
1B4A  6F6E     MOVWF time, BANKED
96:                dateTime.mon = bcd_to_dec(i2cBuffer);
1B4C  C06E     MOVFF time, __pcstackBANK0
1B4E  F060     NOP
1B50  EC5F     CALL 0x38BE, 0
1B52  F01C     NOP
1B54  6E30     MOVWF 0x30, ACCESS
97:                i2cBuffer = RecieveI2C(0); // Read last to digits of year byte
1B56  0100     MOVLB 0x0
1B58  6F6D     MOVWF tstring, BANKED
1B5A  0E00     MOVLW 0x0
1B5C  0100     MOVLB 0x0
1B5E  0100     MOVLB 0x0
1B60  6F63     MOVWF string_index, BANKED
1B62  0100     MOVLB 0x0
1B64  516D     MOVF tstring, W, BANKED
1B66  ECC6     CALL 0x238C, 0
1B68  F011     NOP
1B6A  0100     MOVLB 0x0
1B6C  0100     MOVLB 0x0
1B6E  6F6E     MOVWF time, BANKED
98:                dateTime.year = bcd_to_dec(i2cBuffer);
1B70  C06E     MOVFF time, __pcstackBANK0
1B72  F060     NOP
1B74  EC5F     CALL 0x38BE, 0
1B76  F01C     NOP
1B78  6E31     MOVWF 0x31, ACCESS
99:                StopI2C(); // Issue stop signal
1B7A  EC1A     CALL 0x3834, 0
1B7C  F01C     NOP
100:           
101:               RtcNumberToString(dateTime.hour,dateTime.min,dateTime.tstring);
1B7E  C02D     MOVFF 0x2D, row
1B80  F069     NOP
1B82  C02C     MOVFF 0x2C, col
1B84  F06A     NOP
1B86  0E00     MOVLW 0x0
1B88  0100     MOVLB 0x0
1B8A  0100     MOVLB 0x0
1B8C  6F6C     MOVWF quotient, BANKED
1B8E  0E33     MOVLW 0x33
1B90  0100     MOVLB 0x0
1B92  6F6B     MOVWF counter, BANKED
1B94  ECDA     CALL 0x1BB4, 0
1B96  F00D     NOP
102:               RtcNumberToString(dateTime.mon,dateTime.mday,dateTime.dstring);
1B98  C030     MOVFF 0x30, row
1B9A  F069     NOP
1B9C  C02F     MOVFF 0x2F, col
1B9E  F06A     NOP
1BA0  0E00     MOVLW 0x0
1BA2  0100     MOVLB 0x0
1BA4  0100     MOVLB 0x0
1BA6  6F6C     MOVWF quotient, BANKED
1BA8  0E39     MOVLW 0x39
1BAA  0100     MOVLB 0x0
1BAC  6F6B     MOVWF counter, BANKED
1BAE  ECDA     CALL 0x1BB4, 0
1BB0  F00D     NOP
103:           
104:           }
1BB2  0012     RETURN 0
105:           
106:           void RTCSetTime(void){
107:               uint8_t i2cBuffer;
108:           
109:               StartI2C(); // Issue start signal
2752  ECEA     CALL 0x37D4, 0
2754  F01B     NOP
110:               TransmitI2C(DS1307_ID); // Device
2756  0100     MOVLB 0x0
2758  6F6C     MOVWF quotient, BANKED
275A  0ED0     MOVLW 0xD0
275C  0100     MOVLB 0x0
275E  0100     MOVLB 0x0
2760  6F63     MOVWF string_index, BANKED
2762  0100     MOVLB 0x0
2764  516C     MOVF quotient, W, BANKED
2766  EC14     CALL 0x2828, 0
2768  F014     NOP
111:               TransmitI2C(RTC_SECONDS); // Address
276A  0100     MOVLB 0x0
276C  6F6C     MOVWF quotient, BANKED
276E  0E00     MOVLW 0x0
2770  0100     MOVLB 0x0
2772  0100     MOVLB 0x0
2774  6F63     MOVWF string_index, BANKED
2776  0100     MOVLB 0x0
2778  516C     MOVF quotient, W, BANKED
277A  EC14     CALL 0x2828, 0
277C  F014     NOP
112:               i2cBuffer = dec_to_bcd(dateTime.sec);
277E  C02B     MOVFF dateTime, row
2780  F069     NOP
2782  EC3A     CALL 0x3474, 0
2784  F01A     NOP
2786  0100     MOVLB 0x0
2788  0100     MOVLB 0x0
278A  6F6D     MOVWF tstring, BANKED
113:               TransmitI2C(i2cBuffer); //seconds
278C  C06D     MOVFF tstring, string_index
278E  F063     NOP
2790  EC14     CALL 0x2828, 0
2792  F014     NOP
114:               i2cBuffer = dec_to_bcd(dateTime.min);
2794  C02C     MOVFF 0x2C, row
2796  F069     NOP
2798  EC3A     CALL 0x3474, 0
279A  F01A     NOP
279C  0100     MOVLB 0x0
279E  0100     MOVLB 0x0
27A0  6F6D     MOVWF tstring, BANKED
115:               TransmitI2C(i2cBuffer); //minutes
27A2  C06D     MOVFF tstring, string_index
27A4  F063     NOP
27A6  EC14     CALL 0x2828, 0
27A8  F014     NOP
116:               i2cBuffer = dec_to_bcd(dateTime.hour);
27AA  C02D     MOVFF 0x2D, row
27AC  F069     NOP
27AE  EC3A     CALL 0x3474, 0
27B0  F01A     NOP
27B2  0100     MOVLB 0x0
27B4  0100     MOVLB 0x0
27B6  6F6D     MOVWF tstring, BANKED
117:               TransmitI2C(i2cBuffer | 0x40); //hours
27B8  0100     MOVLB 0x0
27BA  0100     MOVLB 0x0
27BC  516D     MOVF tstring, W, BANKED
27BE  0940     IORLW 0x40
27C0  0100     MOVLB 0x0
27C2  0100     MOVLB 0x0
27C4  6F63     MOVWF string_index, BANKED
27C6  EC14     CALL 0x2828, 0
27C8  F014     NOP
118:               i2cBuffer = dec_to_bcd(dateTime.wday);
27CA  C02E     MOVFF 0x2E, row
27CC  F069     NOP
27CE  EC3A     CALL 0x3474, 0
27D0  F01A     NOP
27D2  0100     MOVLB 0x0
27D4  0100     MOVLB 0x0
27D6  6F6D     MOVWF tstring, BANKED
119:               TransmitI2C(i2cBuffer); //Day
27D8  C06D     MOVFF tstring, string_index
27DA  F063     NOP
27DC  EC14     CALL 0x2828, 0
27DE  F014     NOP
120:               i2cBuffer = dec_to_bcd(dateTime.mday);
27E0  C02F     MOVFF 0x2F, row
27E2  F069     NOP
27E4  EC3A     CALL 0x3474, 0
27E6  F01A     NOP
27E8  0100     MOVLB 0x0
27EA  0100     MOVLB 0x0
27EC  6F6D     MOVWF tstring, BANKED
121:               TransmitI2C(i2cBuffer); //Date
27EE  C06D     MOVFF tstring, string_index
27F0  F063     NOP
27F2  EC14     CALL 0x2828, 0
27F4  F014     NOP
122:               i2cBuffer = dec_to_bcd(dateTime.mon);
27F6  C030     MOVFF 0x30, row
27F8  F069     NOP
27FA  EC3A     CALL 0x3474, 0
27FC  F01A     NOP
27FE  0100     MOVLB 0x0
2800  0100     MOVLB 0x0
2802  6F6D     MOVWF tstring, BANKED
123:               TransmitI2C(i2cBuffer); //Month
2804  C06D     MOVFF tstring, string_index
2806  F063     NOP
2808  EC14     CALL 0x2828, 0
280A  F014     NOP
124:               i2cBuffer = dec_to_bcd(dateTime.year);
280C  C031     MOVFF 0x31, row
280E  F069     NOP
2810  EC3A     CALL 0x3474, 0
2812  F01A     NOP
2814  0100     MOVLB 0x0
2816  0100     MOVLB 0x0
2818  6F6D     MOVWF tstring, BANKED
125:               TransmitI2C(i2cBuffer); //Year
281A  C06D     MOVFF tstring, string_index
281C  F063     NOP
281E  EC14     CALL 0x2828, 0
2820  F014     NOP
126:               StopI2C();
2822  EC1A     CALL 0x3834, 0
2824  F01C     NOP
127:           
128:           }
2826  0012     RETURN 0
129:           
130:           void RTCGetControl(void){
131:           
132:               StartI2C(); // Issue start signal
133:               TransmitI2C(DS1307_ID); // Device
134:               TransmitI2C(RTC_CONTROL); // Address
135:               StartI2C(); // Issue repeated start signal
136:               TransmitI2C(0xD1); // Device plus R/W=1
137:               dateTime.cntrl = RecieveI2C(0); // Read seconds byte
138:               StopI2C(); // Issue stop signal
139:           
140:           }
141:           
142:           void RTCSetControl(uint8_t value){
143:           
144:               StartI2C(); // Issue start signal
145:               TransmitI2C(DS1307_ID); // Device
146:               TransmitI2C(RTC_CONTROL); // Address
147:               TransmitI2C(value); //seconds
148:               StopI2C();
149:           
150:           }
151:           
152:           void RTCGetTimer(void){
153:           
154:                StartI2C(); // Issue start signal
2DF4  ECEA     CALL 0x37D4, 0
2DF6  F01B     NOP
155:               TransmitI2C(DS1307_ID); // Device
2DF8  0100     MOVLB 0x0
2DFA  6F6D     MOVWF tstring, BANKED
2DFC  0ED0     MOVLW 0xD0
2DFE  0100     MOVLB 0x0
2E00  0100     MOVLB 0x0
2E02  6F63     MOVWF string_index, BANKED
2E04  0100     MOVLB 0x0
2E06  516D     MOVF tstring, W, BANKED
2E08  EC14     CALL 0x2828, 0
2E0A  F014     NOP
156:               TransmitI2C(RTC_RAM_START); // Address
2E0C  0100     MOVLB 0x0
2E0E  6F6D     MOVWF tstring, BANKED
2E10  0E08     MOVLW 0x8
2E12  0100     MOVLB 0x0
2E14  0100     MOVLB 0x0
2E16  6F63     MOVWF string_index, BANKED
2E18  0100     MOVLB 0x0
2E1A  516D     MOVF tstring, W, BANKED
2E1C  EC14     CALL 0x2828, 0
2E1E  F014     NOP
157:               StartI2C(); // Issue repeated start signal
2E20  ECEA     CALL 0x37D4, 0
2E22  F01B     NOP
158:               TransmitI2C(0xD1); // Device plus R/W=1
2E24  0100     MOVLB 0x0
2E26  6F6D     MOVWF tstring, BANKED
2E28  0ED1     MOVLW 0xD1
2E2A  0100     MOVLB 0x0
2E2C  0100     MOVLB 0x0
2E2E  6F63     MOVWF string_index, BANKED
2E30  0100     MOVLB 0x0
2E32  516D     MOVF tstring, W, BANKED
2E34  EC14     CALL 0x2828, 0
2E36  F014     NOP
159:               timer.min = RecieveI2C(1);
2E38  0100     MOVLB 0x0
2E3A  6F6D     MOVWF tstring, BANKED
2E3C  0E01     MOVLW 0x1
2E3E  0100     MOVLB 0x0
2E40  0100     MOVLB 0x0
2E42  6F63     MOVWF string_index, BANKED
2E44  0100     MOVLB 0x0
2E46  516D     MOVF tstring, W, BANKED
2E48  ECC6     CALL 0x238C, 0
2E4A  F011     NOP
2E4C  6E3F     MOVWF timer, ACCESS
160:               timer.hour = RecieveI2C(0);
2E4E  0100     MOVLB 0x0
2E50  6F6D     MOVWF tstring, BANKED
2E52  0E00     MOVLW 0x0
2E54  0100     MOVLB 0x0
2E56  0100     MOVLB 0x0
2E58  6F63     MOVWF string_index, BANKED
2E5A  0100     MOVLB 0x0
2E5C  516D     MOVF tstring, W, BANKED
2E5E  ECC6     CALL 0x238C, 0
2E60  F011     NOP
2E62  6E40     MOVWF 0x40, ACCESS
161:               StopI2C();
2E64  EC1A     CALL 0x3834, 0
2E66  F01C     NOP
162:           
163:               RtcNumberToString(timer.hour,timer.min,timer.string);
2E68  C040     MOVFF 0x40, row
2E6A  F069     NOP
2E6C  C03F     MOVFF timer, col
2E6E  F06A     NOP
2E70  0E00     MOVLW 0x0
2E72  0100     MOVLB 0x0
2E74  0100     MOVLB 0x0
2E76  6F6C     MOVWF quotient, BANKED
2E78  0E41     MOVLW 0x41
2E7A  0100     MOVLB 0x0
2E7C  6F6B     MOVWF counter, BANKED
2E7E  ECDA     CALL 0x1BB4, 0
2E80  F00D     NOP
164:               //TimerString();
165:           }
2E82  0012     RETURN 0
166:           
167:           void RTCSaveTimer(void){
168:           
169:               StartI2C(); // Issue start signal
363A  ECEA     CALL 0x37D4, 0
363C  F01B     NOP
170:               TransmitI2C(DS1307_ID); // Device
363E  0100     MOVLB 0x0
3640  6F67     MOVWF quotient, BANKED
3642  0ED0     MOVLW 0xD0
3644  0100     MOVLB 0x0
3646  0100     MOVLB 0x0
3648  6F63     MOVWF string_index, BANKED
364A  0100     MOVLB 0x0
364C  5167     MOVF quotient, W, BANKED
364E  EC14     CALL 0x2828, 0
3650  F014     NOP
171:               TransmitI2C(RTC_RAM_START); // Address
3652  0100     MOVLB 0x0
3654  6F67     MOVWF quotient, BANKED
3656  0E08     MOVLW 0x8
3658  0100     MOVLB 0x0
365A  0100     MOVLB 0x0
365C  6F63     MOVWF string_index, BANKED
365E  0100     MOVLB 0x0
3660  5167     MOVF quotient, W, BANKED
3662  EC14     CALL 0x2828, 0
3664  F014     NOP
172:               TransmitI2C(timer.min);
3666  C03F     MOVFF timer, string_index
3668  F063     NOP
366A  EC14     CALL 0x2828, 0
366C  F014     NOP
173:               TransmitI2C(timer.hour);
366E  C040     MOVFF 0x40, string_index
3670  F063     NOP
3672  EC14     CALL 0x2828, 0
3674  F014     NOP
174:               StopI2C();
3676  EC1A     CALL 0x3834, 0
3678  F01C     NOP
175:           }
367A  0012     RETURN 0
176:           
177:           void RtcNumberToString(uint8_t number1, uint8_t number2,char *string){
178:           
179:               if (((number1) / 10) > 0) {
1BB4  0100     MOVLB 0x0
1BB6  0100     MOVLB 0x0
1BB8  C069     MOVFF row, __pcstackBANK0
1BBA  F060     NOP
1BBC  0100     MOVLB 0x0
1BBE  0100     MOVLB 0x0
1BC0  6B61     CLRF col, BANKED
1BC2  0E00     MOVLW 0x0
1BC4  0100     MOVLB 0x0
1BC6  0100     MOVLB 0x0
1BC8  6F63     MOVWF string_index, BANKED
1BCA  0E0A     MOVLW 0xA
1BCC  0100     MOVLB 0x0
1BCE  6F62     MOVWF c, BANKED
1BD0  EC3B     CALL 0x2276, 0
1BD2  F011     NOP
1BD4  0100     MOVLB 0x0
1BD6  0100     MOVLB 0x0
1BD8  5161     MOVF col, W, BANKED
1BDA  0A80     XORLW 0x80
1BDC  0F80     ADDLW 0x80
1BDE  0E01     MOVLW 0x1
1BE0  B4D8     BTFSC STATUS, 2, ACCESS
1BE2  0100     MOVLB 0x0
1BE4  5D60     SUBWF __pcstackBANK0, W, BANKED
1BE6  A0D8     BTFSS STATUS, 0, ACCESS
1BE8  D037     BRA 0x1C58
180:                   if (number1 == 11) {
1BEA  0100     MOVLB 0x0
1BEC  0100     MOVLB 0x0
1BEE  5169     MOVF row, W, BANKED
1BF0  0A0B     XORLW 0xB
1BF2  A4D8     BTFSS STATUS, 2, ACCESS
1BF4  D011     BRA 0x1C18
181:                       string[0] = 34;// '"'
1BF6  C06B     MOVFF counter, FSR2L
1BF8  FFD9     NOP
1BFA  C06C     MOVFF quotient, FSR2H
1BFC  FFDA     NOP
1BFE  0E22     MOVLW 0x22
1C00  6EDF     MOVWF INDF2, ACCESS
182:                       string[1] = 34;// '"'
1C02  0100     MOVLB 0x0
1C04  EE20     LFSR 2, 0x1
1C06  F001     NOP
1C08  0100     MOVLB 0x0
1C0A  516B     MOVF counter, W, BANKED
1C0C  26D9     ADDWF FSR2L, F, ACCESS
1C0E  0100     MOVLB 0x0
1C10  516C     MOVF quotient, W, BANKED
1C12  22DA     ADDWFC FSR2H, F, ACCESS
1C14  0E22     MOVLW 0x22
1C16  D043     BRA 0x1C9E
183:                   } else {
184:                       string[0] = 33;// '!'
1C18  C06B     MOVFF counter, FSR2L
1C1A  FFD9     NOP
1C1C  C06C     MOVFF quotient, FSR2H
1C1E  FFDA     NOP
1C20  0E21     MOVLW 0x21
1C22  6EDF     MOVWF INDF2, ACCESS
185:                       string[1] = (number1 % 10) + 48;// '0'
1C24  0100     MOVLB 0x0
1C26  EE20     LFSR 2, 0x1
1C28  F001     NOP
1C2A  0100     MOVLB 0x0
1C2C  516B     MOVF counter, W, BANKED
1C2E  26D9     ADDWF FSR2L, F, ACCESS
1C30  0100     MOVLB 0x0
1C32  516C     MOVF quotient, W, BANKED
1C34  22DA     ADDWFC FSR2H, F, ACCESS
1C36  0100     MOVLB 0x0
1C38  0100     MOVLB 0x0
1C3A  C069     MOVFF row, __pcstackBANK0
1C3C  F060     NOP
1C3E  0100     MOVLB 0x0
1C40  0100     MOVLB 0x0
1C42  6B61     CLRF col, BANKED
1C44  0E00     MOVLW 0x0
1C46  0100     MOVLB 0x0
1C48  0100     MOVLB 0x0
1C4A  6F63     MOVWF string_index, BANKED
1C4C  0E0A     MOVLW 0xA
1C4E  0100     MOVLB 0x0
1C50  6F62     MOVWF c, BANKED
1C52  ECC5     CALL 0x258A, 0
1C54  F012     NOP
1C56  D01F     BRA 0x1C96
186:                   }
187:               } else {
188:                   string[0] = 32;// ' '
1C58  C06B     MOVFF counter, FSR2L
1C5A  FFD9     NOP
1C5C  C06C     MOVFF quotient, FSR2H
1C5E  FFDA     NOP
1C60  0E20     MOVLW 0x20
1C62  6EDF     MOVWF INDF2, ACCESS
189:                   string[1] = (number1 % 10) + 48;// '0'
1C64  0100     MOVLB 0x0
1C66  EE20     LFSR 2, 0x1
1C68  F001     NOP
1C6A  0100     MOVLB 0x0
1C6C  516B     MOVF counter, W, BANKED
1C6E  26D9     ADDWF FSR2L, F, ACCESS
1C70  0100     MOVLB 0x0
1C72  516C     MOVF quotient, W, BANKED
1C74  22DA     ADDWFC FSR2H, F, ACCESS
1C76  0100     MOVLB 0x0
1C78  0100     MOVLB 0x0
1C7A  C069     MOVFF row, __pcstackBANK0
1C7C  F060     NOP
1C7E  0100     MOVLB 0x0
1C80  0100     MOVLB 0x0
1C82  6B61     CLRF col, BANKED
1C84  0E00     MOVLW 0x0
1C86  0100     MOVLB 0x0
1C88  0100     MOVLB 0x0
1C8A  6F63     MOVWF string_index, BANKED
1C8C  0E0A     MOVLW 0xA
1C8E  0100     MOVLB 0x0
1C90  6F62     MOVWF c, BANKED
1C92  ECC5     CALL 0x258A, 0
1C94  F012     NOP
1C96  0100     MOVLB 0x0
1C98  0100     MOVLB 0x0
1C9A  5160     MOVF __pcstackBANK0, W, BANKED
1C9C  0F30     ADDLW 0x30
1C9E  6EDF     MOVWF INDF2, ACCESS
190:               }
191:               string[3] = (number2 / 10) + 48;// '0'
1CA0  0100     MOVLB 0x0
1CA2  EE20     LFSR 2, 0x3
1CA4  F003     NOP
1CA6  0100     MOVLB 0x0
1CA8  516B     MOVF counter, W, BANKED
1CAA  26D9     ADDWF FSR2L, F, ACCESS
1CAC  0100     MOVLB 0x0
1CAE  516C     MOVF quotient, W, BANKED
1CB0  22DA     ADDWFC FSR2H, F, ACCESS
1CB2  0100     MOVLB 0x0
1CB4  0100     MOVLB 0x0
1CB6  C06A     MOVFF col, __pcstackBANK0
1CB8  F060     NOP
1CBA  0100     MOVLB 0x0
1CBC  0100     MOVLB 0x0
1CBE  6B61     CLRF col, BANKED
1CC0  0E00     MOVLW 0x0
1CC2  0100     MOVLB 0x0
1CC4  0100     MOVLB 0x0
1CC6  6F63     MOVWF string_index, BANKED
1CC8  0E0A     MOVLW 0xA
1CCA  0100     MOVLB 0x0
1CCC  6F62     MOVWF c, BANKED
1CCE  EC3B     CALL 0x2276, 0
1CD0  F011     NOP
1CD2  0100     MOVLB 0x0
1CD4  0100     MOVLB 0x0
1CD6  5160     MOVF __pcstackBANK0, W, BANKED
1CD8  0F30     ADDLW 0x30
1CDA  6EDF     MOVWF INDF2, ACCESS
192:               string[4] = (number2 % 10) + 48;// '0'
1CDC  0100     MOVLB 0x0
1CDE  EE20     LFSR 2, 0x4
1CE0  F004     NOP
1CE2  0100     MOVLB 0x0
1CE4  516B     MOVF counter, W, BANKED
1CE6  26D9     ADDWF FSR2L, F, ACCESS
1CE8  0100     MOVLB 0x0
1CEA  516C     MOVF quotient, W, BANKED
1CEC  22DA     ADDWFC FSR2H, F, ACCESS
1CEE  0100     MOVLB 0x0
1CF0  0100     MOVLB 0x0
1CF2  C06A     MOVFF col, __pcstackBANK0
1CF4  F060     NOP
1CF6  0100     MOVLB 0x0
1CF8  0100     MOVLB 0x0
1CFA  6B61     CLRF col, BANKED
1CFC  0E00     MOVLW 0x0
1CFE  0100     MOVLB 0x0
1D00  0100     MOVLB 0x0
1D02  6F63     MOVWF string_index, BANKED
1D04  0E0A     MOVLW 0xA
1D06  0100     MOVLB 0x0
1D08  6F62     MOVWF c, BANKED
1D0A  ECC5     CALL 0x258A, 0
1D0C  F012     NOP
1D0E  0100     MOVLB 0x0
1D10  0100     MOVLB 0x0
1D12  5160     MOVF __pcstackBANK0, W, BANKED
1D14  0F30     ADDLW 0x30
1D16  6EDF     MOVWF INDF2, ACCESS
193:               string[5] = '\0';
1D18  0100     MOVLB 0x0
1D1A  EE20     LFSR 2, 0x5
1D1C  F005     NOP
1D1E  0100     MOVLB 0x0
1D20  516B     MOVF counter, W, BANKED
1D22  26D9     ADDWF FSR2L, F, ACCESS
1D24  0100     MOVLB 0x0
1D26  516C     MOVF quotient, W, BANKED
1D28  22DA     ADDWFC FSR2H, F, ACCESS
1D2A  0E00     MOVLW 0x0
1D2C  6EDF     MOVWF INDF2, ACCESS
194:           }
1D2E  0012     RETURN 0
195:           
196:           //void TimeString(void){
197:           //
198:           //    if (((dateTime.hour) / 10) > 0) {
199:           //        if (dateTime.hour == 11) {
200:           //            dateTime.tstring[0] = 34;// '"'
201:           //            dateTime.tstring[1] = 34;// '"'
202:           //        } else {
203:           //            dateTime.tstring[0] = 33;// '!'
204:           //            dateTime.tstring[1] = (dateTime.hour % 10) + 48;// '0'
205:           //        }
206:           //    } else {
207:           //        dateTime.tstring[0] = 32;// ' '
208:           //        dateTime.tstring[1] = (dateTime.hour % 10) + 48;// '0'
209:           //    }
210:           //    //dateTime.tstring[2] = 58;// ':'
211:           //    dateTime.tstring[3] = (dateTime.min / 10) + 48;// '0'
212:           //    dateTime.tstring[4] = (dateTime.min % 10) + 48;// '0'
213:           //    dateTime.tstring[5] = '\0';
214:           //
215:           //} // string length = 5
216:           //
217:           //void TimerString(void){
218:           //    if (((timer.hour) / 10) > 0) {
219:           //        timer.string[0] = '!';
220:           //    }else timer.string[0] = ' ';
221:           //   timer.string[1] = (timer.hour % 10) + '0';
222:           //   //timer.string[2] = ':';
223:           //   timer.string[3] = (timer.min / 10) + '0';
224:           //   timer.string[4] = (timer.min % 10) + '0';
225:           //   timer.string[5] = '\0';
226:           //
227:           //} // string length = 5
228:           
229:           char* DateStringLong(void){
230:           
231:               uint8_t tstring[16];
232:               unsigned char number1, number2;
233:               int length;
234:           
235:               //RTCGetDateTime();
236:               // Blank the string
237:               tstring[0] = '\0';
011C  0100     MOVLB 0x0
011E  6F6B     MOVWF counter, BANKED
0120  0E00     MOVLW 0x0
0122  0100     MOVLB 0x0
0124  0100     MOVLB 0x0
0126  6F6D     MOVWF tstring, BANKED
0128  0100     MOVLB 0x0
012A  516B     MOVF counter, W, BANKED
238:           
239:               switch (dateTime.wday) {
012C  D085     BRA 0x238
0238  502E     MOVF 0x2E, W, ACCESS
023A  0A01     XORLW 0x1
023C  B4D8     BTFSC STATUS, 2, ACCESS
023E  D777     BRA 0x12E
0240  0A03     XORLW 0x3
0242  B4D8     BTFSC STATUS, 2, ACCESS
0244  D787     BRA 0x154
0246  0A01     XORLW 0x1
0248  B4D8     BTFSC STATUS, 2, ACCESS
024A  D797     BRA 0x17A
024C  0A07     XORLW 0x7
024E  B4D8     BTFSC STATUS, 2, ACCESS
0250  D7A7     BRA 0x1A0
0252  0A01     XORLW 0x1
0254  B4D8     BTFSC STATUS, 2, ACCESS
0256  D7B7     BRA 0x1C6
0258  0A03     XORLW 0x3
025A  B4D8     BTFSC STATUS, 2, ACCESS
025C  D7C7     BRA 0x1EC
025E  0A01     XORLW 0x1
0260  B4D8     BTFSC STATUS, 2, ACCESS
0262  D7D7     BRA 0x212
0264  D0E4     BRA 0x42E
240:                   case 1: strcat(tstring, "MON ");
012E  0100     MOVLB 0x0
0130  0E00     MOVLW 0x0
0132  0100     MOVLB 0x0
0134  0100     MOVLB 0x0
0136  6F61     MOVWF col, BANKED
0138  0100     MOVLB 0x0
013A  0E6D     MOVLW 0x6D
013C  0100     MOVLB 0x0
013E  6F60     MOVWF __pcstackBANK0, BANKED
0140  0E3F     MOVLW 0x3F
0142  0100     MOVLB 0x0
0144  0100     MOVLB 0x0
0146  6F63     MOVWF string_index, BANKED
0148  0E6B     MOVLW 0x6B
014A  0100     MOVLB 0x0
014C  6F62     MOVWF c, BANKED
014E  EC48     CALL 0x3290, 0
0150  F019     NOP
241:                       break;
0152  D16D     BRA 0x42E
242:                   case 2: strcat(tstring, "TUE ");
0154  0100     MOVLB 0x0
0156  0E00     MOVLW 0x0
0158  0100     MOVLB 0x0
015A  0100     MOVLB 0x0
015C  6F61     MOVWF col, BANKED
015E  0100     MOVLB 0x0
0160  0E6D     MOVLW 0x6D
0162  0100     MOVLB 0x0
0164  6F60     MOVWF __pcstackBANK0, BANKED
0166  0E3F     MOVLW 0x3F
0168  0100     MOVLB 0x0
016A  0100     MOVLB 0x0
016C  6F63     MOVWF string_index, BANKED
016E  0E57     MOVLW 0x57
0170  0100     MOVLB 0x0
0172  6F62     MOVWF c, BANKED
0174  EC48     CALL 0x3290, 0
0176  F019     NOP
243:                       break;
0178  D15A     BRA 0x42E
244:                   case 3: strcat(tstring, "WED ");
017A  0100     MOVLB 0x0
017C  0E00     MOVLW 0x0
017E  0100     MOVLB 0x0
0180  0100     MOVLB 0x0
0182  6F61     MOVWF col, BANKED
0184  0100     MOVLB 0x0
0186  0E6D     MOVLW 0x6D
0188  0100     MOVLB 0x0
018A  6F60     MOVWF __pcstackBANK0, BANKED
018C  0E3F     MOVLW 0x3F
018E  0100     MOVLB 0x0
0190  0100     MOVLB 0x0
0192  6F63     MOVWF string_index, BANKED
0194  0E52     MOVLW 0x52
0196  0100     MOVLB 0x0
0198  6F62     MOVWF c, BANKED
019A  EC48     CALL 0x3290, 0
019C  F019     NOP
245:                       break;
019E  D147     BRA 0x42E
246:                   case 4: strcat(tstring, "THU ");
01A0  0100     MOVLB 0x0
01A2  0E00     MOVLW 0x0
01A4  0100     MOVLB 0x0
01A6  0100     MOVLB 0x0
01A8  6F61     MOVWF col, BANKED
01AA  0100     MOVLB 0x0
01AC  0E6D     MOVLW 0x6D
01AE  0100     MOVLB 0x0
01B0  6F60     MOVWF __pcstackBANK0, BANKED
01B2  0E3F     MOVLW 0x3F
01B4  0100     MOVLB 0x0
01B6  0100     MOVLB 0x0
01B8  6F63     MOVWF string_index, BANKED
01BA  0E89     MOVLW 0x89
01BC  0100     MOVLB 0x0
01BE  6F62     MOVWF c, BANKED
01C0  EC48     CALL 0x3290, 0
01C2  F019     NOP
247:                       break;
01C4  D134     BRA 0x42E
248:                   case 5: strcat(tstring, "FRI ");
01C6  0100     MOVLB 0x0
01C8  0E00     MOVLW 0x0
01CA  0100     MOVLB 0x0
01CC  0100     MOVLB 0x0
01CE  6F61     MOVWF col, BANKED
01D0  0100     MOVLB 0x0
01D2  0E6D     MOVLW 0x6D
01D4  0100     MOVLB 0x0
01D6  6F60     MOVWF __pcstackBANK0, BANKED
01D8  0E3F     MOVLW 0x3F
01DA  0100     MOVLB 0x0
01DC  0100     MOVLB 0x0
01DE  6F63     MOVWF string_index, BANKED
01E0  0E61     MOVLW 0x61
01E2  0100     MOVLB 0x0
01E4  6F62     MOVWF c, BANKED
01E6  EC48     CALL 0x3290, 0
01E8  F019     NOP
249:                       break;
01EA  D121     BRA 0x42E
250:                   case 6: strcat(tstring, "SAT ");
01EC  0100     MOVLB 0x0
01EE  0E00     MOVLW 0x0
01F0  0100     MOVLB 0x0
01F2  0100     MOVLB 0x0
01F4  6F61     MOVWF col, BANKED
01F6  0100     MOVLB 0x0
01F8  0E6D     MOVLW 0x6D
01FA  0100     MOVLB 0x0
01FC  6F60     MOVWF __pcstackBANK0, BANKED
01FE  0E3F     MOVLW 0x3F
0200  0100     MOVLB 0x0
0202  0100     MOVLB 0x0
0204  6F63     MOVWF string_index, BANKED
0206  0E7F     MOVLW 0x7F
0208  0100     MOVLB 0x0
020A  6F62     MOVWF c, BANKED
020C  EC48     CALL 0x3290, 0
020E  F019     NOP
251:                       break;
0210  D10E     BRA 0x42E
252:                   case 7: strcat(tstring, "SUN ");
0212  0100     MOVLB 0x0
0214  0E00     MOVLW 0x0
0216  0100     MOVLB 0x0
0218  0100     MOVLB 0x0
021A  6F61     MOVWF col, BANKED
021C  0100     MOVLB 0x0
021E  0E6D     MOVLW 0x6D
0220  0100     MOVLB 0x0
0222  6F60     MOVWF __pcstackBANK0, BANKED
0224  0E3F     MOVLW 0x3F
0226  0100     MOVLB 0x0
0228  0100     MOVLB 0x0
022A  6F63     MOVWF string_index, BANKED
022C  0E70     MOVLW 0x70
022E  0100     MOVLB 0x0
0230  6F62     MOVWF c, BANKED
0232  EC48     CALL 0x3290, 0
0234  F019     NOP
253:                       break;
0236  D0FB     BRA 0x42E
254:               }
255:           
256:               switch (dateTime.mon) {
042E  5030     MOVF 0x30, W, ACCESS
0430  0A01     XORLW 0x1
0432  B4D8     BTFSC STATUS, 2, ACCESS
0434  D718     BRA 0x266
0436  0A03     XORLW 0x3
0438  B4D8     BTFSC STATUS, 2, ACCESS
043A  D728     BRA 0x28C
043C  0A01     XORLW 0x1
043E  B4D8     BTFSC STATUS, 2, ACCESS
0440  D738     BRA 0x2B2
0442  0A07     XORLW 0x7
0444  B4D8     BTFSC STATUS, 2, ACCESS
0446  D748     BRA 0x2D8
0448  0A01     XORLW 0x1
044A  B4D8     BTFSC STATUS, 2, ACCESS
044C  D758     BRA 0x2FE
044E  0A03     XORLW 0x3
0450  B4D8     BTFSC STATUS, 2, ACCESS
0452  D768     BRA 0x324
0454  0A01     XORLW 0x1
0456  B4D8     BTFSC STATUS, 2, ACCESS
0458  D778     BRA 0x34A
045A  0A0F     XORLW 0xF
045C  B4D8     BTFSC STATUS, 2, ACCESS
045E  D788     BRA 0x370
0460  0A01     XORLW 0x1
0462  B4D8     BTFSC STATUS, 2, ACCESS
0464  D798     BRA 0x396
0466  0A03     XORLW 0x3
0468  B4D8     BTFSC STATUS, 2, ACCESS
046A  D7A8     BRA 0x3BC
046C  0A01     XORLW 0x1
046E  B4D8     BTFSC STATUS, 2, ACCESS
0470  D7B8     BRA 0x3E2
0472  0A07     XORLW 0x7
0474  B4D8     BTFSC STATUS, 2, ACCESS
0476  D7C8     BRA 0x408
257:                   case 1: strcat(tstring, "JAN ");
0266  0100     MOVLB 0x0
0268  0E00     MOVLW 0x0
026A  0100     MOVLB 0x0
026C  0100     MOVLB 0x0
026E  6F61     MOVWF col, BANKED
0270  0100     MOVLB 0x0
0272  0E6D     MOVLW 0x6D
0274  0100     MOVLB 0x0
0276  6F60     MOVWF __pcstackBANK0, BANKED
0278  0E3F     MOVLW 0x3F
027A  0100     MOVLB 0x0
027C  0100     MOVLB 0x0
027E  6F63     MOVWF string_index, BANKED
0280  0E66     MOVLW 0x66
0282  0100     MOVLB 0x0
0284  6F62     MOVWF c, BANKED
0286  EC48     CALL 0x3290, 0
0288  F019     NOP
258:                       break;
028A  D0F6     BRA 0x478
259:                   case 2: strcat(tstring, "FEB ");
028C  0100     MOVLB 0x0
028E  0E00     MOVLW 0x0
0290  0100     MOVLB 0x0
0292  0100     MOVLB 0x0
0294  6F61     MOVWF col, BANKED
0296  0100     MOVLB 0x0
0298  0E6D     MOVLW 0x6D
029A  0100     MOVLB 0x0
029C  6F60     MOVWF __pcstackBANK0, BANKED
029E  0E3F     MOVLW 0x3F
02A0  0100     MOVLB 0x0
02A2  0100     MOVLB 0x0
02A4  6F63     MOVWF string_index, BANKED
02A6  0E48     MOVLW 0x48
02A8  0100     MOVLB 0x0
02AA  6F62     MOVWF c, BANKED
02AC  EC48     CALL 0x3290, 0
02AE  F019     NOP
260:                       break;
02B0  D0E3     BRA 0x478
261:                   case 3: strcat(tstring, "MAR ");
02B2  0100     MOVLB 0x0
02B4  0E00     MOVLW 0x0
02B6  0100     MOVLB 0x0
02B8  0100     MOVLB 0x0
02BA  6F61     MOVWF col, BANKED
02BC  0100     MOVLB 0x0
02BE  0E6D     MOVLW 0x6D
02C0  0100     MOVLB 0x0
02C2  6F60     MOVWF __pcstackBANK0, BANKED
02C4  0E3F     MOVLW 0x3F
02C6  0100     MOVLB 0x0
02C8  0100     MOVLB 0x0
02CA  6F63     MOVWF string_index, BANKED
02CC  0E75     MOVLW 0x75
02CE  0100     MOVLB 0x0
02D0  6F62     MOVWF c, BANKED
02D2  EC48     CALL 0x3290, 0
02D4  F019     NOP
262:                       break;
02D6  D0D0     BRA 0x478
263:                   case 4: strcat(tstring, "APR ");
02D8  0100     MOVLB 0x0
02DA  0E00     MOVLW 0x0
02DC  0100     MOVLB 0x0
02DE  0100     MOVLB 0x0
02E0  6F61     MOVWF col, BANKED
02E2  0100     MOVLB 0x0
02E4  0E6D     MOVLW 0x6D
02E6  0100     MOVLB 0x0
02E8  6F60     MOVWF __pcstackBANK0, BANKED
02EA  0E3F     MOVLW 0x3F
02EC  0100     MOVLB 0x0
02EE  0100     MOVLB 0x0
02F0  6F63     MOVWF string_index, BANKED
02F2  0E7A     MOVLW 0x7A
02F4  0100     MOVLB 0x0
02F6  6F62     MOVWF c, BANKED
02F8  EC48     CALL 0x3290, 0
02FA  F019     NOP
264:                       break;
02FC  D0BD     BRA 0x478
265:                   case 5: strcat(tstring, "MAY ");
02FE  0100     MOVLB 0x0
0300  0E00     MOVLW 0x0
0302  0100     MOVLB 0x0
0304  0100     MOVLB 0x0
0306  6F61     MOVWF col, BANKED
0308  0100     MOVLB 0x0
030A  0E6D     MOVLW 0x6D
030C  0100     MOVLB 0x0
030E  6F60     MOVWF __pcstackBANK0, BANKED
0310  0E3F     MOVLW 0x3F
0312  0100     MOVLB 0x0
0314  0100     MOVLB 0x0
0316  6F63     MOVWF string_index, BANKED
0318  0E93     MOVLW 0x93
031A  0100     MOVLB 0x0
031C  6F62     MOVWF c, BANKED
031E  EC48     CALL 0x3290, 0
0320  F019     NOP
266:                       break;
0322  D0AA     BRA 0x478
267:                   case 6: strcat(tstring, "JUNE ");
0324  0100     MOVLB 0x0
0326  0E00     MOVLW 0x0
0328  0100     MOVLB 0x0
032A  0100     MOVLB 0x0
032C  6F61     MOVWF col, BANKED
032E  0100     MOVLB 0x0
0330  0E6D     MOVLW 0x6D
0332  0100     MOVLB 0x0
0334  6F60     MOVWF __pcstackBANK0, BANKED
0336  0E3F     MOVLW 0x3F
0338  0100     MOVLB 0x0
033A  0100     MOVLB 0x0
033C  6F63     MOVWF string_index, BANKED
033E  0E1D     MOVLW 0x1D
0340  0100     MOVLB 0x0
0342  6F62     MOVWF c, BANKED
0344  EC48     CALL 0x3290, 0
0346  F019     NOP
268:                       break;
0348  D097     BRA 0x478
269:                   case 7: strcat(tstring, "JULY ");
034A  0100     MOVLB 0x0
034C  0E00     MOVLW 0x0
034E  0100     MOVLB 0x0
0350  0100     MOVLB 0x0
0352  6F61     MOVWF col, BANKED
0354  0100     MOVLB 0x0
0356  0E6D     MOVLW 0x6D
0358  0100     MOVLB 0x0
035A  6F60     MOVWF __pcstackBANK0, BANKED
035C  0E3F     MOVLW 0x3F
035E  0100     MOVLB 0x0
0360  0100     MOVLB 0x0
0362  6F63     MOVWF string_index, BANKED
0364  0E29     MOVLW 0x29
0366  0100     MOVLB 0x0
0368  6F62     MOVWF c, BANKED
036A  EC48     CALL 0x3290, 0
036C  F019     NOP
270:                       break;
036E  D084     BRA 0x478
271:                   case 8: strcat(tstring, "AUG ");
0370  0100     MOVLB 0x0
0372  0E00     MOVLW 0x0
0374  0100     MOVLB 0x0
0376  0100     MOVLB 0x0
0378  6F61     MOVWF col, BANKED
037A  0100     MOVLB 0x0
037C  0E6D     MOVLW 0x6D
037E  0100     MOVLB 0x0
0380  6F60     MOVWF __pcstackBANK0, BANKED
0382  0E3F     MOVLW 0x3F
0384  0100     MOVLB 0x0
0386  0100     MOVLB 0x0
0388  6F63     MOVWF string_index, BANKED
038A  0E5C     MOVLW 0x5C
038C  0100     MOVLB 0x0
038E  6F62     MOVWF c, BANKED
0390  EC48     CALL 0x3290, 0
0392  F019     NOP
272:                       break;
0394  D071     BRA 0x478
273:                   case 9: strcat(tstring, "SEPT ");
0396  0100     MOVLB 0x0
0398  0E00     MOVLW 0x0
039A  0100     MOVLB 0x0
039C  0100     MOVLB 0x0
039E  6F61     MOVWF col, BANKED
03A0  0100     MOVLB 0x0
03A2  0E6D     MOVLW 0x6D
03A4  0100     MOVLB 0x0
03A6  6F60     MOVWF __pcstackBANK0, BANKED
03A8  0E3F     MOVLW 0x3F
03AA  0100     MOVLB 0x0
03AC  0100     MOVLB 0x0
03AE  6F63     MOVWF string_index, BANKED
03B0  0E23     MOVLW 0x23
03B2  0100     MOVLB 0x0
03B4  6F62     MOVWF c, BANKED
03B6  EC48     CALL 0x3290, 0
03B8  F019     NOP
274:                       break;
03BA  D05E     BRA 0x478
275:                   case 10: strcat(tstring, "OCT ");
03BC  0100     MOVLB 0x0
03BE  0E00     MOVLW 0x0
03C0  0100     MOVLB 0x0
03C2  0100     MOVLB 0x0
03C4  6F61     MOVWF col, BANKED
03C6  0100     MOVLB 0x0
03C8  0E6D     MOVLW 0x6D
03CA  0100     MOVLB 0x0
03CC  6F60     MOVWF __pcstackBANK0, BANKED
03CE  0E3F     MOVLW 0x3F
03D0  0100     MOVLB 0x0
03D2  0100     MOVLB 0x0
03D4  6F63     MOVWF string_index, BANKED
03D6  0E84     MOVLW 0x84
03D8  0100     MOVLB 0x0
03DA  6F62     MOVWF c, BANKED
03DC  EC48     CALL 0x3290, 0
03DE  F019     NOP
276:                       break;
03E0  D04B     BRA 0x478
277:                   case 11: strcat(tstring, "NOV ");
03E2  0100     MOVLB 0x0
03E4  0E00     MOVLW 0x0
03E6  0100     MOVLB 0x0
03E8  0100     MOVLB 0x0
03EA  6F61     MOVWF col, BANKED
03EC  0100     MOVLB 0x0
03EE  0E6D     MOVLW 0x6D
03F0  0100     MOVLB 0x0
03F2  6F60     MOVWF __pcstackBANK0, BANKED
03F4  0E3F     MOVLW 0x3F
03F6  0100     MOVLB 0x0
03F8  0100     MOVLB 0x0
03FA  6F63     MOVWF string_index, BANKED
03FC  0E8E     MOVLW 0x8E
03FE  0100     MOVLB 0x0
0400  6F62     MOVWF c, BANKED
0402  EC48     CALL 0x3290, 0
0404  F019     NOP
278:                       break;
0406  D038     BRA 0x478
279:                   case 12: strcat(tstring, "DEC ");
0408  0100     MOVLB 0x0
040A  0E00     MOVLW 0x0
040C  0100     MOVLB 0x0
040E  0100     MOVLB 0x0
0410  6F61     MOVWF col, BANKED
0412  0100     MOVLB 0x0
0414  0E6D     MOVLW 0x6D
0416  0100     MOVLB 0x0
0418  6F60     MOVWF __pcstackBANK0, BANKED
041A  0E3F     MOVLW 0x3F
041C  0100     MOVLB 0x0
041E  0100     MOVLB 0x0
0420  6F63     MOVWF string_index, BANKED
0422  0E4D     MOVLW 0x4D
0424  0100     MOVLB 0x0
0426  6F62     MOVWF c, BANKED
0428  EC48     CALL 0x3290, 0
042A  F019     NOP
280:                       break;
042C  D025     BRA 0x478
281:               }
282:           
283:               if (dateTime.mday < 10) number1 = 0;
0478  0E0A     MOVLW 0xA
047A  602F     CPFSLT 0x2F, ACCESS
047C  D009     BRA 0x490
047E  0100     MOVLB 0x0
0480  6F6B     MOVWF counter, BANKED
0482  0E00     MOVLW 0x0
0484  0100     MOVLB 0x0
0486  0100     MOVLB 0x0
0488  6F80     MOVWF max, BANKED
048A  0100     MOVLB 0x0
048C  516B     MOVF counter, W, BANKED
048E  D015     BRA 0x4BA
284:               else number1 = dateTime.mday / 10;
0490  0100     MOVLB 0x0
0492  C02F     MOVFF 0x2F, __pcstackBANK0
0494  F060     NOP
0496  0100     MOVLB 0x0
0498  0100     MOVLB 0x0
049A  6B61     CLRF col, BANKED
049C  0E00     MOVLW 0x0
049E  0100     MOVLB 0x0
04A0  0100     MOVLB 0x0
04A2  6F63     MOVWF string_index, BANKED
04A4  0E0A     MOVLW 0xA
04A6  0100     MOVLB 0x0
04A8  6F62     MOVWF c, BANKED
04AA  EC3B     CALL 0x2276, 0
04AC  F011     NOP
04AE  0100     MOVLB 0x0
04B0  0100     MOVLB 0x0
04B2  5160     MOVF __pcstackBANK0, W, BANKED
04B4  0100     MOVLB 0x0
04B6  0100     MOVLB 0x0
04B8  6F80     MOVWF max, BANKED
285:           
286:               number2 = dateTime.mday - (number1 * 10);
04BA  0100     MOVLB 0x0
04BC  0100     MOVLB 0x0
04BE  5180     MOVF max, W, BANKED
04C0  0D0A     MULLW 0xA
04C2  50F3     MOVF PRODL, W, ACCESS
04C4  0800     SUBLW 0x0
04C6  242F     ADDWF 0x2F, W, ACCESS
04C8  0100     MOVLB 0x0
04CA  0100     MOVLB 0x0
04CC  6F7D     MOVWF istring, BANKED
287:           
288:               if (number1 > 0) {
04CE  0100     MOVLB 0x0
04D0  0100     MOVLB 0x0
04D2  5180     MOVF max, W, BANKED
04D4  B4D8     BTFSC STATUS, 2, ACCESS
04D6  D03A     BRA 0x54C
289:                   length = strlen(tstring);
04D8  0100     MOVLB 0x0
04DA  0E00     MOVLW 0x0
04DC  0100     MOVLB 0x0
04DE  0100     MOVLB 0x0
04E0  6F61     MOVWF col, BANKED
04E2  0100     MOVLB 0x0
04E4  0E6D     MOVLW 0x6D
04E6  0100     MOVLB 0x0
04E8  6F60     MOVWF __pcstackBANK0, BANKED
04EA  EC0F     CALL 0x341E, 0
04EC  F01A     NOP
04EE  0100     MOVLB 0x0
04F0  C060     MOVFF __pcstackBANK0, row
04F2  F07E     NOP
04F4  0100     MOVLB 0x0
04F6  C061     MOVFF col, min
04F8  F07F     NOP
290:                   tstring[length] = number1 + 48;
04FA  0100     MOVLB 0x0
04FC  0E6D     MOVLW 0x6D
04FE  0100     MOVLB 0x0
0500  0100     MOVLB 0x0
0502  257E     ADDWF row, W, BANKED
0504  6ED9     MOVWF FSR2L, ACCESS
0506  0100     MOVLB 0x0
0508  0E00     MOVLW 0x0
050A  0100     MOVLB 0x0
050C  0100     MOVLB 0x0
050E  217F     ADDWFC min, W, BANKED
0510  6EDA     MOVWF FSR2H, ACCESS
0512  0100     MOVLB 0x0
0514  0100     MOVLB 0x0
0516  5180     MOVF max, W, BANKED
0518  0F30     ADDLW 0x30
051A  6EDF     MOVWF INDF2, ACCESS
291:                   tstring[length + 1] = '\0';
051C  0E01     MOVLW 0x1
051E  0100     MOVLB 0x0
0520  0100     MOVLB 0x0
0522  257E     ADDWF row, W, BANKED
0524  0100     MOVLB 0x0
0526  6F6B     MOVWF counter, BANKED
0528  0E00     MOVLW 0x0
052A  0100     MOVLB 0x0
052C  0100     MOVLB 0x0
052E  217F     ADDWFC min, W, BANKED
0530  0100     MOVLB 0x0
0532  6F6C     MOVWF quotient, BANKED
0534  0100     MOVLB 0x0
0536  0E6D     MOVLW 0x6D
0538  0100     MOVLB 0x0
053A  256B     ADDWF counter, W, BANKED
053C  6ED9     MOVWF FSR2L, ACCESS
053E  0100     MOVLB 0x0
0540  0E00     MOVLW 0x0
0542  0100     MOVLB 0x0
0544  216C     ADDWFC quotient, W, BANKED
0546  6EDA     MOVWF FSR2H, ACCESS
0548  0E00     MOVLW 0x0
054A  6EDF     MOVWF INDF2, ACCESS
292:               }
293:           
294:               length = strlen(tstring);
054C  0100     MOVLB 0x0
054E  0E00     MOVLW 0x0
0550  0100     MOVLB 0x0
0552  0100     MOVLB 0x0
0554  6F61     MOVWF col, BANKED
0556  0100     MOVLB 0x0
0558  0E6D     MOVLW 0x6D
055A  0100     MOVLB 0x0
055C  6F60     MOVWF __pcstackBANK0, BANKED
055E  EC0F     CALL 0x341E, 0
0560  F01A     NOP
0562  0100     MOVLB 0x0
0564  C060     MOVFF __pcstackBANK0, row
0566  F07E     NOP
0568  0100     MOVLB 0x0
056A  C061     MOVFF col, min
056C  F07F     NOP
295:               tstring[length] = number2 + 48;
056E  0100     MOVLB 0x0
0570  0E6D     MOVLW 0x6D
0572  0100     MOVLB 0x0
0574  0100     MOVLB 0x0
0576  257E     ADDWF row, W, BANKED
0578  6ED9     MOVWF FSR2L, ACCESS
057A  0100     MOVLB 0x0
057C  0E00     MOVLW 0x0
057E  0100     MOVLB 0x0
0580  0100     MOVLB 0x0
0582  217F     ADDWFC min, W, BANKED
0584  6EDA     MOVWF FSR2H, ACCESS
0586  0100     MOVLB 0x0
0588  0100     MOVLB 0x0
058A  517D     MOVF istring, W, BANKED
058C  0F30     ADDLW 0x30
058E  6EDF     MOVWF INDF2, ACCESS
296:               tstring[length + 1] = '\0';
0590  0E01     MOVLW 0x1
0592  0100     MOVLB 0x0
0594  0100     MOVLB 0x0
0596  257E     ADDWF row, W, BANKED
0598  0100     MOVLB 0x0
059A  6F6B     MOVWF counter, BANKED
059C  0E00     MOVLW 0x0
059E  0100     MOVLB 0x0
05A0  0100     MOVLB 0x0
05A2  217F     ADDWFC min, W, BANKED
05A4  0100     MOVLB 0x0
05A6  6F6C     MOVWF quotient, BANKED
05A8  0100     MOVLB 0x0
05AA  0E6D     MOVLW 0x6D
05AC  0100     MOVLB 0x0
05AE  256B     ADDWF counter, W, BANKED
05B0  6ED9     MOVWF FSR2L, ACCESS
05B2  0100     MOVLB 0x0
05B4  0E00     MOVLW 0x0
05B6  0100     MOVLB 0x0
05B8  216C     ADDWFC quotient, W, BANKED
05BA  6EDA     MOVWF FSR2H, ACCESS
05BC  0E00     MOVLW 0x0
05BE  6EDF     MOVWF INDF2, ACCESS
297:           
298:               if (number1 == 1) {
05C0  0100     MOVLB 0x0
05C2  0100     MOVLB 0x0
05C4  0580     DECF max, W, BANKED
05C6  A4D8     BTFSS STATUS, 2, ACCESS
05C8  D013     BRA 0x5F0
299:                   strcat(tstring, "TH ");
05CA  0100     MOVLB 0x0
05CC  0E00     MOVLW 0x0
05CE  0100     MOVLB 0x0
05D0  0100     MOVLB 0x0
05D2  6F61     MOVWF col, BANKED
05D4  0100     MOVLB 0x0
05D6  0E6D     MOVLW 0x6D
05D8  0100     MOVLB 0x0
05DA  6F60     MOVWF __pcstackBANK0, BANKED
05DC  0E3F     MOVLW 0x3F
05DE  0100     MOVLB 0x0
05E0  0100     MOVLB 0x0
05E2  6F63     MOVWF string_index, BANKED
05E4  0EF4     MOVLW 0xF4
05E6  0100     MOVLB 0x0
05E8  6F62     MOVWF c, BANKED
05EA  EC48     CALL 0x3290, 0
05EC  F019     NOP
300:               } else {
05EE  D05C     BRA 0x6A8
301:                   if (number2 == 1) strcat(tstring, "ST ");
05F0  0100     MOVLB 0x0
05F2  0100     MOVLB 0x0
05F4  057D     DECF istring, W, BANKED
05F6  A4D8     BTFSS STATUS, 2, ACCESS
05F8  D013     BRA 0x620
05FA  0100     MOVLB 0x0
05FC  0E00     MOVLW 0x0
05FE  0100     MOVLB 0x0
0600  0100     MOVLB 0x0
0602  6F61     MOVWF col, BANKED
0604  0100     MOVLB 0x0
0606  0E6D     MOVLW 0x6D
0608  0100     MOVLB 0x0
060A  6F60     MOVWF __pcstackBANK0, BANKED
060C  0E3F     MOVLW 0x3F
060E  0100     MOVLB 0x0
0610  0100     MOVLB 0x0
0612  6F63     MOVWF string_index, BANKED
0614  0EF8     MOVLW 0xF8
0616  0100     MOVLB 0x0
0618  6F62     MOVWF c, BANKED
061A  EC48     CALL 0x3290, 0
061C  F019     NOP
061E  D044     BRA 0x6A8
302:                   else if (number2 == 2) strcat(tstring, "ND ");
0620  0100     MOVLB 0x0
0622  0100     MOVLB 0x0
0624  517D     MOVF istring, W, BANKED
0626  0A02     XORLW 0x2
0628  A4D8     BTFSS STATUS, 2, ACCESS
062A  D013     BRA 0x652
062C  0100     MOVLB 0x0
062E  0E00     MOVLW 0x0
0630  0100     MOVLB 0x0
0632  0100     MOVLB 0x0
0634  6F61     MOVWF col, BANKED
0636  0100     MOVLB 0x0
0638  0E6D     MOVLW 0x6D
063A  0100     MOVLB 0x0
063C  6F60     MOVWF __pcstackBANK0, BANKED
063E  0E3F     MOVLW 0x3F
0640  0100     MOVLB 0x0
0642  0100     MOVLB 0x0
0644  6F63     MOVWF string_index, BANKED
0646  0EEC     MOVLW 0xEC
0648  0100     MOVLB 0x0
064A  6F62     MOVWF c, BANKED
064C  EC48     CALL 0x3290, 0
064E  F019     NOP
0650  D02B     BRA 0x6A8
303:                   else if (number2 == 3) strcat(tstring, "RD ");
0652  0100     MOVLB 0x0
0654  0100     MOVLB 0x0
0656  517D     MOVF istring, W, BANKED
0658  0A03     XORLW 0x3
065A  A4D8     BTFSS STATUS, 2, ACCESS
065C  D013     BRA 0x684
065E  0100     MOVLB 0x0
0660  0E00     MOVLW 0x0
0662  0100     MOVLB 0x0
0664  0100     MOVLB 0x0
0666  6F61     MOVWF col, BANKED
0668  0100     MOVLB 0x0
066A  0E6D     MOVLW 0x6D
066C  0100     MOVLB 0x0
066E  6F60     MOVWF __pcstackBANK0, BANKED
0670  0E3F     MOVLW 0x3F
0672  0100     MOVLB 0x0
0674  0100     MOVLB 0x0
0676  6F63     MOVWF string_index, BANKED
0678  0EF0     MOVLW 0xF0
067A  0100     MOVLB 0x0
067C  6F62     MOVWF c, BANKED
067E  EC48     CALL 0x3290, 0
0680  F019     NOP
0682  D012     BRA 0x6A8
304:                   else strcat(tstring, "TH ");
0684  0100     MOVLB 0x0
0686  0E00     MOVLW 0x0
0688  0100     MOVLB 0x0
068A  0100     MOVLB 0x0
068C  6F61     MOVWF col, BANKED
068E  0100     MOVLB 0x0
0690  0E6D     MOVLW 0x6D
0692  0100     MOVLB 0x0
0694  6F60     MOVWF __pcstackBANK0, BANKED
0696  0E3F     MOVLW 0x3F
0698  0100     MOVLB 0x0
069A  0100     MOVLB 0x0
069C  6F63     MOVWF string_index, BANKED
069E  0EF4     MOVLW 0xF4
06A0  0100     MOVLB 0x0
06A2  6F62     MOVWF c, BANKED
06A4  EC48     CALL 0x3290, 0
06A6  F019     NOP
305:               }
306:           
307:               return tstring;
06A8  0100     MOVLB 0x0
308:           }  // string length <= 14
309:           
310:           uint8_t bcd_to_dec(uint8_t bcd){
311:               return(bcd & 0x0f) + ((bcd >> 4) * 10);
38BE  0100     MOVLB 0x0
312:           }
313:           
314:           uint8_t dec_to_bcd(uint8_t dec){
315:               return(((dec / 10) << 4)+ (dec % 10));
3474  0100     MOVLB 0x0
316:           }
---  C:/Program Files (x86)/Microchip/xc8/v1.20/sources/common/wmul.c  ----------------------------------
1:             // 16 x 16 bit multiplication with 16 bit result
2:             
3:             unsigned int
4:             __wmul(unsigned int multiplier, unsigned int multiplicand)
5:             {
6:                     unsigned int product;
7:             
8:             #ifdef _PIC18
9:             
10:            #define LOWBYTE(x)  (*(unsigned char *)(&x))
11:            #define HIGHBYTE(x) (*(((unsigned char *)(&x))+1))
12:            
13:            	// optimized to allow use of the 8 x 8 bit hardware multiply instruction
14:                    product =  LOWBYTE(multiplier) * LOWBYTE(multiplicand);
33BC  0100     MOVLB 0x0
33BE  0100     MOVLB 0x0
33C0  5160     MOVF __pcstackBANK0, W, BANKED
33C2  0100     MOVLB 0x0
33C4  0100     MOVLB 0x0
33C6  0362     MULWF c, BANKED
33C8  CFF3     MOVFF PRODL, n
33CA  F064     NOP
33CC  CFF4     MOVFF PRODH, counter
33CE  F065     NOP
15:                    product += (LOWBYTE(multiplier) * HIGHBYTE(multiplicand)) << 8;
33D0  0100     MOVLB 0x0
33D2  0100     MOVLB 0x0
33D4  5160     MOVF __pcstackBANK0, W, BANKED
33D6  0100     MOVLB 0x0
33D8  0100     MOVLB 0x0
33DA  0363     MULWF string_index, BANKED
33DC  CFF3     MOVFF PRODL, PRODH
33DE  FFF4     NOP
33E0  6AF3     CLRF PRODL, ACCESS
33E2  50F3     MOVF PRODL, W, ACCESS
33E4  0100     MOVLB 0x0
33E6  0100     MOVLB 0x0
33E8  2764     ADDWF n, F, BANKED
33EA  50F4     MOVF PRODH, W, ACCESS
33EC  0100     MOVLB 0x0
33EE  0100     MOVLB 0x0
33F0  2365     ADDWFC counter, F, BANKED
16:                    product += (HIGHBYTE(multiplier) * LOWBYTE(multiplicand)) << 8;
33F2  0100     MOVLB 0x0
33F4  0100     MOVLB 0x0
33F6  5161     MOVF col, W, BANKED
33F8  0100     MOVLB 0x0
33FA  0100     MOVLB 0x0
33FC  0362     MULWF c, BANKED
33FE  CFF3     MOVFF PRODL, PRODH
3400  FFF4     NOP
3402  6AF3     CLRF PRODL, ACCESS
3404  50F3     MOVF PRODL, W, ACCESS
3406  0100     MOVLB 0x0
3408  0100     MOVLB 0x0
340A  2764     ADDWF n, F, BANKED
340C  50F4     MOVF PRODH, W, ACCESS
340E  0100     MOVLB 0x0
3410  0100     MOVLB 0x0
3412  2365     ADDWFC counter, F, BANKED
17:            
18:            #else
19:            
20:            	product = 0;
21:            	do {
22:            		if(multiplier & 1)
23:            			product += multiplicand;
24:            		multiplicand <<= 1;
25:            		multiplier >>= 1;
26:            	} while(multiplier != 0);
27:            
28:            #endif
29:            
30:                    return product;
3414  C064     MOVFF n, __pcstackBANK0
31:            }
---  C:/Program Files (x86)/Microchip/xc8/v1.20/sources/common/strlen.c  --------------------------------
1:             #include	<string.h>
2:             
3:             size_t
4:             strlen(const char * s)
5:             {
6:             	register const char *	cp;
7:             
8:             	cp = s;
341E  C060     MOVFF __pcstackBANK0, n
3420  F064     NOP
3422  C061     MOVFF col, counter
3424  F065     NOP
9:             	while(*cp) {
3426  D004     BRA 0x3430
3430  C064     MOVFF n, FSR2L
3432  FFD9     NOP
3434  C065     MOVFF counter, FSR2H
3436  FFDA     NOP
3438  50DF     MOVF INDF2, W, ACCESS
343A  A4D8     BTFSS STATUS, 2, ACCESS
343C  D7F5     BRA 0x3428
10:            		cp++;
3428  0100     MOVLB 0x0
342A  0100     MOVLB 0x0
342C  4B64     INFSNZ n, F, BANKED
342E  2B65     INCF counter, F, BANKED
11:            	}
12:            	return cp-s;
343E  0100     MOVLB 0x0
13:            }
14:            
---  C:/Program Files (x86)/Microchip/xc8/v1.20/sources/common/strcat.c  --------------------------------
1:             #include	<string.h>
2:             
3:             #ifdef _PIC16
4:             far char *
5:             strcat(register far char * to, register const char * from)
6:             #else /*  _PIC16 */
7:             char *
8:             strcat(register char * to, register const char * from)
9:             #endif /* _PIC16 */
10:            {
11:            
12:            #ifdef _PIC16
13:            	register far char *	cp;
14:            #else /* _PIC16 */
15:            	register char *	cp;
16:            #endif /* _PIC16 */
17:            
18:            	cp = to;
3290  C060     MOVFF __pcstackBANK0, n
3292  F064     NOP
3294  C061     MOVFF col, counter
3296  F065     NOP
19:            	while(*cp)
3298  D004     BRA 0x32A2
32A2  C064     MOVFF n, FSR2L
32A4  FFD9     NOP
32A6  C065     MOVFF counter, FSR2H
32A8  FFDA     NOP
32AA  50DF     MOVF INDF2, W, ACCESS
32AC  B4D8     BTFSC STATUS, 2, ACCESS
32AE  D009     BRA 0x32C2
32B0  D7F4     BRA 0x329A
20:            		cp++;
329A  0100     MOVLB 0x0
329C  0100     MOVLB 0x0
329E  4B64     INFSNZ n, F, BANKED
32A0  2B65     INCF counter, F, BANKED
21:            	while (*cp = *from) {
32C2  0100     MOVLB 0x0
32C4  C062     MOVFF c, TBLPTRL
32C6  FFF6     NOP
32C8  0100     MOVLB 0x0
32CA  C063     MOVFF string_index, TBLPTRH
32CC  FFF7     NOP
32CE  6AF8     CLRF TBLPTRU, ACCESS
32D0  C064     MOVFF n, FSR2L
32D2  FFD9     NOP
32D4  C065     MOVFF counter, FSR2H
32D6  FFDA     NOP
32D8  0E02     MOVLW 0x2
32DA  64F7     CPFSGT TBLPTRH, ACCESS
32DC  D003     BRA 0x32E4
32DE  0008     TBLRD*
32E0  50F5     MOVF TABLAT, W, ACCESS
32E2  D005     BRA 0x32EE
32E4  CFF6     MOVFF TBLPTRL, FSR0L
32E6  FFE9     NOP
32E8  CFF7     MOVFF TBLPTRH, FSR0H
32EA  FFEA     NOP
32EC  50EF     MOVF INDF0, W, ACCESS
32EE  6EDF     MOVWF INDF2, ACCESS
32F0  50DF     MOVF INDF2, W, ACCESS
32F2  B4D8     BTFSC STATUS, 2, ACCESS
32F6  D7DD     BRA 0x32B2
22:            		cp++;
32B2  0100     MOVLB 0x0
32B4  0100     MOVLB 0x0
32B6  4B64     INFSNZ n, F, BANKED
32B8  2B65     INCF counter, F, BANKED
23:            		from++;
32BA  0100     MOVLB 0x0
32BC  0100     MOVLB 0x0
32BE  4B62     INFSNZ c, F, BANKED
32C0  2B63     INCF string_index, F, BANKED
24:            	}
25:            	return to;
26:            }
32F4  0012     RETURN 0
---  C:/Program Files (x86)/Microchip/xc8/v1.20/sources/common/memset.c  --------------------------------
1:             #include	<string.h>
2:             
3:             #ifdef _PIC16
4:             far void *
5:             memset(far void * p1, int c, register size_t n)
6:             #else /*  _PIC16 */
7:             void *
8:             memset(void * p1, int c, register size_t n)
9:             #endif /* _PIC16 */
10:            {
11:            
12:            #ifdef _PIC16
13:            	register far char *	p;
14:            #else /*  _PIC16 */
15:            	register char *		p;
16:            #endif /* _PIC16 */
17:            
18:            	p = p1;
3736  C060     MOVFF __pcstackBANK0, dividend
3738  F066     NOP
373A  C061     MOVFF col, quotient
373C  F067     NOP
19:            	while(n--)
373E  D00B     BRA 0x3756
3756  0100     MOVLB 0x0
3758  0100     MOVLB 0x0
375A  0764     DECF n, F, BANKED
375C  A0D8     BTFSS STATUS, 0, ACCESS
375E  0765     DECF counter, F, BANKED
3760  0100     MOVLB 0x0
3762  2964     INCF n, W, BANKED
3764  B4D8     BTFSC STATUS, 2, ACCESS
3766  2965     INCF counter, W, BANKED
3768  B4D8     BTFSC STATUS, 2, ACCESS
376C  D7E9     BRA 0x3740
20:            		*p++ = c;
3740  C066     MOVFF dividend, FSR2L
3742  FFD9     NOP
3744  C067     MOVFF quotient, FSR2H
3746  FFDA     NOP
3748  0100     MOVLB 0x0
374A  C062     MOVFF c, INDF2
374C  FFDF     NOP
374E  0100     MOVLB 0x0
3750  0100     MOVLB 0x0
3752  4B66     INFSNZ dividend, F, BANKED
3754  2B67     INCF quotient, F, BANKED
21:            	return p1;
22:            }
376A  0012     RETURN 0
---  C:/Program Files (x86)/Microchip/xc8/v1.20/sources/common/lwmod.c  ---------------------------------
1:             // word unsigned modulus
2:             
3:             unsigned int
4:             #ifdef __PICC__
5:             #warning TODO: update cgpic and this file to use the other prototype
6:             __lwmod(unsigned int divisor, unsigned int dividend)
7:             #else
8:             __lwmod(unsigned int dividend, unsigned int divisor)
9:             #endif
10:            {
11:            	unsigned char	counter;
12:            
13:            	if(divisor != 0) {
2F9E  0100     MOVLB 0x0
2FA0  0100     MOVLB 0x0
2FA2  5171     MOVF col, W, BANKED
2FA4  1170     IORWF divisor, W, BANKED
2FA6  B4D8     BTFSC STATUS, 2, ACCESS
2FA8  D03A     BRA 0x301E
14:            		counter = 1;
2FAA  0100     MOVLB 0x0
2FAC  6F72     MOVWF num_ptr, BANKED
2FAE  0E01     MOVLW 0x1
2FB0  0100     MOVLB 0x0
2FB2  0100     MOVLB 0x0
2FB4  6F73     MOVWF counter, BANKED
2FB6  0100     MOVLB 0x0
2FB8  5172     MOVF num_ptr, W, BANKED
15:            		while((divisor & 0x8000) == 0) {
2FBA  D009     BRA 0x2FCE
2FCE  0100     MOVLB 0x0
2FD0  0100     MOVLB 0x0
2FD2  AF71     BTFSS col, 7, BANKED
2FD4  D7F3     BRA 0x2FBC
16:            			divisor <<= 1;
2FBC  0100     MOVLB 0x0
2FBE  0100     MOVLB 0x0
2FC0  0100     MOVLB 0x0
2FC2  90D8     BCF STATUS, 0, ACCESS
2FC4  3770     RLCF divisor, F, BANKED
2FC6  3771     RLCF col, F, BANKED
17:            			counter++;
2FC8  0100     MOVLB 0x0
2FCA  0100     MOVLB 0x0
2FCC  2B73     INCF counter, F, BANKED
18:            		}
19:            		do {
20:            			if(divisor <= dividend)
2FD6  0100     MOVLB 0x0
2FD8  0100     MOVLB 0x0
2FDA  5170     MOVF divisor, W, BANKED
2FDC  0100     MOVLB 0x0
2FDE  0100     MOVLB 0x0
2FE0  5D6E     SUBWF time, W, BANKED
2FE2  0100     MOVLB 0x0
2FE4  0100     MOVLB 0x0
2FE6  5171     MOVF col, W, BANKED
2FE8  0100     MOVLB 0x0
2FEA  0100     MOVLB 0x0
2FEC  596F     SUBWFB 0x6F, W, BANKED
2FEE  A0D8     BTFSS STATUS, 0, ACCESS
2FF0  D00C     BRA 0x300A
21:            				dividend -= divisor;
2FF2  0100     MOVLB 0x0
2FF4  0100     MOVLB 0x0
2FF6  5170     MOVF divisor, W, BANKED
2FF8  0100     MOVLB 0x0
2FFA  0100     MOVLB 0x0
2FFC  5F6E     SUBWF time, F, BANKED
2FFE  0100     MOVLB 0x0
3000  0100     MOVLB 0x0
3002  5171     MOVF col, W, BANKED
3004  0100     MOVLB 0x0
3006  0100     MOVLB 0x0
3008  5B6F     SUBWFB 0x6F, F, BANKED
22:            			divisor >>= 1;
300A  0100     MOVLB 0x0
300C  0100     MOVLB 0x0
300E  0100     MOVLB 0x0
3010  90D8     BCF STATUS, 0, ACCESS
3012  3371     RRCF col, F, BANKED
3014  3370     RRCF divisor, F, BANKED
23:            		} while(--counter != 0);
3016  0100     MOVLB 0x0
3018  0100     MOVLB 0x0
301A  2F73     DECFSZ counter, F, BANKED
301C  D7DC     BRA 0x2FD6
24:            	}
25:            	return dividend;
301E  C06E     MOVFF time, time
3020  F06E     NOP
3022  C06F     MOVFF 0x6F, 0x6F
3024  F06F     NOP
26:            }
3026  0012     RETURN 0
---  C:/Program Files (x86)/Microchip/xc8/v1.20/sources/common/lwdiv.c  ---------------------------------
1:             // word unsigned division
2:             
3:             unsigned int
4:             #ifdef __PICC__
5:             #warning TODO: update cgpic and this file to use the other prototype
6:             __lwdiv(unsigned int divisor, unsigned int dividend)
7:             #else
8:             __lwdiv(unsigned int dividend, unsigned int divisor)
9:             #endif
10:            {
11:            	unsigned int	quotient;
12:            	unsigned char	counter;
13:            
14:            	quotient = 0;
2CA8  0E00     MOVLW 0x0
2CAA  0100     MOVLB 0x0
2CAC  0100     MOVLB 0x0
2CAE  6F6D     MOVWF tstring, BANKED
2CB0  0E00     MOVLW 0x0
2CB2  0100     MOVLB 0x0
2CB4  6F6C     MOVWF quotient, BANKED
15:            	if(divisor != 0) {
2CB6  0100     MOVLB 0x0
2CB8  0100     MOVLB 0x0
2CBA  5169     MOVF row, W, BANKED
2CBC  1168     IORWF divisor, W, BANKED
2CBE  B4D8     BTFSC STATUS, 2, ACCESS
2CC0  D043     BRA 0x2D48
16:            		counter = 1;
2CC2  0100     MOVLB 0x0
2CC4  6F6A     MOVWF col, BANKED
2CC6  0E01     MOVLW 0x1
2CC8  0100     MOVLB 0x0
2CCA  0100     MOVLB 0x0
2CCC  6F6B     MOVWF counter, BANKED
2CCE  0100     MOVLB 0x0
2CD0  516A     MOVF col, W, BANKED
17:            		while((divisor & 0x8000) == 0) {
2CD2  D009     BRA 0x2CE6
2CE6  0100     MOVLB 0x0
2CE8  0100     MOVLB 0x0
2CEA  AF69     BTFSS row, 7, BANKED
2CEC  D7F3     BRA 0x2CD4
18:            			divisor <<= 1;
2CD4  0100     MOVLB 0x0
2CD6  0100     MOVLB 0x0
2CD8  0100     MOVLB 0x0
2CDA  90D8     BCF STATUS, 0, ACCESS
2CDC  3768     RLCF divisor, F, BANKED
2CDE  3769     RLCF row, F, BANKED
19:            			counter++;
2CE0  0100     MOVLB 0x0
2CE2  0100     MOVLB 0x0
2CE4  2B6B     INCF counter, F, BANKED
20:            		}
21:            		do {
22:            			quotient <<= 1;
2CEE  0100     MOVLB 0x0
2CF0  0100     MOVLB 0x0
2CF2  0100     MOVLB 0x0
2CF4  90D8     BCF STATUS, 0, ACCESS
2CF6  376C     RLCF quotient, F, BANKED
2CF8  376D     RLCF tstring, F, BANKED
23:            			if(divisor <= dividend) {
2CFA  0100     MOVLB 0x0
2CFC  0100     MOVLB 0x0
2CFE  5168     MOVF divisor, W, BANKED
2D00  0100     MOVLB 0x0
2D02  0100     MOVLB 0x0
2D04  5D66     SUBWF dividend, W, BANKED
2D06  0100     MOVLB 0x0
2D08  0100     MOVLB 0x0
2D0A  5169     MOVF row, W, BANKED
2D0C  0100     MOVLB 0x0
2D0E  0100     MOVLB 0x0
2D10  5967     SUBWFB quotient, W, BANKED
2D12  A0D8     BTFSS STATUS, 0, ACCESS
2D14  D00F     BRA 0x2D34
24:            				dividend -= divisor;
2D16  0100     MOVLB 0x0
2D18  0100     MOVLB 0x0
2D1A  5168     MOVF divisor, W, BANKED
2D1C  0100     MOVLB 0x0
2D1E  0100     MOVLB 0x0
2D20  5F66     SUBWF dividend, F, BANKED
2D22  0100     MOVLB 0x0
2D24  0100     MOVLB 0x0
2D26  5169     MOVF row, W, BANKED
2D28  0100     MOVLB 0x0
2D2A  0100     MOVLB 0x0
2D2C  5B67     SUBWFB quotient, F, BANKED
25:            				quotient |= 1;
2D2E  0100     MOVLB 0x0
2D30  0100     MOVLB 0x0
2D32  816C     BSF quotient, 0, BANKED
26:            			}
27:            			divisor >>= 1;
2D34  0100     MOVLB 0x0
2D36  0100     MOVLB 0x0
2D38  0100     MOVLB 0x0
2D3A  90D8     BCF STATUS, 0, ACCESS
2D3C  3369     RRCF row, F, BANKED
2D3E  3368     RRCF divisor, F, BANKED
28:            		} while(--counter != 0);
2D40  0100     MOVLB 0x0
2D42  0100     MOVLB 0x0
2D44  2F6B     DECFSZ counter, F, BANKED
2D46  D7D3     BRA 0x2CEE
29:            	}
30:            	return quotient;
2D48  C06C     MOVFF quotient, dividend
2D4A  F066     NOP
2D4C  C06D     MOVFF tstring, quotient
2D4E  F067     NOP
31:            }
2D50  0012     RETURN 0
---  C:/Program Files (x86)/Microchip/xc8/v1.20/sources/common/awmod.c  ---------------------------------
1:             // integer signed unsigned modulus
2:             
3:             signed int
4:             #ifdef __PICC__
5:             #warning TODO: update cgpic and this file to use the other prototype
6:             __awmod(signed int divisor, signed int dividend)
7:             #else
8:             __awmod(signed int dividend, signed int divisor)
9:             #endif
10:            {
11:            	unsigned char	counter, sign;
12:            
13:            	sign = 0;
258A  0100     MOVLB 0x0
258C  6F64     MOVWF n, BANKED
258E  0E00     MOVLW 0x0
2590  0100     MOVLB 0x0
2592  0100     MOVLB 0x0
2594  6F66     MOVWF dividend, BANKED
2596  0100     MOVLB 0x0
2598  5164     MOVF n, W, BANKED
14:            	if(dividend < 0) {
259A  0100     MOVLB 0x0
259C  0100     MOVLB 0x0
259E  AF61     BTFSS col, 7, BANKED
25A0  D00F     BRA 0x25C0
15:            		dividend = -dividend;
25A2  0100     MOVLB 0x0
25A4  0100     MOVLB 0x0
25A6  6D60     NEGF __pcstackBANK0, BANKED
25A8  0100     MOVLB 0x0
25AA  1F61     COMF col, F, BANKED
25AC  B0D8     BTFSC STATUS, 0, ACCESS
25AE  2B61     INCF col, F, BANKED
16:            		sign = 1;
25B0  0100     MOVLB 0x0
25B2  6F64     MOVWF n, BANKED
25B4  0E01     MOVLW 0x1
25B6  0100     MOVLB 0x0
25B8  0100     MOVLB 0x0
25BA  6F66     MOVWF dividend, BANKED
25BC  0100     MOVLB 0x0
25BE  5164     MOVF n, W, BANKED
17:            	}
18:            	if(divisor < 0)
25C0  0100     MOVLB 0x0
25C2  0100     MOVLB 0x0
25C4  AF63     BTFSS string_index, 7, BANKED
25C6  D007     BRA 0x25D6
19:            		divisor = -divisor;
25C8  0100     MOVLB 0x0
25CA  0100     MOVLB 0x0
25CC  6D62     NEGF c, BANKED
25CE  0100     MOVLB 0x0
25D0  1F63     COMF string_index, F, BANKED
25D2  B0D8     BTFSC STATUS, 0, ACCESS
25D4  2B63     INCF string_index, F, BANKED
20:            	if(divisor != 0) {
25D6  0100     MOVLB 0x0
25D8  0100     MOVLB 0x0
25DA  5163     MOVF string_index, W, BANKED
25DC  1162     IORWF c, W, BANKED
25DE  B4D8     BTFSC STATUS, 2, ACCESS
25E0  D03A     BRA 0x2656
21:            		counter = 1;
25E2  0100     MOVLB 0x0
25E4  6F64     MOVWF n, BANKED
25E6  0E01     MOVLW 0x1
25E8  0100     MOVLB 0x0
25EA  0100     MOVLB 0x0
25EC  6F65     MOVWF counter, BANKED
25EE  0100     MOVLB 0x0
25F0  5164     MOVF n, W, BANKED
22:            		while(((unsigned int)divisor & 0x8000U) == 0) {
25F2  D009     BRA 0x2606
2606  0100     MOVLB 0x0
2608  0100     MOVLB 0x0
260A  AF63     BTFSS string_index, 7, BANKED
260C  D7F3     BRA 0x25F4
23:            			divisor <<= 1;
25F4  0100     MOVLB 0x0
25F6  0100     MOVLB 0x0
25F8  0100     MOVLB 0x0
25FA  90D8     BCF STATUS, 0, ACCESS
25FC  3762     RLCF c, F, BANKED
25FE  3763     RLCF string_index, F, BANKED
24:            			counter++;
2600  0100     MOVLB 0x0
2602  0100     MOVLB 0x0
2604  2B65     INCF counter, F, BANKED
25:            		}
26:            		do {
27:            			if((unsigned int)divisor <= (unsigned int)dividend)
260E  0100     MOVLB 0x0
2610  0100     MOVLB 0x0
2612  5162     MOVF c, W, BANKED
2614  0100     MOVLB 0x0
2616  0100     MOVLB 0x0
2618  5D60     SUBWF __pcstackBANK0, W, BANKED
261A  0100     MOVLB 0x0
261C  0100     MOVLB 0x0
261E  5163     MOVF string_index, W, BANKED
2620  0100     MOVLB 0x0
2622  0100     MOVLB 0x0
2624  5961     SUBWFB col, W, BANKED
2626  A0D8     BTFSS STATUS, 0, ACCESS
2628  D00C     BRA 0x2642
28:            				dividend -= divisor;
262A  0100     MOVLB 0x0
262C  0100     MOVLB 0x0
262E  5162     MOVF c, W, BANKED
2630  0100     MOVLB 0x0
2632  0100     MOVLB 0x0
2634  5F60     SUBWF __pcstackBANK0, F, BANKED
2636  0100     MOVLB 0x0
2638  0100     MOVLB 0x0
263A  5163     MOVF string_index, W, BANKED
263C  0100     MOVLB 0x0
263E  0100     MOVLB 0x0
2640  5B61     SUBWFB col, F, BANKED
29:            			*(unsigned int *)&divisor >>= 1;
2642  0100     MOVLB 0x0
2644  0100     MOVLB 0x0
2646  0100     MOVLB 0x0
2648  90D8     BCF STATUS, 0, ACCESS
264A  3363     RRCF string_index, F, BANKED
264C  3362     RRCF c, F, BANKED
30:            		} while(--counter != 0);
264E  0100     MOVLB 0x0
2650  0100     MOVLB 0x0
2652  2F65     DECFSZ counter, F, BANKED
2654  D7DC     BRA 0x260E
31:            	}
32:            	if(sign)
2656  0100     MOVLB 0x0
2658  0100     MOVLB 0x0
265A  5166     MOVF dividend, W, BANKED
265C  B4D8     BTFSC STATUS, 2, ACCESS
265E  D007     BRA 0x266E
33:            		dividend = -dividend;
2660  0100     MOVLB 0x0
2662  0100     MOVLB 0x0
2664  6D60     NEGF __pcstackBANK0, BANKED
2666  0100     MOVLB 0x0
2668  1F61     COMF col, F, BANKED
266A  B0D8     BTFSC STATUS, 0, ACCESS
266C  2B61     INCF col, F, BANKED
34:            	return dividend;
266E  C060     MOVFF __pcstackBANK0, __pcstackBANK0
35:            }
---  C:/Program Files (x86)/Microchip/xc8/v1.20/sources/common/awdiv.c  ---------------------------------
1:             // integer signed division
2:             
3:             signed int
4:             #ifdef __PICC__
5:             #warning TODO: update cgpic and this file to use the other prototype
6:             __awdiv(signed int divisor, signed int dividend)
7:             #else
8:             __awdiv(signed int dividend, signed int divisor)
9:             #endif
10:            {
11:            	signed int	quotient;
12:            	unsigned char	counter, sign;
13:            
14:            	sign = 0;
2276  0100     MOVLB 0x0
2278  6F64     MOVWF n, BANKED
227A  0E00     MOVLW 0x0
227C  0100     MOVLB 0x0
227E  0100     MOVLB 0x0
2280  6F66     MOVWF dividend, BANKED
2282  0100     MOVLB 0x0
2284  5164     MOVF n, W, BANKED
15:            	if(divisor < 0) {
2286  0100     MOVLB 0x0
2288  0100     MOVLB 0x0
228A  AF63     BTFSS string_index, 7, BANKED
228C  D00F     BRA 0x22AC
16:            		divisor = -divisor;
228E  0100     MOVLB 0x0
2290  0100     MOVLB 0x0
2292  6D62     NEGF c, BANKED
2294  0100     MOVLB 0x0
2296  1F63     COMF string_index, F, BANKED
2298  B0D8     BTFSC STATUS, 0, ACCESS
229A  2B63     INCF string_index, F, BANKED
17:            		sign = 1;
229C  0100     MOVLB 0x0
229E  6F64     MOVWF n, BANKED
22A0  0E01     MOVLW 0x1
22A2  0100     MOVLB 0x0
22A4  0100     MOVLB 0x0
22A6  6F66     MOVWF dividend, BANKED
22A8  0100     MOVLB 0x0
22AA  5164     MOVF n, W, BANKED
18:            	}
19:            	if(dividend < 0) {
22AC  0100     MOVLB 0x0
22AE  0100     MOVLB 0x0
22B0  AF61     BTFSS col, 7, BANKED
22B2  D00B     BRA 0x22CA
20:            		dividend = -dividend;
22B4  0100     MOVLB 0x0
22B6  0100     MOVLB 0x0
22B8  6D60     NEGF __pcstackBANK0, BANKED
22BA  0100     MOVLB 0x0
22BC  1F61     COMF col, F, BANKED
22BE  B0D8     BTFSC STATUS, 0, ACCESS
22C0  2B61     INCF col, F, BANKED
21:            		sign ^= 1;
22C2  0E01     MOVLW 0x1
22C4  0100     MOVLB 0x0
22C6  0100     MOVLB 0x0
22C8  1B66     XORWF dividend, F, BANKED
22:            	}
23:            	quotient = 0;
22CA  0E00     MOVLW 0x0
22CC  0100     MOVLB 0x0
22CE  0100     MOVLB 0x0
22D0  6F68     MOVWF divisor, BANKED
22D2  0E00     MOVLW 0x0
22D4  0100     MOVLB 0x0
22D6  6F67     MOVWF quotient, BANKED
24:            	if(divisor != 0) {
22D8  0100     MOVLB 0x0
22DA  0100     MOVLB 0x0
22DC  5163     MOVF string_index, W, BANKED
22DE  1162     IORWF c, W, BANKED
22E0  B4D8     BTFSC STATUS, 2, ACCESS
22E2  D043     BRA 0x236A
25:            		counter = 1;
22E4  0100     MOVLB 0x0
22E6  6F64     MOVWF n, BANKED
22E8  0E01     MOVLW 0x1
22EA  0100     MOVLB 0x0
22EC  0100     MOVLB 0x0
22EE  6F65     MOVWF counter, BANKED
22F0  0100     MOVLB 0x0
22F2  5164     MOVF n, W, BANKED
26:            		while((divisor & 0x8000U) == 0) {
22F4  D009     BRA 0x2308
2308  0100     MOVLB 0x0
230A  0100     MOVLB 0x0
230C  AF63     BTFSS string_index, 7, BANKED
230E  D7F3     BRA 0x22F6
27:            			divisor <<= 1;
22F6  0100     MOVLB 0x0
22F8  0100     MOVLB 0x0
22FA  0100     MOVLB 0x0
22FC  90D8     BCF STATUS, 0, ACCESS
22FE  3762     RLCF c, F, BANKED
2300  3763     RLCF string_index, F, BANKED
28:            			counter++;
2302  0100     MOVLB 0x0
2304  0100     MOVLB 0x0
2306  2B65     INCF counter, F, BANKED
29:            		}
30:            		do {
31:            			quotient <<= 1;
2310  0100     MOVLB 0x0
2312  0100     MOVLB 0x0
2314  0100     MOVLB 0x0
2316  90D8     BCF STATUS, 0, ACCESS
2318  3767     RLCF quotient, F, BANKED
231A  3768     RLCF divisor, F, BANKED
32:            			if((unsigned int)divisor <= (unsigned int)dividend) {
231C  0100     MOVLB 0x0
231E  0100     MOVLB 0x0
2320  5162     MOVF c, W, BANKED
2322  0100     MOVLB 0x0
2324  0100     MOVLB 0x0
2326  5D60     SUBWF __pcstackBANK0, W, BANKED
2328  0100     MOVLB 0x0
232A  0100     MOVLB 0x0
232C  5163     MOVF string_index, W, BANKED
232E  0100     MOVLB 0x0
2330  0100     MOVLB 0x0
2332  5961     SUBWFB col, W, BANKED
2334  A0D8     BTFSS STATUS, 0, ACCESS
2336  D00F     BRA 0x2356
33:            				dividend -= divisor;
2338  0100     MOVLB 0x0
233A  0100     MOVLB 0x0
233C  5162     MOVF c, W, BANKED
233E  0100     MOVLB 0x0
2340  0100     MOVLB 0x0
2342  5F60     SUBWF __pcstackBANK0, F, BANKED
2344  0100     MOVLB 0x0
2346  0100     MOVLB 0x0
2348  5163     MOVF string_index, W, BANKED
234A  0100     MOVLB 0x0
234C  0100     MOVLB 0x0
234E  5B61     SUBWFB col, F, BANKED
34:            				quotient |= 1;
2350  0100     MOVLB 0x0
2352  0100     MOVLB 0x0
2354  8167     BSF quotient, 0, BANKED
35:            			}
36:            			*(unsigned int *)&divisor >>= 1;
2356  0100     MOVLB 0x0
2358  0100     MOVLB 0x0
235A  0100     MOVLB 0x0
235C  90D8     BCF STATUS, 0, ACCESS
235E  3363     RRCF string_index, F, BANKED
2360  3362     RRCF c, F, BANKED
37:            		} while(--counter != 0);
2362  0100     MOVLB 0x0
2364  0100     MOVLB 0x0
2366  2F65     DECFSZ counter, F, BANKED
2368  D7D3     BRA 0x2310
38:            	}
39:            	if(sign)
236A  0100     MOVLB 0x0
236C  0100     MOVLB 0x0
236E  5166     MOVF dividend, W, BANKED
2370  B4D8     BTFSC STATUS, 2, ACCESS
2372  D007     BRA 0x2382
40:            		quotient = -quotient;
2374  0100     MOVLB 0x0
2376  0100     MOVLB 0x0
2378  6D67     NEGF quotient, BANKED
237A  0100     MOVLB 0x0
237C  1F68     COMF divisor, F, BANKED
237E  B0D8     BTFSC STATUS, 0, ACCESS
2380  2B68     INCF divisor, F, BANKED
41:            	return quotient;
2382  C067     MOVFF quotient, __pcstackBANK0
42:            }
