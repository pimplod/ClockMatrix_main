/******************************************************************************/
/* Files to Include                                                           */
/******************************************************************************/

#include <htc.h>           /* Global Header File */
#include <stdint.h>        /* For uint8_t definition */
//#include <stdbool.h>       /* For true/false definition */
#include <string.h>

#include "global.h"
#include "system.h"        /* System funct/params, like osc/peripheral config */
#include "display.h"
#include "swI2C.h"
#include "DS1307.h"
#include "delay.h"
#include "input.h"
#include "tmp75.h"
#include "game.h"

/******************************************************************************/
/* User Global Variable Declaration                                           */
/******************************************************************************/

volatile unsigned char currentState = 1;
volatile unsigned long milliseconds = 0;

volatile bit scrollInt_flag = 0;
volatile int8_t buttonInt_flag = 0;
volatile bit tscale_flag = 0;
volatile bit timedate_flag = 0;
uint8_t prevState = 0;
volatile int16_t frameDelay = 500;
//volatile uint8_t newFrame = 0;
/******************************************************************************/
/* Main Program                                                               */

/******************************************************************************/


void main(void){

    /* Initialize I/O and MCU Peripherals */
    InitPeripherals();

    /* Configure external hardware (i.e. -- ic's, sensors, displays)*/
    ExternalHardware();

    /* Configure MCU timers and interrupts needed*/
    InitTimersAndInterrupts();

    while(milliseconds < 1000) {
        if (buttonInt_flag == BUTTON_ENTER) {
            InputTime();
            RTCSetTime();
            buttonInt_flag = 0;
        }
    }
    /* Main loop*/
    while(1) {

        RTCGetDateTime();
        LM75GetTemp();

        if (scrollInt_flag) {
            scrollInt_flag = CLEAR;
        }

        if (buttonInt_flag != CLEAR) {
            CheckButton();
            buttonInt_flag = CLEAR;
        }

        switch (currentState) {
            case TIME_NUMERICAL:
                displayString[0] = '\0';
                if(timedate_flag) strcat(displayString, dateTime.dstring);
                else strcat(displayString, dateTime.tstring);
                DisplayString();
                display.cols[dateTime.sec / 4] |= (1 << 7);
                break;

            case TIME_STRING:
                displayString[0] = '\0';
                strcat(displayString, leadIn);
                strcat(displayString, "IT IS ");
                strcat(displayString, temperature.cstring);
                strcat(displayString, " AT ");
                strcat(displayString, dateTime.tstring);
                strcat(displayString, " ON ");
                strcat(displayString, DateStringLong());
                DisplayScrollText();
                break;

            case TIME_BINARY:
                BinaryTime();
                break;

            case TEMP:
                displayString[0] = '\0';
                strcat(displayString, " ");
                if (tscale_flag == FAHRENHEIT) strcat(displayString, temperature.fstring);
                else strcat(displayString, temperature.cstring);
                DisplayString();
                break;

            case PATTERN:
                if((milliseconds & frameDelay) ==0 ){
                    Checkerboard();
                }
                break;

            case TIMER:
                if(prevState != currentState) init_game();
                
                game_loop();
//                displayString[0] = '\0';
//                strcat(displayString, timer.string);
//                DisplayString();
                break;

            case SETTIMER:
                SetTimer();
                buttonInt_flag = CLEAR;
                currentState = TIME_NUMERICAL;
                break;

        }/**SWITCH(CURRENTSTATE)**/

        prevState = currentState;

    }/**WHILE**/
}/**MAIN**/

