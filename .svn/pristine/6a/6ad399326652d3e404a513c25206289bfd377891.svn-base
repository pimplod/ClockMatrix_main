/******************************************************************************/
/* Files to Include                                                           */
/******************************************************************************/

#include <htc.h>           /* Global Header File */
#include <stdint.h>        /* For uint8_t definition */
//#include <stdbool.h>       /* For true/false definition */
#include <string.h>

#include "global.h"
#include "system.h"        /* System funct/params, like osc/peripheral config */
#include "display.h"
#include "swI2C.h"
#include "DS1307.h"
#include "delay.h"
#include "input.h"
#include "tmp75.h"
#include "game.h"
#include "fonts.h"
/******************************************************************************/
/* User Global Variable Declaration                                           */
/******************************************************************************/

volatile unsigned char currentState = 1;
volatile unsigned long milliseconds = 0;

//volatile uint8_t button_flag = FULL;
volatile bit temp_flag = 0;
volatile bit date_flag = 0;
bit colon_flag = 0;

uint8_t tempString[4];
/******************************************************************************/
/* Main Program                                                               */

/******************************************************************************/
void TimeNumerical(void);
void TemperatureDisplay(void);
void ScrollTime(void);
void BinaryTime(void);
void SecondsTime(void);

void main(void){

    /* Initialize I/O and MCU Peripherals */
    InitPeripherals();

    /* Configure external hardware (i.e. -- ic's, sensors, displays)*/
    ExternalHardware();

    /* Configure MCU timers and interrupts needed*/
    InitTimersAndInterrupts();

    while(milliseconds < 1000) {
        if (BUTTON1 == CLEAR) {
            DEBOUND_LO(BUTTON1, DEBOUNCE_AMOUNT);
            DEBOUND_HI(BUTTON1, DEBOUNCE_AMOUNT);
            InputTime();
            RTCSetTime();
            DelayMs(500);
        }
    }

    /* Main loop*/
    while(1) {

        switch (currentState) {
            case TIME_NUMERICAL:
                TimeNumerical();
                break;

            case TIME_STRING:
                ScrollTime();
                break;

            case SECONDS_TIME:
                SecondsTime();
                break;

            case TIME_BINARY:
                BinaryTime();
                break;

            case TEMP:
                TemperatureDisplay();
                break;

            case GAME:
                game_loop();
                break;

        }/**SWITCH(CURRENTSTATE)**/
    }/**WHILE**/
}/**MAIN**/

void TimeNumerical(void){
    uint8_t firstLoop = SET;
    uint8_t prevSeconds = 0;

    ZERO_BUTTON_STATES();

    do {
        RTCGetDateTime();
        if ((prevSeconds != dateTime.sec) || firstLoop) {
            if (date_flag) {
                RtcNumberToString(dateTime.mon, dateTime.mday, dateTime.dstring);
                DisplayText(0, 1, dateTime.dstring);
            } else {
                if ((dateTime.sec % 2) && colon_flag) dateTime.tstring[2] = 32;
                else dateTime.tstring[2] = 58; // ':'
                RtcNumberToString(dateTime.hour, dateTime.min, dateTime.tstring);
                DisplayText(0, 1, dateTime.tstring);
            }
            display.cols[dateTime.sec / 4] |= (1 << 7);

            prevSeconds = dateTime.sec;
            firstLoop = CLEAR;
        }

        ReadButtonState();

        if (buttonState[BUTTON_0] == ON) {
            date_flag ^= 0x01;
            firstLoop = SET;
        }
        if (buttonState[BUTTON_1] == ON) {
            currentState++;
        }
        if (buttonState[BUTTON_2] == ON) {
            colon_flag ^= 0x01;
            firstLoop = SET;
        }
    } while(currentState == TIME_NUMERICAL);

    date_flag = CLEAR;
    colon_flag = CLEAR;
}

void TemperatureDisplay(void){
    uint8_t firstLoop = SET;
    uint8_t prevTemp = 0;

    ZERO_BUTTON_STATES();
    ClearDisplay();
    do {
        LM75GetTemp();
        if ((temperature.celcsius != prevTemp) || firstLoop) {

            if (temp_flag){
                NumberToString(temperature.fahrenheit,tempString);
                strcat(tempString,"F");
            }
            else {
                NumberToString(temperature.celcsius,tempString);
                strcat(tempString,"C");
            }

            DisplayText(2, 2, tempString);
            prevTemp = temperature.celcsius;
            firstLoop = CLEAR;
        }

        ReadButtonState();

        if (buttonState[BUTTON_1] == ON) {
            currentState++;
        }

        if (buttonState[BUTTON_0] == ON) {
            temp_flag = FAHRENHEIT;
            firstLoop = SET;
        }

        if (buttonState[BUTTON_2] == ON) {
            temp_flag = CELSIUS;
            firstLoop = SET;
        }

    } while(currentState == TEMP);

}

void ScrollTime(void){
    uint8_t loopStart = SET;
    uint8_t state = 0;

    ClearDisplay();
    do {
        if (loopStart) {
            RTCGetDateTime();
            LM75GetTemp();
            loopStart = CLEAR;
        }
        switch (state) {
            case 0:
                ScrollText(string_IT_IS);
                state = 1;
                break;
            case 1:
                NumberToString(temperature.celcsius,tempString);
                 strcat(tempString,"C");
                ScrollText(tempString);
                state = 2;
                break;
            case 2:
                ScrollText(string_AT);
                state = 3;
                break;
            case 3:
                RtcNumberToString(dateTime.hour, dateTime.min, dateTime.tstring);
                ScrollText(dateTime.tstring);
                state = 4;
                break;
            case 4:
                ScrollText(string_ON);
                state = 5;
                break;
            case 5:
                DateStringLong();
                state = 0;
                loopStart = SET;
                break;
        }
    } while(currentState == TIME_STRING);
}

void SecondsTime(void){

    uint8_t firstLoop = SET;
    uint8_t prevSeconds = 0;

    ZERO_BUTTON_STATES();

    do {
        RTCGetDateTime();
        if ((prevSeconds != dateTime.sec) || firstLoop) {
            if ((dateTime.sec == 0x00) || firstLoop) {
                RtcNumberToString(dateTime.hour, dateTime.min, dateTime.tstring);
                DisplayText(0, 0, dateTime.tstring);
            } else {
                NumberToString(dateTime.sec, tempString);
                DisplayText(4, 1, tempString);
            }

            prevSeconds = dateTime.sec;
            firstLoop = CLEAR;
        }

        ReadButtonState();

        if (buttonState[BUTTON_1] == ON) {
            currentState++;
        }

        if (buttonState[BUTTON_2] == ON) {
            firstLoop = SET;
        }
    } while(currentState == SECONDS_TIME);

}

void BinaryTime(void){
    uint8_t prevSec, prevMin, prevHr;
    uint8_t firstLoop = SET;

    ZERO_BUTTON_STATES();
    ClearDisplay();

    do {
        RTCGetDateTime();
        if ((prevSec != dateTime.sec) || firstLoop) {
            display.cols[10] = display.cols[11] = binFont[dateTime.sec / 10];
            display.cols[13] = display.cols[14] = binFont[dateTime.sec % 10];
            prevSec = dateTime.sec;
            if ((prevMin != dateTime.min) || firstLoop) {
                display.cols[5] = display.cols[6] = binFont[dateTime.min / 10];
                display.cols[8] = display.cols[9] = binFont[dateTime.min % 10];
                prevMin = dateTime.min;
                if ((prevHr != dateTime.hour) || firstLoop) {
                    display.cols[0] = display.cols[1] = binFont[dateTime.hour / 10];
                    display.cols[3] = display.cols[4] = binFont[dateTime.hour % 10];
                    prevHr = dateTime.hour;
                }
            }
            firstLoop = CLEAR;
        }

        ReadButtonState();

        if (buttonState[BUTTON_1] == ON) {
            currentState++;
        }

    } while(currentState == TIME_BINARY);

}/***BINARYTIME***/