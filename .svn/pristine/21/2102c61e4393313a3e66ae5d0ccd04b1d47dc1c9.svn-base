/******************************************************************************/
/* Files to Include                                                           */
/******************************************************************************/

#include <htc.h>           /* Global Header File */
#include <stdint.h>        /* For uint8_t definition */
//#include <stdbool.h>       /* For true/false definition */
#include <string.h>

#include "global.h"
#include "system.h"        /* System funct/params, like osc/peripheral config */
#include "display.h"
#include "swI2C.h"
#include "DS1307.h"
#include "delay.h"
#include "input.h"
#include "tmp75.h"


/******************************************************************************/
/* User Global Variable Declaration                                           */
/******************************************************************************/

volatile unsigned char currentState = 1;
volatile unsigned long milliseconds = 0;

volatile bit stateFlag = 0;
volatile bit readTimeFlag = 0;
volatile int8_t buttonFlag = 0;
volatile int16_t frame = 0, frameDelay = 0;
volatile uint8_t newFrame = 0;

/******************************************************************************/
/* Main Program                                                               */

/******************************************************************************/


void main(void){

    //local variables
    uint8_t tempString[50];
    uint16_t temp;
    uint16_t ptime = 0;
    /* Initialize I/O and MCU Peripherals */
    InitPeripherals();

    /* Configure external hardware (i.e. -- ic's, sensors, displays)*/
    ExternalHardware();

    /* Configure MCU timers and interrupts needed*/
    InitTimersAndInterrupts();

    while(milliseconds < 1000){
        if (buttonFlag == BUTTON_MID){
            InputTime();
            RTCSetTime();
            buttonFlag = 0;
             ptime = (uint16_t)milliseconds;
        }
    }
    /* Main loop*/
    while(1) {

        if(((uint16_t)milliseconds - ptime) > 500 ){
            RTCGetDateTime();
            readTimeFlag = SET;
            ptime = (uint16_t)milliseconds;
        }

        if (stateFlag) {
            stateFlag  = 0;
        }

        if(buttonFlag != 0){
            switch(buttonFlag) {
                case BUTTON_L:
                    DEBOUND_LO(DOWN_BUTTON,DEBOUNCE_AMOUNT);
                    currentState++;
                    DEBOUND_HI(DOWN_BUTTON, DEBOUNCE_AMOUNT);
                    break;
                case BUTTON_MID:
                    DEBOUND_LO(ENTER_BUTTON,DEBOUNCE_AMOUNT);
                    currentState = TIME_NUMERICAL;
                    DEBOUND_HI(ENTER_BUTTON, DEBOUNCE_AMOUNT);
                    break;
                case BUTTON_R:
                     DEBOUND_LO(UP_BUTTON,DEBOUNCE_AMOUNT);
                    currentState--;
                    DEBOUND_HI(UP_BUTTON, DEBOUNCE_AMOUNT);
                    break;
            }

            if (currentState > 4)currentState = 1;
            if (currentState < 1)currentState = 4;
            ClearDisplay();
            buttonFlag = 0;
        }

        switch (currentState) {
            case TIME_NUMERICAL:
                if(readTimeFlag){
                displayString[0] = '\0';
                TimeString(tempString);
                strcat(displayString, tempString);
                DisplayTime();
                readTimeFlag = CLEAR;
                }
                //DelayMs(5);
                break;

            case TIME_STRING:
                displayString[0] = '\0';
                strcat(displayString, leadIn);
                strcat(displayString, "Time is ");
                TimeString(tempString);
                strcat(displayString, tempString);
                strcat(displayString, " on ");
                DateString(tempString);
                strcat(displayString, tempString);
                strcat(displayString, "Temperature at ");
                temp = LM75GetTemp(CELCSIUS);
                NumberToString(temp, tempString);
                strcat(displayString, tempString);
                //temp = strlen(displayString);
                //displayString[temp] = 131;
                //displayString[temp+1] = '\0';
                strcat(displayString, "C");
                DisplayScrollText();
                break;

            case TEMP:
                if(readTimeFlag){
                displayString[0] = '\0';
                tempString[0] = '\0';
                temp = LM75GetTemp(FAHRENHEIT);
                NumberToString(temp, tempString);
                strcat(displayString, tempString);
                //temp = strlen(displayString);
                //displayString[temp] = 130;
                //displayString[temp + 1] = '\0';
                DisplayString();
                //DelayMs(5);
                readTimeFlag = CLEAR;
                }
                break;

            case PATTERN:
                if(newFrame){
                    Checkerboard();
                     newFrame = 0;
                }
                break;


        }
    }

}

