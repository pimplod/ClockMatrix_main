/* ***************************************************************************
 **    display.c
 **
 **  Project      : ClockMatrix_v0
 **  Target       : PIC18F14K50
 **  Description  : Project used to develop clock firmware.  Tested methods and
 **                 determined functionality (needed, wanted, and the possible)
 **
 **  Compiler     : HI-TECH C  Version 9.80
 **  IDE          : MPLABX v1.80
 **  Created      : 5/8/2013
 **  Branched     : 6/27/2013 -- started v2
 **
 **  R Hanlen <implod@gmail.com>
 ** ***************************************************************************/

/*****************************************************************************
 ** Files to Include
 *****************************************************************************/

//  Global Includes
#include <htc.h>
#include <stdint.h>
#include <string.h>

//  Local Includes
#include "global.h"
#include "delay.h"
#include "fonts.h"
#include "display.h"

/*****************************************************************************
 ** Variables
 *****************************************************************************/
extern volatile bit scrollInt_flag;
extern volatile uint8_t newFrame;
extern volatile int16_t frame, frameDelay;

/*****************************************************************************
 **Functions
 *****************************************************************************/

void DisplayInit(void){

    CLK_LOW();
    DATA_LOW();
    LATCH_LOW();

    CLK_TRIS = OUTPUT;
    DATA_TRIS = OUTPUT;
    LATCH_TRIS = OUTPUT;

    ClearDisplay();
    display.activeRow = 0;
    scrollDelay = 100;
}/***DISPLAYiNIT****/

void ShiftOutNextRow(void){

    CollumnData();
    RowData();
    //PulseOut(1 << db.activeRow);
    LATCH_HIGH();
    DelayUs(1);
    LATCH_LOW();
}/****NEXTrOW****/

void CollumnData(void){

    for (uint8_t x = 0; x < 15; ++x) {
        if (display.cols[14 - x] & (0x01 << display.activeRow)) {
            DATA_HIGH();
        } else {
            DATA_LOW();
        }
        CLK_HIGH();
        DelayUs(1);
        CLK_LOW();
    }
}/***COLLUMNdATA***/

void RowData(void){
    for (uint8_t y = 8; y > 0; --y) {
        if (display.activeRow == (y - 1)) {
            DATA_HIGH();
        } else {
            DATA_LOW();
        }
        CLK_HIGH();
        DelayUs(1);
        CLK_LOW();
    }
}/***ROWdATA***/

//void PulseOut(uint8_t value){
//
//    uint8_t bitCheck;
//    for (uint8_t i = 0; i < 8; i++) {
//        bitCheck = value & 0b10000000;
//        value = value << 1;
//        if (bitCheck == 128) {
//            DATA_HIGH();
//        } else {
//            DATA_LOW();
//        }
//        CLK_HIGH();
//        DelayUs(1);
//        CLK_LOW();
//    }
//
//}/****PULSEoUT****/

void ClearDisplay(void){

    // Initialise the display state
    for (uint8_t i = 0; i < 15; i++) {
        display.cols[i] = 0x00;
    }
}/****CLEARdISPLAY****/

void DisplayPlot(uint8_t x, uint8_t y, uint8_t state){
    // Check for out of bounds
    if (x > 14 || y > 7) {
        return;
    }

    if (state == ON) display.cols[x] |= (1 << y);
    else display.cols[x] &= ~(1 << y);
}/***DISPLAYpLOT***/

void DisplayString(void){
    int currentChar = 0;
    uint8_t string_index = 0;
    uint16_t char_index = 0;
    uint8_t char_width = 0;
    uint8_t x = 0;

    // Plot a display full of text
    for (x = 0; x < 15; x++) {
        if (char_width == 0) {
            currentChar = displayString[string_index++];
            if (currentChar == '\0') {
                char_width = 14;
                char_index = 0;
            } else {
                char_index = (currentChar - 32)*4;
                char_width = font3_1[ char_index + 3] + 1; // Include 1 empty column between chars.
            }
        }
        display.cols[x] = font3_1[ char_index ];

        if (currentChar != '\0') {
            if (char_width > 2) {
                ++char_index;
            } else {
                char_index = 0; // Empty column.
            }
        }
        --char_width;
    }/*x loop*/
}/***DISPLAYsTRING***/

void DisplayScrollText(void){
    int currentChar = 0;
    uint8_t string_index = 0;
    uint16_t char_index = 0;
    uint8_t char_width = 0;
    uint8_t length;

    scrollInt_flag = 0;
    length = (strlen(displayString));

    while(string_index < length) {

        if (scrollInt_flag == 1) {
            break;
        }

        if (char_width == 0) {
            currentChar = displayString[string_index++];
            if (currentChar == '\0') {
                char_width = 14;
                char_index = 0;
            } else {
                char_index = (currentChar - 32)*4;
                char_width = font3_1[ char_index + 3] + 1; // Include 1 empty column between chars.
            }
        }

        for (uint8_t i = 0; i < 14; i++) {
            display.cols[i] = display.cols[i + 1];
        }

        display.cols[14] = font3_1[ char_index ];

        if (currentChar != '\0') {
            if (char_width > 2) {
                ++char_index;
            } else {
                char_index = 0; // Empty column.
            }
        }
        --char_width;

        DelayMs(scrollDelay);
    }
}/***DISPLAYsCROLLtEXT***/

void NumberToString(uint16_t number, uint8_t *strPtr){

    uint8_t i = 0;
    if (number / 10000) {
        strPtr[i] = (number / 10000) % 10 + '0';
        i++;
    }
    if (number / 1000) {
        strPtr[i] = (number / 1000) % 10 + '0';
        i++;
    }
    if ((number / 100) || (i != 0)) {
        strPtr[i] = (number / 100) % 10 + '0';
        i++;
    }
    if ((number / 10) || (i != 0)) {
        strPtr[i] = (number / 10) % 10 + '0';
        i++;
    }

    strPtr[i] = number % 10 + '0';
    i++;
    strPtr[i] = '\0';
}/****NUMBERtOsTRING****/

void Checkerboard(void){
    static int16_t frame = 0;
    uint8_t i, j;
    frameDelay = 500;
    frame++;
    ClearDisplay();
    for (i = 0; i < 15; i++) {
        for (j = 0; j < 8; j++) {
            DisplayPlot(i, j, (j + i + frame) % 2);
        }
    }
}/****CHECKERBOARD****/

void BinaryTime(void){

    display.cols[0] = display.cols[1] = binFont[dateTime.hour / 10];
    display.cols[3] = display.cols[4] = binFont[dateTime.hour % 10];
    display.cols[5] = display.cols[6] = binFont[dateTime.min / 10];
    display.cols[8] = display.cols[9] = binFont[dateTime.min % 10];
    display.cols[10] = display.cols[11] = binFont[dateTime.sec / 10];
    display.cols[13] = display.cols[14] = binFont[dateTime.sec % 10];
}/***BINARYTIME***/