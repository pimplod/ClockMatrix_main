/* ***************************************************************************
 **    global.h
 **
 **  Project      : ClockMatrix_v0
 **  Target       : PIC18F14K50
 **  Description  : Project used to develop clock firmware.  Tested methods and
 **                 determined functionality (needed, wanted, and the possible)
 **
 **  Compiler     : HI-TECH C  Version 9.80
 **  IDE          : MPLABX v1.80
 **  Created      : 5/8/2013
 **  Branched     : 6/27/2013 -- started v2
 **
 **  R Hanlen <implod@gmail.com>
 ** ***************************************************************************/

#ifndef _GLOBAL_H_
#define _GLOBAL_H_

//#include <stdint.h>        /* For uint8_t definition */
//#include <stdbool.h>       /* For true/false definition */
//#include <string.h>
//#include <GenericTypeDefs.h>

/******************************************************************************/
/* MICRCONTROLLER FOSC                                                        */
/******************************************************************************/


#ifdef _BOOTLOADER
#define _XTAL_FREQ  48000000L
#else
#define _XTAL_FREQ  48000000L
#endif

#define SYS_FREQ    _XTAL_FREQ
#define FCY         SYS_FREQ/4
#define CLOCKCYCLES_PER_MICROSECOND() ( _XTAL_FREQ / 1000000L )
#define CLOCKCYCLES_TO_MICROSECONDS(a) ( ((a) * 1000L) / (_XTAL_FREQ / 1000L) )
#define MICROSECONDS_TO_CLOCKCYCLES(a) ( ((a) * (_XTAL_FREQ / 1000L)) / 1000L )
#define INSTRUCTIONS_PER_MICROSECONDS()     (FCY/1000000L)
#define MICROSECONDS_TO_INSTRUCTIONS(a)   ( ((a) * (FCY / 1000L)) / 1000L )

/******************************************************************************/
/*  Global Macros                                                             */
/******************************************************************************/
#define INPUT 0xFF
#define OUTPUT 0x00
#define ANALOG 0xFF
#define DIGITAL 0x00
#define	HIGH 0xFF
#define	LOW 0x00

#ifndef TRUE
#define TRUE 0x01
#define FALSE 0x00
#endif //TRUE
#define ON  0x01
#define OFF 0x00
#define SET 0x01
#define CLEAR 0x00
#define FULL 0xFF

#define BIT(x)                      (0x01 << (x))
/******************************************************************************/
/* State Machine Macros                                                        */
/******************************************************************************/

#define TIME_NUMERICAL      1
#define TIME_STRING         2
#define TIME_BINARY         3
#define TEMP                4
#define PATTERN             5
#define TIMER               6
#define SETTIMER            7

#define MAIN_STATES         6
/*  5 states in final product --
 * TIME_NUMERICAL TIME_STRING TIMER ALARM_SET GAME_OF_LIFE*/



/******************************************************************************/
/* Hardware                                                                   */
/******************************************************************************/


/*************************SHIFT REGISTERS**************************************/

#define CLK             LATC3
#define DATA            LATC4
#define LATCH           LATC5

#define CLK_TRIS        TRISC3
#define DATA_TRIS       TRISC4
#define LATCH_TRIS      TRISC5

#define CLK_HIGH()      (CLK = SET)
#define CLK_LOW()       (CLK = CLEAR)
#define DATA_HIGH()     (DATA = SET)
#define DATA_LOW()      (DATA = CLEAR)
#define LATCH_HIGH()    (LATCH = SET)
#define LATCH_LOW()     (LATCH = CLEAR)

/*******************************DISPLAY***************************************/

unsigned char displayString[64];
const uint8_t leadIn[] = "    ";
uint8_t scrollDelay;

struct dispBuffer{
    unsigned char cols[15];
    uint8_t activeRow;
} display;

/*************************************I2C**************************************/

#define sDA                 PORTBbits.RB4
#define SDA                 LATB4
#define SDA_TRIS            TRISB4
#define SDA_HI              (SDA_TRIS = INPUT)
#define SDA_LOW             (SDA_TRIS = OUTPUT)

#define sCL                 PORTBbits.RB6
#define SCL                 LATB6
#define SCL_TRIS            TRISB6
#define SCL_HI              (SCL_TRIS = INPUT)
#define SCL_LOW             (SCL_TRIS = OUTPUT)

#define SDA_LAT             SDA
#define SCL_LAT             SCL


/*********************************DS1307**************************************/

struct RTCStruct{
    unsigned char sec; // BCD for seconds, 00-59
    unsigned char min; // BCD for minutes, 00-59
    unsigned char hour; // BCD for hours, 00-24
    unsigned char wday; // BCD for day of the week, 00-06
    unsigned char mday; // BCD for day of the month, 01-31
    unsigned char mon; // BCD for month, 01-12
    unsigned char year; // BCD for year, 00-99
    unsigned char cntrl; // Control of sqwave output

    char tstring[6];
    char dstring[6];

} dateTime;

struct TimerStruct{
    unsigned char min;
    unsigned char hour;
    char string[6];
} timer;

/**************************TMP75**********************************************/

#define CELSIUS         0x00
#define FAHRENHEIT      0x01

struct TempStruct{
    unsigned char celcsius;
    unsigned char fahrenheit;
    char cstring[4];
    char fstring[4];
} temperature;

/*********************************BUTTONS_INPUT********************************/

#define UP_BUTTON_TRIS      TRISC2
#define DOWN_BUTTON_TRIS    TRISC0
#define ENTER_BUTTON_TRIS   TRISC1
#define UP_BUTTON           PORTCbits.RC2
#define DOWN_BUTTON         PORTCbits.RC0
#define ENTER_BUTTON        PORTCbits.RC1

#define BUTTON_INTS_ENABLE()      INT0IF = CLEAR;INT1IF = CLEAR;INT2IF = CLEAR;\
                                INT0IE = ON;INT1IE = ON;INT2IE = ON
#define BUTTON_INTS_DISABLE()     INT0IE = OFF;INT1IE = OFF;INT2IE = OFF

#define DEBOUND_HI(PIN,COUNT) WRITETIMER1(0);                  /* reset timer              */ \
                     while (TMR1 < COUNT)    /* wait until debounce time */ \
                         if (PIN == 0)          /*   if input low,          */ \
                             WRITETIMER1(0)           /*     restart wait         */


#define DEBOUND_LO(PIN,COUNT) WRITETIMER1(0);                  /* reset timer              */ \
                     while (TMR1 < COUNT)    /* wait until debounce time */ \
                         if (PIN == 1)          /*   if input high,         */ \
                             WRITETIMER1(0)           /*     restart wait         */


#define DEBOUNCE_AMOUNT	500
#define BUTTON_UP    1
#define BUTTON_ENTER  2
#define BUTTON_DOWN    3

#define DEBOUNCE(PIN)    DEBOUND_LO(PIN,DEBOUNCE_AMOUNT);\
                         DEBOUND_HI(PIN,DEBOUNCE_AMOUNT)
/*****************************TMP75*******************************************/



#endif //_GLOBAL_H_
