/* ***************************************************************************
 **    display.c
 **
 **  Project      : ClockMatrix_v0
 **  Target       : PIC18F14K50
 **  Description  : Project used to develop clock firmware.  Tested methods and
 **                 determined functionality (needed, wanted, and the possible)
 **
 **  Compiler     : HI-TECH C  Version 9.80
 **  IDE          : MPLABX v1.80
 **  Created      : 5/8/2013
 **  Branched     : 6/27/2013 -- started v2
 **
 **  R Hanlen <implod@gmail.com>
 ** ***************************************************************************/

/*****************************************************************************
 ** Files to Include
 *****************************************************************************/

//  Global Includes
#include <htc.h>
#include <stdint.h>
#include <string.h>

//  Local Includes
#include "global.h"
#include "delay.h"
#include "fonts.h"
#include "display.h"

/*****************************************************************************
 ** Variables
 *****************************************************************************/
extern volatile bit stateFlag;
extern volatile uint8_t newFrame;
extern volatile int16_t frame, frameDelay;

/*****************************************************************************
 **Functions
 *****************************************************************************/

void NextRow(void){

    PulseOut(display.rows[display.presentRow].byte.two);
    PulseOut(display.rows[display.presentRow].byte.one);
    PulseOut(1 << (7 - display.presentRow));
    LATCH_HIGH();
    DelayUs(1);
    LATCH_LOW();
}/****NEXTrOW****/

void PulseOut(uint8_t value){

    uint8_t i = 0;
    uint8_t bitCheck;
    for (i = 0; i < 8; i++) {

        bitCheck = value & 0b00000001;
        value = value >> 1;
        if (bitCheck == 1) {
            DATA_HIGH();
        } else {
            DATA_LOW();
        }
        CLK_HIGH();
        DelayUs(1);
        CLK_LOW();

    }

}/****PULSEoUT****/

void DisplayInit(void){

    CLK_LOW();
    DATA_LOW();
    LATCH_LOW();

    CLK_TRIS = OUTPUT;
    DATA_TRIS = OUTPUT;
    LATCH_TRIS = OUTPUT;
    ClearDisplay();
    display.scrollDelay = 100;
}/***DISPLAYiNIT****/

void ClearDisplay(void){
    int i;

    // Initialise the display state
    for (i = 0; i < 8; i++) {
        display.rows[i].word = 0x00;
    }

    // Set the row to be displayed
    //display.presentRow = 0;
}/****CLEARdISPLAY****/

void FlipDisplay(void){
    int i;


    for (i = 0; i < 8; i++) {

        display.rows[i].byte.one ^= (0xFF);
        display.rows[i].byte.two ^= (0xFF);
    }
    // Set the row to be displayed
    display.presentRow = 0;
}

void DisplayPlot(unsigned char x, unsigned char y, unsigned char state){
    // Check for out of bounds
    if (x > 15 || y > 7) {
        return;
    }
    if (state == ON) display.rows[y].word |= (1 << (15 - x));
    else display.rows[y].word &= ~(1 << (15 - x));
}

void DisplayString(void){
    int currentChar = 0;
    uint8_t string_index = 0;
    uint16_t char_index = 0;
    uint8_t char_width = 0;
    unsigned char x = 0;
    unsigned char y = 0;

    // Plot a display full of text
    for (x = 0; x < 15; x++) {
        if (char_width == 0) {
            currentChar = displayString[string_index++];
            if (currentChar == '\0') {
                char_width = 14;
                char_index = 0;
            } else {
                char_width = char_width_array[ currentChar - 32 ] + 1; // Include 1 empty column between chars.
                char_index = char_offset_array[ currentChar - 32 ];
            }
        }

        for (y = 0; y < 8; y++) {
            if ((char_data_array[ char_index ] & (0x01 << y)) != 0) {
                display.rows[y].word |= (1 << (15 - x));
            } else display.rows[y].word &= ~(1 << (15 - x));
        }/*y  loop*/

        if (currentChar != '\0') {
            if (char_width > 2) {
                ++char_index;
            } else {
                char_index = 0; // Empty column.
            }
        }
        --char_width;

    }/*x loop*/
}/*DISPLAYsTRING*/

void DisplayScrollText(void){
    int8_t Character = 0;
    uint16_t Index = 0;
    uint16_t String_Index = 0;
    uint8_t Width = 0;
    int current_char = 0;
    uint8_t string_index = 0;
    uint16_t char_index = 0;
    uint8_t char_width = 0;
    uint8_t length;
    uint8_t x = 0;
    uint8_t y = 0;

    stateFlag = 0;
    length = (strlen(displayString));

    while(String_Index < length) {
        if (stateFlag == 1) {
            break;
        }

        // Temp Variables for display frame loops
        if (Width == 0) {
            Character = displayString[String_Index++];
            if (Character == '\0') {
                char_width = 14;
                char_index = 0;
            } else {
                Width = char_width_array[ Character - 32 ] + 1; // Include 1 empty column between chars.
                Index = char_offset_array[ Character - 32 ];
            }
        }

        char_width = Width;
        char_index = Index;
        string_index = String_Index;
        current_char = Character;

        // Plot a display full of text (16 columns)
        for (x = 0; x < 15; x++) {
            if (char_width == 0) {
                current_char = displayString[string_index++];
                if (current_char == '\0') {
                    char_width = 14;
                    char_index = 0;
                } else {
                    char_width = char_width_array[ current_char - 32 ] + 1; // Include 1 empty column between chars.
                    char_index = char_offset_array[ current_char - 32 ];
                }
            }

            for (y = 0; y < 8; y++) {
                if ((char_data_array[ char_index ] & (0x01 << y)) != 0) {
                    display.rows[y].word |= (1 << (15 - x));
                } else display.rows[y].word &= ~(1 << (15 - x));
            }/*y  loop*/

            if (current_char != '\0') {
                if (char_width > 2) {
                    ++char_index;
                } else {
                    char_index = 0; // Empty column.
                }
            }
            --char_width;

        }/*x loop*/

        if (Character != '\0') {
            if (Width > 2) {
                ++Index;
            } else {
                Index = 0;
            }
        }
        --Width;
        //Delay sets scroll speed
        DelayMs(display.scrollDelay);
    }/*character < length*/

}/****DISPLAYsCROLLtEXT****/

void NumberToString(uint16_t number, uint8_t *strPtr){

    uint8_t i = 0;

    if (number / 10000) {
        strPtr[i] = (number / 10000) % 10 + '0';
        i++;
    }
    if (number / 1000) {
        strPtr[i] = (number / 1000) % 10 + '0';
        i++;
    }
    if ((number / 100) || (i != 0)) {
        strPtr[i] = (number / 100) % 10 + '0';
        i++;
    }
    if ((number / 10) || (i != 0)) {
        strPtr[i] = (number / 10) % 10 + '0';
        i++;
    }

    strPtr[i] = number % 10 + '0';
    i++;
    strPtr[i] = '\0';

}/****NUMBERtOsTRING****/

void DisplayTime(void){
    int currentChar = 0;
    uint8_t string_index = 0;
    uint16_t char_index = 0;
    uint8_t char_width = 0;
    unsigned char x = 0;
    unsigned char y = 0;

    static uint8_t colon = 0;
    // Plot a display full of text
    for (x = 0; x < 15; x++) {
        if (char_width == 0) {
            currentChar = displayString[string_index++];
            if((string_index == 1) && (currentChar == '1') && (strlen(displayString) == 5)){
                if(displayString[1] == '0') currentChar = 128;
                if(displayString[1] == '1') currentChar = 129;
                if(displayString[1] == '2') currentChar = 130;
                string_index ++;
            }
            if (currentChar == ':') {
                currentChar = displayString[string_index++];
            }
           
            if (currentChar == '\0') {
                char_width = 14;
                char_index = 0;
            } else {
                char_width = char_width_array[ currentChar - 32 ] + 1; // Include 1 empty column between chars.
                char_index = char_offset_array[ currentChar - 32 ];
            }
        }

        for (y = 0; y < 8; y++) {
            if ((char_data_array[ char_index ] & (0x01 << y)) != 0) {
                display.rows[y].word |= (1 << (15 - x));
            } else display.rows[y].word &= ~(1 << (15 - x));
        }/*y  loop*/

        if (currentChar != '\0') {
            if (char_width > 2) {
                ++char_index;
            } else {
                char_index = 0; // Empty column.
            }
        }
        --char_width;

    }/*x loop*/
//    if ((colon % 2)) {
//        display.rows[1].word |= (1 << 11);
//        display.rows[1].word &= ~(1 << 10);
//        display.rows[2].word |= (1 << 10);
//        display.rows[5].word |= (1 << 11);
//        display.rows[5].word &= ~(1 << 10);
//        display.rows[6].word |= (1 << 10);
//    } else {
//        display.rows[1].word |= (1 << 10);
//        display.rows[2].word |= (1 << 11);
//        display.rows[2].word &= ~(1 << 10);
//        display.rows[5].word |= (1 << 10);
//        display.rows[6].word |= (1 << 11);
//        display.rows[6].word &= ~(1 << 10);
//    }
    display.rows[7].word = (1<<(15-colon));
    colon = (colon++)%16;

}/****DISPLAYtIME*****/

void Checkerboard(void){
    uint8_t i, j;
    frameDelay = 500;
    frame++;
    ClearDisplay();
    for (i = 0; i < 15; i++) {
        for (j = 0; j < 8; j++) {
            DisplayPlot(i, j, (j + i + frame) % 2);
        }
    }

}
