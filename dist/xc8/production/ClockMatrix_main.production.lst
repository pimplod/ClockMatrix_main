

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Mon Sep 17 14:36:48 2018

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    93                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    94                           	psect	pa_nodes,global,class=CODE,delta=1
    95  0000                     tblptru	equ	0xFF8
    96                           tblptrh	equ	0xFF7
    97                           tblptrl	equ	0xFF6
    98                           tablat	equ	0xFF5
    99                           prodh	equ	0xFF4
   100                           prodl	equ	0xFF3
   101                           intcon	equ	0xFF2
   102                           intcon2	equ	0xFF1
   103                           indf1	equ	0xFE7
   104                           fsr1h	equ	0xFE2
   105                           fsr1l	equ	0xFE1
   106                           indf2	equ	0xFDF
   107                           postinc2	equ	0xFDE
   108                           postdec2	equ	0xFDD
   109                           plusw2	equ	0xFDB
   110                           fsr2h	equ	0xFDA
   111                           fsr2l	equ	0xFD9
   112                           status	equ	0xFD8
   113                           
   114                           	psect	eeprom_data
   115  F00000  01 01 01 01 01 01 01 01 	db	1,1,1,1,1,1,1,1	;# 
   116  0000                     tblptru	equ	0xFF8
   117                           tblptrh	equ	0xFF7
   118                           tblptrl	equ	0xFF6
   119                           tablat	equ	0xFF5
   120                           prodh	equ	0xFF4
   121                           prodl	equ	0xFF3
   122                           intcon	equ	0xFF2
   123                           intcon2	equ	0xFF1
   124                           indf1	equ	0xFE7
   125                           fsr1h	equ	0xFE2
   126                           fsr1l	equ	0xFE1
   127                           indf2	equ	0xFDF
   128                           postinc2	equ	0xFDE
   129                           postdec2	equ	0xFDD
   130                           plusw2	equ	0xFDB
   131                           fsr2h	equ	0xFDA
   132                           fsr2l	equ	0xFD9
   133                           status	equ	0xFD8
   134                           
   135                           	psect	idataCOMRAM
   136  001D5C                     __pidataCOMRAM:
   137                           	opt stack 0
   138                           
   139                           ;initializer for _currentState
   140  001D5C  01                 	db	1
   141                           
   142                           ;initializer for _previousState
   143  001D5D  01                 	db	1
   144                           tblptru	equ	0xFF8
   145                           tblptrh	equ	0xFF7
   146                           tblptrl	equ	0xFF6
   147                           tablat	equ	0xFF5
   148                           prodh	equ	0xFF4
   149                           prodl	equ	0xFF3
   150                           intcon	equ	0xFF2
   151                           intcon2	equ	0xFF1
   152                           indf1	equ	0xFE7
   153                           fsr1h	equ	0xFE2
   154                           fsr1l	equ	0xFE1
   155                           indf2	equ	0xFDF
   156                           postinc2	equ	0xFDE
   157                           postdec2	equ	0xFDD
   158                           plusw2	equ	0xFDB
   159                           fsr2h	equ	0xFDA
   160                           fsr2l	equ	0xFD9
   161                           status	equ	0xFD8
   162                           
   163                           	psect	idataBANK0
   164  001D5E                     __pidataBANK0:
   165                           	opt stack 0
   166                           
   167                           ;initializer for _boundary_condition
   168  001D5E  02                 	db	2
   169                           tblptru	equ	0xFF8
   170                           tblptrh	equ	0xFF7
   171                           tblptrl	equ	0xFF6
   172                           tablat	equ	0xFF5
   173                           prodh	equ	0xFF4
   174                           prodl	equ	0xFF3
   175                           intcon	equ	0xFF2
   176                           intcon2	equ	0xFF1
   177                           indf1	equ	0xFE7
   178                           fsr1h	equ	0xFE2
   179                           fsr1l	equ	0xFE1
   180                           indf2	equ	0xFDF
   181                           postinc2	equ	0xFDE
   182                           postdec2	equ	0xFDD
   183                           plusw2	equ	0xFDB
   184                           fsr2h	equ	0xFDA
   185                           fsr2l	equ	0xFD9
   186                           status	equ	0xFD8
   187                           
   188                           	psect	mediumconst
   189  003DEC                     __pmediumconst:
   190                           	opt stack 0
   191  003DEC  00                 	db	0
   192  003DED                     _font3_1:
   193                           	opt stack 0
   194  003DED  00                 	db	0
   195  003DEE  00                 	db	0
   196  003DEF  00                 	db	0
   197  003DF0  01                 	db	1
   198  003DF1  1F                 	db	31
   199  003DF2  00                 	db	0
   200  003DF3  00                 	db	0
   201  003DF4  01                 	db	1
   202  003DF5  02                 	db	2
   203  003DF6  1F                 	db	31
   204  003DF7  00                 	db	0
   205  003DF8  02                 	db	2
   206  003DF9  00                 	db	0
   207  003DFA  00                 	db	0
   208  003DFB  00                 	db	0
   209  003DFC  03                 	db	3
   210  003DFD  00                 	db	0
   211  003DFE  00                 	db	0
   212  003DFF  00                 	db	0
   213  003E00  03                 	db	3
   214  003E01  00                 	db	0
   215  003E02  00                 	db	0
   216  003E03  00                 	db	0
   217  003E04  03                 	db	3
   218  003E05  00                 	db	0
   219  003E06  00                 	db	0
   220  003E07  00                 	db	0
   221  003E08  03                 	db	3
   222  003E09  03                 	db	3
   223  003E0A  00                 	db	0
   224  003E0B  00                 	db	0
   225  003E0C  01                 	db	1
   226  003E0D  0E                 	db	14
   227  003E0E  11                 	db	17
   228  003E0F  00                 	db	0
   229  003E10  02                 	db	2
   230  003E11  11                 	db	17
   231  003E12  0E                 	db	14
   232  003E13  00                 	db	0
   233  003E14  02                 	db	2
   234  003E15  0A                 	db	10
   235  003E16  15                 	db	21
   236  003E17  0A                 	db	10
   237  003E18  03                 	db	3
   238  003E19  08                 	db	8
   239  003E1A  1C                 	db	28
   240  003E1B  08                 	db	8
   241  003E1C  03                 	db	3
   242  003E1D  18                 	db	24
   243  003E1E  00                 	db	0
   244  003E1F  00                 	db	0
   245  003E20  01                 	db	1
   246  003E21  04                 	db	4
   247  003E22  04                 	db	4
   248  003E23  00                 	db	0
   249  003E24  03                 	db	3
   250  003E25  10                 	db	16
   251  003E26  00                 	db	0
   252  003E27  00                 	db	0
   253  003E28  01                 	db	1
   254  003E29  18                 	db	24
   255  003E2A  04                 	db	4
   256  003E2B  03                 	db	3
   257  003E2C  03                 	db	3
   258  003E2D  1F                 	db	31
   259  003E2E  11                 	db	17
   260  003E2F  1F                 	db	31
   261  003E30  03                 	db	3
   262  003E31  02                 	db	2
   263  003E32  1F                 	db	31
   264  003E33  00                 	db	0
   265  003E34  03                 	db	3
   266  003E35  12                 	db	18
   267  003E36  19                 	db	25
   268  003E37  16                 	db	22
   269  003E38  03                 	db	3
   270  003E39  11                 	db	17
   271  003E3A  15                 	db	21
   272  003E3B  0E                 	db	14
   273  003E3C  03                 	db	3
   274  003E3D  07                 	db	7
   275  003E3E  04                 	db	4
   276  003E3F  1F                 	db	31
   277  003E40  03                 	db	3
   278  003E41  17                 	db	23
   279  003E42  15                 	db	21
   280  003E43  09                 	db	9
   281  003E44  03                 	db	3
   282  003E45  0E                 	db	14
   283  003E46  15                 	db	21
   284  003E47  09                 	db	9
   285  003E48  03                 	db	3
   286  003E49  11                 	db	17
   287  003E4A  0D                 	db	13
   288  003E4B  03                 	db	3
   289  003E4C  03                 	db	3
   290  003E4D  1F                 	db	31
   291  003E4E  15                 	db	21
   292  003E4F  1F                 	db	31
   293  003E50  03                 	db	3
   294  003E51  07                 	db	7
   295  003E52  05                 	db	5
   296  003E53  1F                 	db	31
   297  003E54  03                 	db	3
   298  003E55  0A                 	db	10
   299  003E56  00                 	db	0
   300  003E57  00                 	db	0
   301  003E58  01                 	db	1
   302  003E59  1A                 	db	26
   303  003E5A  00                 	db	0
   304  003E5B  00                 	db	0
   305  003E5C  01                 	db	1
   306  003E5D  08                 	db	8
   307  003E5E  14                 	db	20
   308  003E5F  00                 	db	0
   309  003E60  02                 	db	2
   310  003E61  14                 	db	20
   311  003E62  14                 	db	20
   312  003E63  00                 	db	0
   313  003E64  02                 	db	2
   314  003E65  14                 	db	20
   315  003E66  08                 	db	8
   316  003E67  00                 	db	0
   317  003E68  02                 	db	2
   318  003E69  15                 	db	21
   319  003E6A  05                 	db	5
   320  003E6B  02                 	db	2
   321  003E6C  03                 	db	3
   322  003E6D  0E                 	db	14
   323  003E6E  17                 	db	23
   324  003E6F  16                 	db	22
   325  003E70  03                 	db	3
   326  003E71  1F                 	db	31
   327  003E72  09                 	db	9
   328  003E73  1E                 	db	30
   329  003E74  03                 	db	3
   330  003E75  1F                 	db	31
   331  003E76  15                 	db	21
   332  003E77  0A                 	db	10
   333  003E78  03                 	db	3
   334  003E79  0E                 	db	14
   335  003E7A  11                 	db	17
   336  003E7B  11                 	db	17
   337  003E7C  03                 	db	3
   338  003E7D  1F                 	db	31
   339  003E7E  11                 	db	17
   340  003E7F  0E                 	db	14
   341  003E80  03                 	db	3
   342  003E81  0E                 	db	14
   343  003E82  15                 	db	21
   344  003E83  15                 	db	21
   345  003E84  03                 	db	3
   346  003E85  1E                 	db	30
   347  003E86  05                 	db	5
   348  003E87  05                 	db	5
   349  003E88  03                 	db	3
   350  003E89  0E                 	db	14
   351  003E8A  11                 	db	17
   352  003E8B  1D                 	db	29
   353  003E8C  03                 	db	3
   354  003E8D  1F                 	db	31
   355  003E8E  04                 	db	4
   356  003E8F  1F                 	db	31
   357  003E90  03                 	db	3
   358  003E91  1F                 	db	31
   359  003E92  00                 	db	0
   360  003E93  00                 	db	0
   361  003E94  01                 	db	1
   362  003E95  08                 	db	8
   363  003E96  10                 	db	16
   364  003E97  0F                 	db	15
   365  003E98  03                 	db	3
   366  003E99  1F                 	db	31
   367  003E9A  04                 	db	4
   368  003E9B  1B                 	db	27
   369  003E9C  03                 	db	3
   370  003E9D  0F                 	db	15
   371  003E9E  10                 	db	16
   372  003E9F  10                 	db	16
   373  003EA0  03                 	db	3
   374  003EA1  1F                 	db	31
   375  003EA2  02                 	db	2
   376  003EA3  1F                 	db	31
   377  003EA4  03                 	db	3
   378  003EA5  1F                 	db	31
   379  003EA6  01                 	db	1
   380  003EA7  1E                 	db	30
   381  003EA8  03                 	db	3
   382  003EA9  0E                 	db	14
   383  003EAA  11                 	db	17
   384  003EAB  0E                 	db	14
   385  003EAC  03                 	db	3
   386  003EAD  1F                 	db	31
   387  003EAE  09                 	db	9
   388  003EAF  06                 	db	6
   389  003EB0  03                 	db	3
   390  003EB1  06                 	db	6
   391  003EB2  19                 	db	25
   392  003EB3  06                 	db	6
   393  003EB4  03                 	db	3
   394  003EB5  1F                 	db	31
   395  003EB6  09                 	db	9
   396  003EB7  16                 	db	22
   397  003EB8  03                 	db	3
   398  003EB9  12                 	db	18
   399  003EBA  15                 	db	21
   400  003EBB  09                 	db	9
   401  003EBC  03                 	db	3
   402  003EBD  01                 	db	1
   403  003EBE  1F                 	db	31
   404  003EBF  01                 	db	1
   405  003EC0  03                 	db	3
   406  003EC1  0F                 	db	15
   407  003EC2  10                 	db	16
   408  003EC3  0F                 	db	15
   409  003EC4  03                 	db	3
   410  003EC5  1F                 	db	31
   411  003EC6  10                 	db	16
   412  003EC7  0F                 	db	15
   413  003EC8  03                 	db	3
   414  003EC9  1F                 	db	31
   415  003ECA  08                 	db	8
   416  003ECB  1F                 	db	31
   417  003ECC  03                 	db	3
   418  003ECD  1B                 	db	27
   419  003ECE  04                 	db	4
   420  003ECF  1B                 	db	27
   421  003ED0  03                 	db	3
   422  003ED1  03                 	db	3
   423  003ED2  1C                 	db	28
   424  003ED3  03                 	db	3
   425  003ED4  03                 	db	3
   426  003ED5  19                 	db	25
   427  003ED6  15                 	db	21
   428  003ED7  13                 	db	19
   429  003ED8  03                 	db	3
   430  003ED9  1F                 	db	31
   431  003EDA  11                 	db	17
   432  003EDB  00                 	db	0
   433  003EDC  02                 	db	2
   434  003EDD  03                 	db	3
   435  003EDE  04                 	db	4
   436  003EDF  18                 	db	24
   437  003EE0  03                 	db	3
   438  003EE1  11                 	db	17
   439  003EE2  1F                 	db	31
   440  003EE3  00                 	db	0
   441  003EE4  02                 	db	2
   442  003EE5  11                 	db	17
   443  003EE6  1F                 	db	31
   444  003EE7  00                 	db	0
   445  003EE8  02                 	db	2
   446  003EE9  1F                 	db	31
   447  003EEA  1F                 	db	31
   448  003EEB  1F                 	db	31
   449  003EEC  03                 	db	3
   450  003EED                     __end_of_font3_1:
   451                           	opt stack 0
   452  003EED                     _binFont:
   453                           	opt stack 0
   454  003EED  00                 	db	0
   455  003EEE  C0                 	db	192
   456  003EEF  30                 	db	48
   457  003EF0  F0                 	db	240
   458  003EF1  0C                 	db	12
   459  003EF2  CC                 	db	204
   460  003EF3  3C                 	db	60
   461  003EF4  FC                 	db	252
   462  003EF5  03                 	db	3
   463  003EF6  C3                 	db	195
   464  003EF7                     __end_of_binFont:
   465                           	opt stack 0
   466  003EF7                     _month_str:
   467                           	opt stack 0
   468  003EF7  20                 	db	32
   469  003EF8  20                 	db	32
   470  003EF9  20                 	db	32
   471  003EFA  00                 	db	0
   472  003EFB  4A                 	db	74
   473  003EFC  41                 	db	65
   474  003EFD  4E                 	db	78
   475  003EFE  00                 	db	0
   476  003EFF  46                 	db	70
   477  003F00  45                 	db	69
   478  003F01  42                 	db	66
   479  003F02  00                 	db	0
   480  003F03  4D                 	db	77
   481  003F04  41                 	db	65
   482  003F05  52                 	db	82
   483  003F06  00                 	db	0
   484  003F07  41                 	db	65
   485  003F08  50                 	db	80
   486  003F09  52                 	db	82
   487  003F0A  00                 	db	0
   488  003F0B  4D                 	db	77
   489  003F0C  41                 	db	65
   490  003F0D  59                 	db	89
   491  003F0E  00                 	db	0
   492  003F0F  4A                 	db	74
   493  003F10  55                 	db	85
   494  003F11  4E                 	db	78
   495  003F12  00                 	db	0
   496  003F13  4A                 	db	74
   497  003F14  55                 	db	85
   498  003F15  4C                 	db	76
   499  003F16  00                 	db	0
   500  003F17  41                 	db	65
   501  003F18  55                 	db	85
   502  003F19  47                 	db	71
   503  003F1A  00                 	db	0
   504  003F1B  53                 	db	83
   505  003F1C  45                 	db	69
   506  003F1D  50                 	db	80
   507  003F1E  00                 	db	0
   508  003F1F  4F                 	db	79
   509  003F20  43                 	db	67
   510  003F21  54                 	db	84
   511  003F22  00                 	db	0
   512  003F23  4E                 	db	78
   513  003F24  4F                 	db	79
   514  003F25  56                 	db	86
   515  003F26  00                 	db	0
   516  003F27  44                 	db	68
   517  003F28  45                 	db	69
   518  003F29  43                 	db	67
   519  003F2A  00                 	db	0
   520  003F2B                     __end_of_month_str:
   521                           	opt stack 0
   522  003F2B                     _dow_str:
   523                           	opt stack 0
   524  003F2B  20                 	db	32
   525  003F2C  20                 	db	32
   526  003F2D  20                 	db	32
   527  003F2E  00                 	db	0
   528  003F2F  4D                 	db	77
   529  003F30  4F                 	db	79
   530  003F31  4E                 	db	78
   531  003F32  00                 	db	0
   532  003F33  54                 	db	84
   533  003F34  55                 	db	85
   534  003F35  45                 	db	69
   535  003F36  00                 	db	0
   536  003F37  57                 	db	87
   537  003F38  45                 	db	69
   538  003F39  4E                 	db	78
   539  003F3A  00                 	db	0
   540  003F3B  54                 	db	84
   541  003F3C  48                 	db	72
   542  003F3D  55                 	db	85
   543  003F3E  00                 	db	0
   544  003F3F  46                 	db	70
   545  003F40  52                 	db	82
   546  003F41  49                 	db	73
   547  003F42  00                 	db	0
   548  003F43  53                 	db	83
   549  003F44  41                 	db	65
   550  003F45  54                 	db	84
   551  003F46  00                 	db	0
   552  003F47  53                 	db	83
   553  003F48  55                 	db	85
   554  003F49  4E                 	db	78
   555  003F4A  00                 	db	0
   556  003F4B                     __end_of_dow_str:
   557                           	opt stack 0
   558  003F4B                     _string_SETTIME:
   559                           	opt stack 0
   560  003F4B  2A                 	db	42
   561  003F4C  2A                 	db	42
   562  003F4D  53                 	db	83
   563  003F4E  45                 	db	69
   564  003F4F  54                 	db	84
   565  003F50  20                 	db	32
   566  003F51  54                 	db	84
   567  003F52  49                 	db	73
   568  003F53  4D                 	db	77
   569  003F54  45                 	db	69
   570  003F55  2A                 	db	42
   571  003F56  2A                 	db	42
   572  003F57  00                 	db	0
   573  003F58                     __end_of_string_SETTIME:
   574                           	opt stack 0
   575  003F58                     _string_IT_IS:
   576                           	opt stack 0
   577  003F58  49                 	db	73
   578  003F59  54                 	db	84
   579  003F5A  20                 	db	32
   580  003F5B  49                 	db	73
   581  003F5C  53                 	db	83
   582  003F5D  20                 	db	32
   583  003F5E  00                 	db	0
   584  003F5F                     __end_of_string_IT_IS:
   585                           	opt stack 0
   586  003F5F                     _string_AT:
   587                           	opt stack 0
   588  003F5F  20                 	db	32
   589  003F60  41                 	db	65
   590  003F61  54                 	db	84
   591  003F62  20                 	db	32
   592  003F63  00                 	db	0
   593  003F64                     __end_of_string_AT:
   594                           	opt stack 0
   595  003F64                     _string_DONE:
   596                           	opt stack 0
   597  003F64  44                 	db	68
   598  003F65  4F                 	db	79
   599  003F66  4E                 	db	78
   600  003F67  45                 	db	69
   601  003F68  00                 	db	0
   602  003F69                     __end_of_string_DONE:
   603                           	opt stack 0
   604  003F69                     _string_ON:
   605                           	opt stack 0
   606  003F69  20                 	db	32
   607  003F6A  4F                 	db	79
   608  003F6B  4E                 	db	78
   609  003F6C  20                 	db	32
   610  003F6D  00                 	db	0
   611  003F6E                     __end_of_string_ON:
   612                           	opt stack 0
   613  0000                     _TMR1	set	4046
   614  0000                     _ADCON0	set	4034
   615  0000                     _ADCON1	set	4033
   616  0000                     _ADCON2	set	4032
   617  0000                     _ADRESH	set	4036
   618  0000                     _ADRESL	set	4035
   619  0000                     _ANSEL	set	3966
   620  0000                     _ANSELH	set	3967
   621  0000                     _CCP1CON	set	4029
   622  0000                     _EEADR	set	4009
   623  0000                     _EECON1bits	set	4006
   624  0000                     _EECON2	set	4007
   625  0000                     _EEDATA	set	4008
   626  0000                     _INTCON2bits	set	4081
   627  0000                     _INTCONbits	set	4082
   628  0000                     _IPR2bits	set	4002
   629  0000                     _LATA	set	3977
   630  0000                     _LATB	set	3978
   631  0000                     _LATC	set	3979
   632  0000                     _PIE2bits	set	4000
   633  0000                     _PIR2bits	set	4001
   634  0000                     _PORTBbits	set	3969
   635  0000                     _PORTCbits	set	3970
   636  0000                     _RCONbits	set	4048
   637  0000                     _T0CON	set	4053
   638  0000                     _T1CON	set	4045
   639  0000                     _T3CON	set	4017
   640  0000                     _TMR0L	set	4054
   641  0000                     _TMR1H	set	4047
   642  0000                     _TMR1L	set	4046
   643  0000                     _TMR3H	set	4019
   644  0000                     _TMR3L	set	4018
   645  0000                     _TRISA	set	3986
   646  0000                     _TRISB	set	3987
   647  0000                     _TRISC	set	3988
   648  0000                     _UCFG	set	3937
   649  0000                     _ADON	set	32272
   650  0000                     _ANS8	set	31736
   651  0000                     _C1ON	set	31599
   652  0000                     _C2ON	set	31583
   653  0000                     _D1EN	set	32223
   654  0000                     _FVR1EN	set	32215
   655  0000                     _GODONE	set	32273
   656  0000                     _LATB4	set	31828
   657  0000                     _LATB6	set	31830
   658  0000                     _LATC3	set	31835
   659  0000                     _LATC4	set	31836
   660  0000                     _LATC5	set	31837
   661  0000                     _SPEN	set	32095
   662  0000                     _SRLEN	set	31559
   663  0000                     _SSPEN	set	32309
   664  0000                     _TMR0IE	set	32661
   665  0000                     _TMR0IF	set	32658
   666  0000                     _TMR3IE	set	32001
   667  0000                     _TMR3IF	set	32009
   668  0000                     _TRISB4	set	31900
   669  0000                     _TRISB6	set	31902
   670  0000                     _TRISC0	set	31904
   671  0000                     _TRISC1	set	31905
   672  0000                     _TRISC2	set	31906
   673  0000                     _TRISC3	set	31907
   674  0000                     _TRISC4	set	31908
   675  0000                     _TRISC5	set	31909
   676  0000                     _TRISC6	set	31910
   677  0000                     _USBEN	set	31523
   678  0000                     _PORTC	set	3970
   679  003F6E                     __stringdata:
   680                           	opt stack 0
   681  003F6E                     STR_13:
   682                           
   683                           ; BSR set to: 0
   684  003F6E  4A                 	db	74	;'J'
   685  003F6F  55                 	db	85	;'U'
   686  003F70  4E                 	db	78	;'N'
   687  003F71  45                 	db	69	;'E'
   688  003F72  20                 	db	32
   689  003F73  00                 	db	0
   690  003F74                     STR_16:
   691                           
   692                           ; BSR set to: 0
   693  003F74  53                 	db	83	;'S'
   694  003F75  45                 	db	69	;'E'
   695  003F76  50                 	db	80	;'P'
   696  003F77  54                 	db	84	;'T'
   697  003F78  20                 	db	32
   698  003F79  00                 	db	0
   699  003F7A                     STR_14:
   700                           
   701                           ; BSR set to: 0
   702  003F7A  4A                 	db	74	;'J'
   703  003F7B  55                 	db	85	;'U'
   704  003F7C  4C                 	db	76	;'L'
   705  003F7D  59                 	db	89	;'Y'
   706  003F7E  20                 	db	32
   707  003F7F  00                 	db	0
   708  003F80                     STR_32:
   709                           
   710                           ; BSR set to: 0
   711  003F80  44                 	db	68	;'D'
   712  003F81  41                 	db	65	;'A'
   713  003F82  54                 	db	84	;'T'
   714  003F83  45                 	db	69	;'E'
   715  003F84  00                 	db	0
   716  003F85                     STR_30:
   717                           
   718                           ; BSR set to: 0
   719  003F85  59                 	db	89	;'Y'
   720  003F86  45                 	db	69	;'E'
   721  003F87  41                 	db	65	;'A'
   722  003F88  52                 	db	82	;'R'
   723  003F89  00                 	db	0
   724  003F8A                     STR_28:
   725                           
   726                           ; BSR set to: 0
   727  003F8A  48                 	db	72	;'H'
   728  003F8B  4F                 	db	79	;'O'
   729  003F8C  55                 	db	85	;'U'
   730  003F8D  52                 	db	82	;'R'
   731  003F8E  00                 	db	0
   732  003F8F                     STR_9:
   733                           
   734                           ; BSR set to: 0
   735  003F8F  46                 	db	70	;'F'
   736  003F90  45                 	db	69	;'E'
   737  003F91  42                 	db	66	;'B'
   738  003F92  20                 	db	32
   739  003F93  00                 	db	0
   740  003F94                     STR_19:
   741                           
   742                           ; BSR set to: 0
   743  003F94  44                 	db	68	;'D'
   744  003F95  45                 	db	69	;'E'
   745  003F96  43                 	db	67	;'C'
   746  003F97  20                 	db	32
   747  003F98  00                 	db	0
   748  003F99                     STR_3:
   749                           
   750                           ; BSR set to: 0
   751  003F99  57                 	db	87	;'W'
   752  003F9A  45                 	db	69	;'E'
   753  003F9B  44                 	db	68	;'D'
   754  003F9C  20                 	db	32
   755  003F9D  00                 	db	0
   756  003F9E                     STR_2:
   757                           
   758                           ; BSR set to: 0
   759  003F9E  54                 	db	84	;'T'
   760  003F9F  55                 	db	85	;'U'
   761  003FA0  45                 	db	69	;'E'
   762  003FA1  20                 	db	32
   763  003FA2  00                 	db	0
   764  003FA3                     STR_15:
   765                           
   766                           ; BSR set to: 0
   767  003FA3  41                 	db	65	;'A'
   768  003FA4  55                 	db	85	;'U'
   769  003FA5  47                 	db	71	;'G'
   770  003FA6  20                 	db	32
   771  003FA7  00                 	db	0
   772  003FA8                     STR_5:
   773                           
   774                           ; BSR set to: 0
   775  003FA8  46                 	db	70	;'F'
   776  003FA9  52                 	db	82	;'R'
   777  003FAA  49                 	db	73	;'I'
   778  003FAB  20                 	db	32
   779  003FAC  00                 	db	0
   780  003FAD                     STR_8:
   781                           
   782                           ; BSR set to: 0
   783  003FAD  4A                 	db	74	;'J'
   784  003FAE  41                 	db	65	;'A'
   785  003FAF  4E                 	db	78	;'N'
   786  003FB0  20                 	db	32
   787  003FB1  00                 	db	0
   788  003FB2                     STR_1:
   789                           
   790                           ; BSR set to: 0
   791  003FB2  4D                 	db	77	;'M'
   792  003FB3  4F                 	db	79	;'O'
   793  003FB4  4E                 	db	78	;'N'
   794  003FB5  20                 	db	32
   795  003FB6  00                 	db	0
   796  003FB7                     STR_7:
   797                           
   798                           ; BSR set to: 0
   799  003FB7  53                 	db	83	;'S'
   800  003FB8  55                 	db	85	;'U'
   801  003FB9  4E                 	db	78	;'N'
   802  003FBA  20                 	db	32
   803  003FBB  00                 	db	0
   804  003FBC                     STR_10:
   805                           
   806                           ; BSR set to: 0
   807  003FBC  4D                 	db	77	;'M'
   808  003FBD  41                 	db	65	;'A'
   809  003FBE  52                 	db	82	;'R'
   810  003FBF  20                 	db	32
   811  003FC0  00                 	db	0
   812  003FC1                     STR_11:
   813                           
   814                           ; BSR set to: 0
   815  003FC1  41                 	db	65	;'A'
   816  003FC2  50                 	db	80	;'P'
   817  003FC3  52                 	db	82	;'R'
   818  003FC4  20                 	db	32
   819  003FC5  00                 	db	0
   820  003FC6                     STR_6:
   821                           
   822                           ; BSR set to: 0
   823  003FC6  53                 	db	83	;'S'
   824  003FC7  41                 	db	65	;'A'
   825  003FC8  54                 	db	84	;'T'
   826  003FC9  20                 	db	32
   827  003FCA  00                 	db	0
   828  003FCB                     STR_17:
   829                           
   830                           ; BSR set to: 0
   831  003FCB  4F                 	db	79	;'O'
   832  003FCC  43                 	db	67	;'C'
   833  003FCD  54                 	db	84	;'T'
   834  003FCE  20                 	db	32
   835  003FCF  00                 	db	0
   836  003FD0                     STR_4:
   837                           
   838                           ; BSR set to: 0
   839  003FD0  54                 	db	84	;'T'
   840  003FD1  48                 	db	72	;'H'
   841  003FD2  55                 	db	85	;'U'
   842  003FD3  20                 	db	32
   843  003FD4  00                 	db	0
   844  003FD5                     STR_18:
   845                           
   846                           ; BSR set to: 0
   847  003FD5  4E                 	db	78	;'N'
   848  003FD6  4F                 	db	79	;'O'
   849  003FD7  56                 	db	86	;'V'
   850  003FD8  20                 	db	32
   851  003FD9  00                 	db	0
   852  003FDA                     STR_12:
   853                           
   854                           ; BSR set to: 0
   855  003FDA  4D                 	db	77	;'M'
   856  003FDB  41                 	db	65	;'A'
   857  003FDC  59                 	db	89	;'Y'
   858  003FDD  20                 	db	32
   859  003FDE  00                 	db	0
   860  003FDF                     STR_29:
   861                           
   862                           ; BSR set to: 0
   863  003FDF  4D                 	db	77	;'M'
   864  003FE0  49                 	db	73	;'I'
   865  003FE1  4E                 	db	78	;'N'
   866  003FE2  00                 	db	0
   867  003FE3                     STR_31:
   868                           
   869                           ; BSR set to: 0
   870  003FE3  4D                 	db	77	;'M'
   871  003FE4  4F                 	db	79	;'O'
   872  003FE5  4E                 	db	78	;'N'
   873  003FE6  00                 	db	0
   874  003FE7                     STR_33:
   875                           
   876                           ; BSR set to: 0
   877  003FE7  44                 	db	68	;'D'
   878  003FE8  41                 	db	65	;'A'
   879  003FE9  59                 	db	89	;'Y'
   880  003FEA  00                 	db	0
   881  003FEB                     STR_22:
   882                           
   883                           ; BSR set to: 0
   884  003FEB  4E                 	db	78	;'N'
   885  003FEC  44                 	db	68	;'D'
   886  003FED  20                 	db	32
   887  003FEE  00                 	db	0
   888  003FEF                     STR_23:
   889                           
   890                           ; BSR set to: 0
   891  003FEF  52                 	db	82	;'R'
   892  003FF0  44                 	db	68	;'D'
   893  003FF1  20                 	db	32
   894  003FF2  00                 	db	0
   895  003FF3                     STR_20:
   896                           
   897                           ; BSR set to: 0
   898  003FF3  54                 	db	84	;'T'
   899  003FF4  48                 	db	72	;'H'
   900  003FF5  20                 	db	32
   901  003FF6  00                 	db	0
   902  003FF7                     STR_21:
   903                           
   904                           ; BSR set to: 0
   905  003FF7  53                 	db	83	;'S'
   906  003FF8  54                 	db	84	;'T'
   907  003FF9  20                 	db	32
   908  003FFA  00                 	db	0
   909  003FFB                     STR_26:
   910                           
   911                           ; BSR set to: 0
   912  003FFB  43                 	db	67	;'C'
   913  003FFC  00                 	db	0
   914  003FFD                     STR_25:
   915                           
   916                           ; BSR set to: 0
   917  003FFD  46                 	db	70	;'F'
   918  003FFE  00                 	db	0
   919  003FFF                     __end_of__stringdata:
   920                           	opt stack 0
   921                           
   922                           ; #config settings
   923  003FFF  00                 	db	0	; dummy byte at the end
   924  0000                     tblptru	equ	0xFF8
   925                           tblptrh	equ	0xFF7
   926                           tblptrl	equ	0xFF6
   927                           tablat	equ	0xFF5
   928                           prodh	equ	0xFF4
   929                           prodl	equ	0xFF3
   930                           intcon	equ	0xFF2
   931                           intcon2	equ	0xFF1
   932                           indf1	equ	0xFE7
   933                           fsr1h	equ	0xFE2
   934                           fsr1l	equ	0xFE1
   935                           indf2	equ	0xFDF
   936                           postinc2	equ	0xFDE
   937                           postdec2	equ	0xFDD
   938                           plusw2	equ	0xFDB
   939                           fsr2h	equ	0xFDA
   940                           fsr2l	equ	0xFD9
   941                           status	equ	0xFD8
   942                           
   943                           	psect	cinit
   944  001716                     __pcinit:
   945                           	opt stack 0
   946  001716                     start_initialization:
   947                           	opt stack 0
   948  001716                     __initialization:
   949                           	opt stack 0
   950                           
   951                           ; Clear objects allocated to BANK0 (80 bytes)
   952  001716  EE00  F060         	lfsr	0,__pbssBANK0
   953  00171A  0E50               	movlw	80
   954  00171C                     clear_0:
   955  00171C  6AEE               	clrf	postinc0,c
   956  00171E  06E8               	decf	wreg,f,c
   957  001720  E1FD               	bnz	clear_0
   958                           
   959                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   960  001722  6A48               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   961                           
   962                           ; Clear objects allocated to COMRAM (20 bytes)
   963  001724  EE00  F034         	lfsr	0,__pbssCOMRAM
   964  001728  0E14               	movlw	20
   965  00172A                     clear_1:
   966  00172A  6AEE               	clrf	postinc0,c
   967  00172C  06E8               	decf	wreg,f,c
   968  00172E  E1FD               	bnz	clear_1
   969                           
   970                           ; Initialize objects allocated to BANK0 (1 bytes)
   971                           ; load TBLPTR registers with __pidataBANK0
   972  001730  0E5E               	movlw	low __pidataBANK0
   973  001732  6EF6               	movwf	tblptrl,c
   974  001734  0E1D               	movlw	high __pidataBANK0
   975  001736  6EF7               	movwf	tblptrh,c
   976  001738  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   977  00173A  6EF8               	movwf	tblptru,c
   978  00173C  0009               	tblrd		*+	;fetch initializer
   979  00173E  CFF5 F0C5          	movff	tablat,__pdataBANK0
   980                           
   981                           ; Initialize objects allocated to COMRAM (2 bytes)
   982                           ; load TBLPTR registers with __pidataCOMRAM
   983  001742  0E5C               	movlw	low __pidataCOMRAM
   984  001744  6EF6               	movwf	tblptrl,c
   985  001746  0E1D               	movlw	high __pidataCOMRAM
   986  001748  6EF7               	movwf	tblptrh,c
   987  00174A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   988  00174C  6EF8               	movwf	tblptru,c
   989  00174E  0009               	tblrd		*+	;fetch initializer
   990  001750  CFF5 F049          	movff	tablat,__pdataCOMRAM
   991  001754  0009               	tblrd		*+	;fetch initializer
   992  001756  CFF5 F04A          	movff	tablat,__pdataCOMRAM+1
   993  00175A                     end_of_initialization:
   994                           	opt stack 0
   995  00175A                     __end_of__initialization:
   996                           	opt stack 0
   997  00175A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   998  00175C  6EF8               	movwf	tblptru,c
   999  00175E  0100               	movlb	0
  1000  001760  EF5A  F008         	goto	_main	;jump to C main() function
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           prodh	equ	0xFF4
  1006                           prodl	equ	0xFF3
  1007                           intcon	equ	0xFF2
  1008                           intcon2	equ	0xFF1
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           indf1	equ	0xFE7
  1012                           fsr1h	equ	0xFE2
  1013                           fsr1l	equ	0xFE1
  1014                           indf2	equ	0xFDF
  1015                           postinc2	equ	0xFDE
  1016                           postdec2	equ	0xFDD
  1017                           plusw2	equ	0xFDB
  1018                           fsr2h	equ	0xFDA
  1019                           fsr2l	equ	0xFD9
  1020                           status	equ	0xFD8
  1021                           
  1022                           	psect	bitbssCOMRAM
  1023  000240                     __pbitbssCOMRAM:
  1024                           	opt stack 0
  1025  000240                     _colon_flag:
  1026                           	opt stack 0
  1027  000240                     	ds	1
  1028  000241                     _date_flag:
  1029                           	opt stack 0
  1030  000241                     	ds	1
  1031  000242                     _temp_flag:
  1032                           	opt stack 0
  1033  000242                     	ds	1
  1034                           tblptru	equ	0xFF8
  1035                           tblptrh	equ	0xFF7
  1036                           tblptrl	equ	0xFF6
  1037                           tablat	equ	0xFF5
  1038                           prodh	equ	0xFF4
  1039                           prodl	equ	0xFF3
  1040                           intcon	equ	0xFF2
  1041                           intcon2	equ	0xFF1
  1042                           postinc0	equ	0xFEE
  1043                           wreg	equ	0xFE8
  1044                           indf1	equ	0xFE7
  1045                           fsr1h	equ	0xFE2
  1046                           fsr1l	equ	0xFE1
  1047                           indf2	equ	0xFDF
  1048                           postinc2	equ	0xFDE
  1049                           postdec2	equ	0xFDD
  1050                           plusw2	equ	0xFDB
  1051                           fsr2h	equ	0xFDA
  1052                           fsr2l	equ	0xFD9
  1053                           status	equ	0xFD8
  1054                           
  1055                           	psect	bssCOMRAM
  1056  000034                     __pbssCOMRAM:
  1057                           	opt stack 0
  1058  000034                     _milliseconds:
  1059                           	opt stack 0
  1060  000034                     	ds	4
  1061  000038                     _tmrCount:
  1062                           	opt stack 0
  1063  000038                     	ds	4
  1064  00003C                     _buttonState:
  1065                           	opt stack 0
  1066  00003C                     	ds	3
  1067  00003F                     _temperature:
  1068                           	opt stack 0
  1069  00003F                     	ds	2
  1070  000041                     _firstLoop:
  1071                           	opt stack 0
  1072  000041                     	ds	1
  1073  000042                     _button_1:
  1074                           	opt stack 0
  1075  000042                     	ds	6
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodh	equ	0xFF4
  1081                           prodl	equ	0xFF3
  1082                           intcon	equ	0xFF2
  1083                           intcon2	equ	0xFF1
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           indf1	equ	0xFE7
  1087                           fsr1h	equ	0xFE2
  1088                           fsr1l	equ	0xFE1
  1089                           indf2	equ	0xFDF
  1090                           postinc2	equ	0xFDE
  1091                           postdec2	equ	0xFDD
  1092                           plusw2	equ	0xFDB
  1093                           fsr2h	equ	0xFDA
  1094                           fsr2l	equ	0xFD9
  1095                           status	equ	0xFD8
  1096                           
  1097                           	psect	dataCOMRAM
  1098  000049                     __pdataCOMRAM:
  1099                           	opt stack 0
  1100  000049                     _currentState:
  1101                           	opt stack 0
  1102  000049                     	ds	1
  1103  00004A                     _previousState:
  1104                           	opt stack 0
  1105  00004A                     	ds	1
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           prodh	equ	0xFF4
  1111                           prodl	equ	0xFF3
  1112                           intcon	equ	0xFF2
  1113                           intcon2	equ	0xFF1
  1114                           postinc0	equ	0xFEE
  1115                           wreg	equ	0xFE8
  1116                           indf1	equ	0xFE7
  1117                           fsr1h	equ	0xFE2
  1118                           fsr1l	equ	0xFE1
  1119                           indf2	equ	0xFDF
  1120                           postinc2	equ	0xFDE
  1121                           postdec2	equ	0xFDD
  1122                           plusw2	equ	0xFDB
  1123                           fsr2h	equ	0xFDA
  1124                           fsr2l	equ	0xFD9
  1125                           status	equ	0xFD8
  1126                           
  1127                           	psect	bssBANK0
  1128  000060                     __pbssBANK0:
  1129                           	opt stack 0
  1130  000060                     _buttons:
  1131                           	opt stack 0
  1132  000060                     	ds	3
  1133  000063                     HandleButtons@holdTimer:
  1134                           	opt stack 0
  1135  000063                     	ds	2
  1136  000065                     BinaryTime@prevHr:
  1137                           	opt stack 0
  1138  000065                     	ds	1
  1139  000066                     BinaryTime@prevMin:
  1140                           	opt stack 0
  1141  000066                     	ds	1
  1142  000067                     BinaryTime@prevSec:
  1143                           	opt stack 0
  1144  000067                     	ds	1
  1145  000068                     SecondsTime@prevSeconds:
  1146                           	opt stack 0
  1147  000068                     	ds	1
  1148  000069                     TemperatureDisplay@prevTemp:
  1149                           	opt stack 0
  1150  000069                     	ds	1
  1151  00006A                     TimeNumerical@prevSeconds:
  1152                           	opt stack 0
  1153  00006A                     	ds	1
  1154  00006B                     _cycle_count:
  1155                           	opt stack 0
  1156  00006B                     	ds	1
  1157  00006C                     _pattern_index:
  1158                           	opt stack 0
  1159  00006C                     	ds	1
  1160  00006D                     _dateTime:
  1161                           	opt stack 0
  1162  00006D                     	ds	20
  1163  000081                     _display:
  1164                           	opt stack 0
  1165  000081                     	ds	16
  1166  000091                     _game_board:
  1167                           	opt stack 0
  1168  000091                     	ds	15
  1169  0000A0                     _button_0:
  1170                           	opt stack 0
  1171  0000A0                     	ds	6
  1172  0000A6                     _button_2:
  1173                           	opt stack 0
  1174  0000A6                     	ds	6
  1175  0000AC                     _tempString:
  1176                           	opt stack 0
  1177  0000AC                     	ds	4
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           prodh	equ	0xFF4
  1183                           prodl	equ	0xFF3
  1184                           intcon	equ	0xFF2
  1185                           intcon2	equ	0xFF1
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           indf1	equ	0xFE7
  1189                           fsr1h	equ	0xFE2
  1190                           fsr1l	equ	0xFE1
  1191                           indf2	equ	0xFDF
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           plusw2	equ	0xFDB
  1195                           fsr2h	equ	0xFDA
  1196                           fsr2l	equ	0xFD9
  1197                           status	equ	0xFD8
  1198                           
  1199                           	psect	dataBANK0
  1200  0000C5                     __pdataBANK0:
  1201                           	opt stack 0
  1202  0000C5                     _boundary_condition:
  1203                           	opt stack 0
  1204  0000C5                     	ds	1
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           prodh	equ	0xFF4
  1210                           prodl	equ	0xFF3
  1211                           intcon	equ	0xFF2
  1212                           intcon2	equ	0xFF1
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           indf1	equ	0xFE7
  1216                           fsr1h	equ	0xFE2
  1217                           fsr1l	equ	0xFE1
  1218                           indf2	equ	0xFDF
  1219                           postinc2	equ	0xFDE
  1220                           postdec2	equ	0xFDD
  1221                           plusw2	equ	0xFDB
  1222                           fsr2h	equ	0xFDA
  1223                           fsr2l	equ	0xFD9
  1224                           status	equ	0xFD8
  1225                           
  1226                           	psect	cstackBANK0
  1227  0000B0                     __pcstackBANK0:
  1228                           	opt stack 0
  1229  0000B0                     InputNumber@numberString:
  1230                           	opt stack 0
  1231  0000B0                     DateStringLong@tstring:
  1232                           	opt stack 0
  1233                           
  1234                           ; 16 bytes @ 0x0
  1235  0000B0                     	ds	5
  1236  0000B5                     InputNumber@done:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x5
  1240  0000B5                     	ds	1
  1241  0000B6                     InputNumber@currentNumber:
  1242                           	opt stack 0
  1243                           
  1244                           ; 1 bytes @ 0x6
  1245  0000B6                     	ds	1
  1246  0000B7                     InputNumber@result:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x7
  1250  0000B7                     	ds	1
  1251  0000B8                     InputTime@daysInMonth:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x8
  1255  0000B8                     	ds	1
  1256  0000B9                     ??_HandleButtons:
  1257                           
  1258                           ; 0 bytes @ 0x9
  1259  0000B9                     	ds	7
  1260  0000C0                     DateStringLong@number2:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x10
  1264  0000C0                     	ds	1
  1265  0000C1                     DateStringLong@length:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x11
  1269  0000C1                     	ds	2
  1270  0000C3                     DateStringLong@number1:
  1271                           	opt stack 0
  1272                           
  1273                           ; 1 bytes @ 0x13
  1274  0000C3                     	ds	1
  1275  0000C4                     ScrollTime@state:
  1276                           	opt stack 0
  1277                           
  1278                           ; 1 bytes @ 0x14
  1279  0000C4                     	ds	1
  1280                           tblptru	equ	0xFF8
  1281                           tblptrh	equ	0xFF7
  1282                           tblptrl	equ	0xFF6
  1283                           tablat	equ	0xFF5
  1284                           prodh	equ	0xFF4
  1285                           prodl	equ	0xFF3
  1286                           intcon	equ	0xFF2
  1287                           intcon2	equ	0xFF1
  1288                           postinc0	equ	0xFEE
  1289                           wreg	equ	0xFE8
  1290                           indf1	equ	0xFE7
  1291                           fsr1h	equ	0xFE2
  1292                           fsr1l	equ	0xFE1
  1293                           indf2	equ	0xFDF
  1294                           postinc2	equ	0xFDE
  1295                           postdec2	equ	0xFDD
  1296                           plusw2	equ	0xFDB
  1297                           fsr2h	equ	0xFDA
  1298                           fsr2l	equ	0xFD9
  1299                           status	equ	0xFD8
  1300                           
  1301                           	psect	cstackCOMRAM
  1302  000001                     __pcstackCOMRAM:
  1303                           	opt stack 0
  1304  000001                     ??_ButtonCheck:
  1305  000001                     
  1306                           ; 1 bytes @ 0x0
  1307  000001                     	ds	6
  1308  000007                     ButtonCheck@i:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x6
  1312  000007                     	ds	1
  1313  000008                     ??_low_isr:
  1314                           
  1315                           ; 0 bytes @ 0x7
  1316  000008                     	ds	5
  1317  00000D                     i2DelayUs@us:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0xC
  1321  00000D                     	ds	2
  1322  00000F                     ??_CollumnData:
  1323  00000F                     ??_RowData:
  1324  00000F                     
  1325                           ; 0 bytes @ 0xE
  1326  00000F                     	ds	3
  1327  000012                     CollumnData@x:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x11
  1331  000012                     	ds	1
  1332  000013                     RowData@y:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x12
  1336  000013                     	ds	1
  1337  000014                     ??_high_isr:
  1338                           
  1339                           ; 0 bytes @ 0x13
  1340  000014                     	ds	2
  1341  000016                     ??_bcd_to_dec:
  1342  000016                     ?_strlen:
  1343                           	opt stack 0
  1344  000016                     ?___wmul:
  1345                           	opt stack 0
  1346  000016                     ?___awdiv:
  1347                           	opt stack 0
  1348  000016                     ?___awmod:
  1349                           	opt stack 0
  1350  000016                     ?___llmod:
  1351                           	opt stack 0
  1352  000016                     ClearDisplay@i:
  1353                           	opt stack 0
  1354  000016                     num_ones@c:
  1355                           	opt stack 0
  1356  000016                     swap_buffers@col:
  1357                           	opt stack 0
  1358  000016                     ClearButtons@i:
  1359                           	opt stack 0
  1360  000016                     ___lbdiv@divisor:
  1361                           	opt stack 0
  1362  000016                     ___lbmod@divisor:
  1363                           	opt stack 0
  1364  000016                     Read_Eep@badd:
  1365                           	opt stack 0
  1366  000016                     Write_Eep@badd:
  1367                           	opt stack 0
  1368  000016                     DelayUs@us:
  1369                           	opt stack 0
  1370  000016                     DelayMs@ms:
  1371                           	opt stack 0
  1372  000016                     ___wmul@multiplier:
  1373                           	opt stack 0
  1374  000016                     ___awdiv@dividend:
  1375                           	opt stack 0
  1376  000016                     ___awmod@dividend:
  1377                           	opt stack 0
  1378  000016                     memset@c:
  1379                           	opt stack 0
  1380  000016                     strcat@from:
  1381                           	opt stack 0
  1382  000016                     strlen@s:
  1383                           	opt stack 0
  1384  000016                     ___llmod@dividend:
  1385                           	opt stack 0
  1386                           
  1387                           ; 4 bytes @ 0x15
  1388  000016                     	ds	1
  1389  000017                     bcd_to_dec@bcd:
  1390                           	opt stack 0
  1391  000017                     DisplayText@yStart:
  1392                           	opt stack 0
  1393  000017                     num_ones@v:
  1394                           	opt stack 0
  1395  000017                     ___lbdiv@dividend:
  1396                           	opt stack 0
  1397  000017                     ___lbmod@dividend:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x16
  1401  000017                     	ds	1
  1402  000018                     ??_DelayMs:
  1403  000018                     DelayI2C@delay:
  1404                           	opt stack 0
  1405  000018                     Write_Eep@bdat:
  1406                           	opt stack 0
  1407  000018                     ___lbdiv@counter:
  1408                           	opt stack 0
  1409  000018                     ___lbmod@counter:
  1410                           	opt stack 0
  1411  000018                     strcat@cp:
  1412                           	opt stack 0
  1413  000018                     DisplayText@gString:
  1414                           	opt stack 0
  1415  000018                     ___wmul@multiplicand:
  1416                           	opt stack 0
  1417  000018                     ___awdiv@divisor:
  1418                           	opt stack 0
  1419  000018                     ___awmod@divisor:
  1420                           	opt stack 0
  1421  000018                     memset@n:
  1422                           	opt stack 0
  1423  000018                     strlen@cp:
  1424                           	opt stack 0
  1425                           
  1426                           ; 2 bytes @ 0x17
  1427  000018                     	ds	1
  1428  000019                     RecieveI2C@ack:
  1429                           	opt stack 0
  1430  000019                     TransmitI2C@byte:
  1431                           	opt stack 0
  1432  000019                     Write_Eep@GIE_BIT_VAL:
  1433                           	opt stack 0
  1434  000019                     ___lbdiv@quotient:
  1435                           	opt stack 0
  1436  000019                     ___lbmod@rem:
  1437                           	opt stack 0
  1438  000019                     strcat@to:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x18
  1442  000019                     	ds	1
  1443  00001A                     ??_dec_to_bcd:
  1444  00001A                     ??_DisplayText:
  1445  00001A                     RtcNumberToString@number2:
  1446                           	opt stack 0
  1447  00001A                     RecieveI2C@byte:
  1448                           	opt stack 0
  1449  00001A                     TransmitI2C@ack:
  1450                           	opt stack 0
  1451  00001A                     ___awdiv@counter:
  1452                           	opt stack 0
  1453  00001A                     ___awmod@counter:
  1454                           	opt stack 0
  1455  00001A                     memset@p1:
  1456                           	opt stack 0
  1457  00001A                     ___wmul@product:
  1458                           	opt stack 0
  1459  00001A                     ___llmod@divisor:
  1460                           	opt stack 0
  1461                           
  1462                           ; 4 bytes @ 0x19
  1463  00001A                     	ds	1
  1464  00001B                     RtcNumberToString@string:
  1465                           	opt stack 0
  1466  00001B                     dec_to_bcd@dec:
  1467                           	opt stack 0
  1468  00001B                     RecieveI2C@bitNo:
  1469                           	opt stack 0
  1470  00001B                     TransmitI2C@bitNo:
  1471                           	opt stack 0
  1472  00001B                     ___awdiv@sign:
  1473                           	opt stack 0
  1474  00001B                     ___awmod@sign:
  1475                           	opt stack 0
  1476  00001B                     memset@p:
  1477                           	opt stack 0
  1478                           
  1479                           ; 1 bytes @ 0x1A
  1480  00001B                     	ds	1
  1481  00001C                     ?___lwdiv:
  1482                           	opt stack 0
  1483  00001C                     RTCGetDateTime@i2cBuffer:
  1484                           	opt stack 0
  1485  00001C                     RTCSetTime@i2cBuffer:
  1486                           	opt stack 0
  1487  00001C                     RtcNumberToString@number1:
  1488                           	opt stack 0
  1489  00001C                     AckPolling@device:
  1490                           	opt stack 0
  1491  00001C                     ___awdiv@quotient:
  1492                           	opt stack 0
  1493  00001C                     ___lwdiv@dividend:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x1B
  1497  00001C                     	ds	1
  1498  00001D                     ??_BinaryTime:
  1499  00001D                     DisplayText@xStart:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x1C
  1503  00001D                     	ds	1
  1504  00001E                     DisplayText@string_index:
  1505                           	opt stack 0
  1506  00001E                     get_board_value@col:
  1507                           	opt stack 0
  1508  00001E                     clear_board_location@col:
  1509                           	opt stack 0
  1510  00001E                     set_board_location@col:
  1511                           	opt stack 0
  1512  00001E                     ___llmod@counter:
  1513                           	opt stack 0
  1514  00001E                     ___lwdiv@divisor:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x1D
  1518  00001E                     	ds	1
  1519  00001F                     ??_get_board_value:
  1520  00001F                     ??_clear_board_location:
  1521  00001F                     ??_set_board_location:
  1522  00001F                     DisplayText@char_width:
  1523                           	opt stack 0
  1524                           
  1525                           ; 1 bytes @ 0x1E
  1526  00001F                     	ds	1
  1527  000020                     ___lwdiv@counter:
  1528                           	opt stack 0
  1529  000020                     DisplayText@char_index:
  1530                           	opt stack 0
  1531  000020                     DelayMs@time:
  1532                           	opt stack 0
  1533                           
  1534                           ; 4 bytes @ 0x1F
  1535  000020                     	ds	1
  1536  000021                     set_board_location@row:
  1537                           	opt stack 0
  1538  000021                     ___lwdiv@quotient:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x20
  1542  000021                     	ds	1
  1543  000022                     ??_glider:
  1544  000022                     clear_board_location@row:
  1545                           	opt stack 0
  1546  000022                     blinker@row:
  1547                           	opt stack 0
  1548  000022                     DisplayText@currentChar:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x21
  1552  000022                     	ds	1
  1553  000023                     ??_LM75GetTemp:
  1554  000023                     ??_random_board:
  1555  000023                     ?___lwmod:
  1556                           	opt stack 0
  1557  000023                     ___lwmod@dividend:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x22
  1561  000023                     	ds	1
  1562  000024                     DisplayText@x:
  1563                           	opt stack 0
  1564  000024                     get_board_value@row:
  1565                           	opt stack 0
  1566  000024                     ScrollText@gString:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x23
  1570  000024                     	ds	1
  1571  000025                     ??_TimeNumerical:
  1572  000025                     get_neighbors@col:
  1573                           	opt stack 0
  1574  000025                     InputString@istring:
  1575                           	opt stack 0
  1576  000025                     ___lwmod@divisor:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x24
  1580  000025                     	ds	1
  1581  000026                     ??_ScrollText:
  1582  000026                     ??_get_neighbors:
  1583  000026                     glider@row:
  1584                           	opt stack 0
  1585  000026                     random_board@result:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x25
  1589  000026                     	ds	1
  1590  000027                     InputString@min:
  1591                           	opt stack 0
  1592  000027                     get_neighbors@return_value:
  1593                           	opt stack 0
  1594  000027                     glider@col:
  1595                           	opt stack 0
  1596  000027                     ___lwmod@counter:
  1597                           	opt stack 0
  1598                           
  1599                           ; 1 bytes @ 0x26
  1600  000027                     	ds	1
  1601  000028                     InputString@max:
  1602                           	opt stack 0
  1603  000028                     get_neighbors@row:
  1604                           	opt stack 0
  1605  000028                     random_board@row:
  1606                           	opt stack 0
  1607  000028                     LM75GetTemp@tempHi:
  1608                           	opt stack 0
  1609  000028                     NumberToString@number:
  1610                           	opt stack 0
  1611                           
  1612                           ; 2 bytes @ 0x27
  1613  000028                     	ds	1
  1614  000029                     get_neighbors@neighbor_value:
  1615                           	opt stack 0
  1616  000029                     random_board@col:
  1617                           	opt stack 0
  1618  000029                     InputString@stringArray:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x28
  1622  000029                     	ds	1
  1623  00002A                     NumberToString@strPtr:
  1624                           	opt stack 0
  1625  00002A                     get_neighbors@rr:
  1626                           	opt stack 0
  1627  00002A                     LM75GetTemp@tempLo:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x29
  1631  00002A                     	ds	1
  1632  00002B                     ScrollText@length:
  1633                           	opt stack 0
  1634  00002B                     NumberToString@i:
  1635                           	opt stack 0
  1636  00002B                     InputString@currentNumber:
  1637                           	opt stack 0
  1638  00002B                     get_neighbors@cc:
  1639                           	opt stack 0
  1640                           
  1641                           ; 1 bytes @ 0x2A
  1642  00002B                     	ds	1
  1643  00002C                     ScrollText@string_index:
  1644                           	opt stack 0
  1645  00002C                     InputString@done:
  1646                           	opt stack 0
  1647  00002C                     get_neighbors@r:
  1648                           	opt stack 0
  1649  00002C                     InputNumber@istring:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0x2B
  1653  00002C                     	ds	1
  1654  00002D                     ScrollText@char_width:
  1655                           	opt stack 0
  1656  00002D                     InputString@result:
  1657                           	opt stack 0
  1658  00002D                     get_neighbors@c:
  1659                           	opt stack 0
  1660                           
  1661                           ; 1 bytes @ 0x2C
  1662  00002D                     	ds	1
  1663  00002E                     InputNumber@min:
  1664                           	opt stack 0
  1665  00002E                     calculate_next_game_board@neighbors:
  1666                           	opt stack 0
  1667  00002E                     ScrollText@char_index:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x2D
  1671  00002E                     	ds	1
  1672  00002F                     InputNumber@max:
  1673                           	opt stack 0
  1674  00002F                     calculate_next_game_board@cell_is_alive:
  1675                           	opt stack 0
  1676                           
  1677                           ; 1 bytes @ 0x2E
  1678  00002F                     	ds	1
  1679  000030                     calculate_next_game_board@alive_count:
  1680                           	opt stack 0
  1681  000030                     ScrollText@currentChar:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x2F
  1685  000030                     	ds	1
  1686  000031                     calculate_next_game_board@num_living_neighbors:
  1687                           	opt stack 0
  1688                           
  1689                           ; 1 bytes @ 0x30
  1690  000031                     	ds	1
  1691  000032                     ScrollText@i:
  1692                           	opt stack 0
  1693  000032                     calculate_next_game_board@row:
  1694                           	opt stack 0
  1695                           
  1696                           ; 1 bytes @ 0x31
  1697  000032                     	ds	1
  1698  000033                     ??_InputTime:
  1699  000033                     ??_DateStringLong:
  1700  000033                     calculate_next_game_board@col:
  1701                           	opt stack 0
  1702                           
  1703                           ; 1 bytes @ 0x32
  1704  000033                     	ds	1
  1705  000034                     tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           prodh	equ	0xFF4
  1710                           prodl	equ	0xFF3
  1711                           intcon	equ	0xFF2
  1712                           intcon2	equ	0xFF1
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           indf1	equ	0xFE7
  1716                           fsr1h	equ	0xFE2
  1717                           fsr1l	equ	0xFE1
  1718                           indf2	equ	0xFDF
  1719                           postinc2	equ	0xFDE
  1720                           postdec2	equ	0xFDD
  1721                           plusw2	equ	0xFDB
  1722                           fsr2h	equ	0xFDA
  1723                           fsr2l	equ	0xFD9
  1724                           status	equ	0xFD8
  1725                           
  1726                           ; 0 bytes @ 0x33
  1727 ;;
  1728 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1729 ;;
  1730 ;; *************** function _main *****************
  1731 ;; Defined at:
  1732 ;;		line 49 in file "main.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;		None
  1735 ;; Auto vars:     Size  Location     Type
  1736 ;;		None
  1737 ;; Return value:  Size  Location     Type
  1738 ;;		None               void
  1739 ;; Registers used:
  1740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : 0/0
  1743 ;;		On exit  : 0/0
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1746 ;;      Params:         0       0       0       0
  1747 ;;      Locals:         0       0       0       0
  1748 ;;      Temps:          0       0       0       0
  1749 ;;      Totals:         0       0       0       0
  1750 ;;Total ram usage:        0 bytes
  1751 ;; Hardware stack levels required when called:   14
  1752 ;; This function calls:
  1753 ;;		_BinaryTime
  1754 ;;		_ExternalHardware
  1755 ;;		_HandleButtons
  1756 ;;		_InitHardwareVars
  1757 ;;		_InitPeripherals
  1758 ;;		_InitTimersAndInterrupts
  1759 ;;		_Read_Eep
  1760 ;;		_ScrollTime
  1761 ;;		_SecondsTime
  1762 ;;		_TemperatureDisplay
  1763 ;;		_TimeNumerical
  1764 ;;		_Write_Eep
  1765 ;;		_game_loop
  1766 ;; This function is called by:
  1767 ;;		Startup code after reset
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text0
  1772  0010B4                     __ptext0:
  1773                           	opt stack 0
  1774  0010B4                     _main:
  1775                           	opt stack 17
  1776                           
  1777                           ;main.c: 52: InitPeripherals();
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;incstack = 0
  1781  0010B4  EC13  F00D         	call	_InitPeripherals	;wreg free
  1782                           
  1783                           ;main.c: 54: ExternalHardware();
  1784  0010B8  EC93  F00E         	call	_ExternalHardware	;wreg free
  1785                           
  1786                           ;main.c: 56: InitHardwareVars();
  1787  0010BC  EC3B  F00B         	call	_InitHardwareVars	;wreg free
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;main.c: 58: InitTimersAndInterrupts();
  1791  0010C0  ECA4  F00C         	call	_InitTimersAndInterrupts	;wreg free
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;main.c: 76: currentState = Read_Eep(0);
  1795  0010C4  0E00               	movlw	0
  1796  0010C6  6A17               	clrf	Read_Eep@badd+1,c
  1797  0010C8  6A16               	clrf	Read_Eep@badd,c
  1798  0010CA  EC8A  F00E         	call	_Read_Eep	;wreg free
  1799  0010CE  6E49               	movwf	_currentState,c	;volatile
  1800  0010D0                     l6222:
  1801                           
  1802                           ;main.c: 80: if ((currentState < 1) || (currentState > 6)) {
  1803  0010D0  5049               	movf	_currentState,w,c	;volatile
  1804  0010D2  E003               	bz	l6226
  1805  0010D4  0E06               	movlw	6
  1806  0010D6  6449               	cpfsgt	_currentState,c	;volatile
  1807  0010D8  D015               	goto	l6242
  1808  0010DA                     l6226:
  1809                           
  1810                           ;main.c: 81: currentState = 1;
  1811  0010DA  0E01               	movlw	1
  1812  0010DC  6E49               	movwf	_currentState,c	;volatile
  1813  0010DE  D012               	goto	l6242
  1814  0010E0                     l6228:
  1815                           
  1816                           ;main.c: 86: TimeNumerical();
  1817  0010E0  EC7C  F007         	call	_TimeNumerical	;wreg free
  1818                           
  1819                           ;main.c: 87: break;
  1820  0010E4  D01C               	goto	l6244
  1821  0010E6                     l6230:
  1822                           
  1823                           ;main.c: 90: ScrollTime();
  1824  0010E6  EC72  F005         	call	_ScrollTime	;wreg free
  1825                           
  1826                           ;main.c: 91: break;
  1827  0010EA  D019               	goto	l6244
  1828  0010EC                     l6232:
  1829                           
  1830                           ;main.c: 94: SecondsTime();
  1831  0010EC  ECE0  F00A         	call	_SecondsTime	;wreg free
  1832                           
  1833                           ;main.c: 95: break;
  1834  0010F0  D016               	goto	l6244
  1835  0010F2                     l6234:
  1836                           
  1837                           ;main.c: 98: BinaryTime();
  1838  0010F2  EC99  F004         	call	_BinaryTime	;wreg free
  1839                           
  1840                           ;main.c: 99: break;
  1841  0010F6  D013               	goto	l6244
  1842  0010F8                     l6236:
  1843                           
  1844                           ;main.c: 102: TemperatureDisplay();
  1845  0010F8  EC9E  F009         	call	_TemperatureDisplay	;wreg free
  1846                           
  1847                           ;main.c: 103: break;
  1848  0010FC  D010               	goto	l6244
  1849  0010FE                     l6238:
  1850                           
  1851                           ;main.c: 106: game_loop();
  1852  0010FE  EC21  F009         	call	_game_loop	;wreg free
  1853                           
  1854                           ;main.c: 107: break;
  1855  001102  D00D               	goto	l6244
  1856  001104                     l6242:
  1857  001104  5049               	movf	_currentState,w,c	;volatile
  1858                           
  1859                           ; Switch size 1, requested type "space"
  1860                           ; Number of cases is 6, Range of values is 1 to 6
  1861                           ; switch strategies available:
  1862                           ; Name         Instructions Cycles
  1863                           ; simple_byte           19    10 (average)
  1864                           ;	Chosen strategy is simple_byte
  1865  001106  0A01               	xorlw	1	; case 1
  1866  001108  E0EB               	bz	l6228
  1867  00110A  0A03               	xorlw	3	; case 2
  1868  00110C  E0EC               	bz	l6230
  1869  00110E  0A01               	xorlw	1	; case 3
  1870  001110  E0ED               	bz	l6232
  1871  001112  0A07               	xorlw	7	; case 4
  1872  001114  E0EE               	bz	l6234
  1873  001116  0A01               	xorlw	1	; case 5
  1874  001118  E0EF               	bz	l6236
  1875  00111A  0A03               	xorlw	3	; case 6
  1876  00111C  E0F0               	bz	l6238
  1877  00111E                     l6244:
  1878                           
  1879                           ;main.c: 111: HandleButtons();
  1880  00111E  EC27  F004         	call	_HandleButtons	;wreg free
  1881                           
  1882                           ;main.c: 113: if (previousState != currentState) {
  1883  001122  504A               	movf	_previousState,w,c	;volatile
  1884  001124  1849               	xorwf	_currentState,w,c	;volatile
  1885  001126  E0D4               	bz	l6222
  1886                           
  1887                           ;main.c: 114: Write_Eep(0, currentState);
  1888  001128  0E00               	movlw	0
  1889  00112A  6A17               	clrf	Write_Eep@badd+1,c
  1890  00112C  6A16               	clrf	Write_Eep@badd,c
  1891  00112E  C049  F018         	movff	_currentState,Write_Eep@bdat	;volatile
  1892  001132  ECF9  F00C         	call	_Write_Eep	;wreg free
  1893                           
  1894                           ;main.c: 115: previousState = currentState;
  1895  001136  C049  F04A         	movff	_currentState,_previousState	;volatile
  1896  00113A  D7CA               	goto	l6222
  1897  00113C                     __end_of_main:
  1898                           	opt stack 0
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           prodh	equ	0xFF4
  1904                           prodl	equ	0xFF3
  1905                           intcon	equ	0xFF2
  1906                           intcon2	equ	0xFF1
  1907                           postinc0	equ	0xFEE
  1908                           wreg	equ	0xFE8
  1909                           indf1	equ	0xFE7
  1910                           fsr1h	equ	0xFE2
  1911                           fsr1l	equ	0xFE1
  1912                           indf2	equ	0xFDF
  1913                           postinc2	equ	0xFDE
  1914                           postdec2	equ	0xFDD
  1915                           plusw2	equ	0xFDB
  1916                           fsr2h	equ	0xFDA
  1917                           fsr2l	equ	0xFD9
  1918                           status	equ	0xFD8
  1919                           
  1920 ;; *************** function _game_loop *****************
  1921 ;; Defined at:
  1922 ;;		line 71 in file "game.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;		None
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;		None
  1927 ;; Return value:  Size  Location     Type
  1928 ;;		None               void
  1929 ;; Registers used:
  1930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1936 ;;      Params:         0       0       0       0
  1937 ;;      Locals:         0       0       0       0
  1938 ;;      Temps:          0       0       0       0
  1939 ;;      Totals:         0       0       0       0
  1940 ;;Total ram usage:        0 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:   11
  1943 ;; This function calls:
  1944 ;;		_DelayMs
  1945 ;;		_ReadButtonState
  1946 ;;		_blinker
  1947 ;;		_block
  1948 ;;		_calculate_next_game_board
  1949 ;;		_glider
  1950 ;;		_init_game
  1951 ;;		_random_board
  1952 ;;		_swap_buffers
  1953 ;; This function is called by:
  1954 ;;		_main
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text1
  1959  001242                     __ptext1:
  1960                           	opt stack 0
  1961  001242                     _game_loop:
  1962                           	opt stack 19
  1963                           
  1964                           ;game.c: 73: buttonState[0] = 0x00; buttonState[2] = 0x00; buttonState[1] = 0x00;
  1965                           
  1966                           ;incstack = 0
  1967  001242  6A3C               	clrf	_buttonState,c	;volatile
  1968  001244  6A3E               	clrf	_buttonState+2,c	;volatile
  1969  001246  6A3D               	clrf	_buttonState+1,c	;volatile
  1970                           
  1971                           ;game.c: 75: init_game();
  1972  001248  EC00  F00E         	call	_init_game	;wreg free
  1973  00124C                     l6088:
  1974                           
  1975                           ;game.c: 77: if (calculate_next_game_board() == 0) random_board();
  1976  00124C  ECE1  F008         	call	_calculate_next_game_board	;wreg free
  1977  001250  0900               	iorlw	0
  1978  001252  B4D8               	btfsc	status,2,c
  1979                           
  1980                           ; BSR set to: 0
  1981  001254  EC7E  F00A         	call	_random_board	;wreg free
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;game.c: 80: if (60 == cycle_count) {
  1985  001258  516B               	movf	_cycle_count& (0+255),w,b
  1986  00125A  0A3C               	xorlw	60
  1987  00125C  E119               	bnz	l6110
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;game.c: 81: cycle_count = 0;
  1991  00125E  6B6B               	clrf	_cycle_count& (0+255),b
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;game.c: 83: pattern_index = (pattern_index + 1) % 4;
  1995  001260  296C               	incf	_pattern_index& (0+255),w,b
  1996  001262  0B03               	andlw	3
  1997  001264  6F6C               	movwf	_pattern_index& (0+255),b
  1998                           
  1999                           ;game.c: 85: switch (pattern_index) {
  2000  001266  D00C               	goto	l6108
  2001  001268                     l6098:
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;game.c: 88: glider();
  2005  001268  EC60  F009         	call	_glider	;wreg free
  2006                           
  2007                           ;game.c: 91: break;
  2008  00126C  D011               	goto	l6110
  2009  00126E                     l6100:
  2010                           
  2011                           ; BSR set to: 0
  2012                           ;game.c: 93: block();
  2013  00126E  ECC1  F00C         	call	_block	;wreg free
  2014                           
  2015                           ;game.c: 96: break;
  2016  001272  D00E               	goto	l6110
  2017  001274                     l6102:
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;game.c: 98: blinker();
  2021  001274  ECAA  F00D         	call	_blinker	;wreg free
  2022                           
  2023                           ;game.c: 101: break;
  2024  001278  D00B               	goto	l6110
  2025  00127A                     l6104:
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;game.c: 103: random_board();
  2029  00127A  EC7E  F00A         	call	_random_board	;wreg free
  2030                           
  2031                           ;game.c: 106: break;
  2032  00127E  D008               	goto	l6110
  2033  001280                     l6108:
  2034                           
  2035                           ; BSR set to: 0
  2036  001280  516C               	movf	_pattern_index& (0+255),w,b
  2037                           
  2038                           ; Switch size 1, requested type "space"
  2039                           ; Number of cases is 4, Range of values is 0 to 3
  2040                           ; switch strategies available:
  2041                           ; Name         Instructions Cycles
  2042                           ; simple_byte           13     7 (average)
  2043                           ;	Chosen strategy is simple_byte
  2044  001282  E0F2               	bz	l6098
  2045  001284  0A01               	xorlw	1	; case 1
  2046  001286  E0F3               	bz	l6100
  2047  001288  0A03               	xorlw	3	; case 2
  2048  00128A  E0F4               	bz	l6102
  2049  00128C  0A01               	xorlw	1	; case 3
  2050  00128E  E0F5               	bz	l6104
  2051  001290                     l6110:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;game.c: 108: }
  2055                           ;game.c: 109: cycle_count++;
  2056  001290  2B6B               	incf	_cycle_count& (0+255),f,b
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;game.c: 111: swap_buffers();
  2060  001292  ECE0  F00D         	call	_swap_buffers	;wreg free
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;game.c: 112: DelayMs(200);
  2064  001296  6A17               	clrf	DelayMs@ms+1,c
  2065  001298  0EC8               	movlw	200
  2066  00129A  6E16               	movwf	DelayMs@ms,c
  2067  00129C  EC63  F00B         	call	_DelayMs	;wreg free
  2068                           
  2069                           ;game.c: 114: ReadButtonState();
  2070  0012A0  EC2F  F003         	call	_ReadButtonState	;wreg free
  2071                           
  2072                           ;game.c: 116: if(buttonState[1] == 0x01){
  2073  0012A4  043D               	decf	_buttonState+1,w,c	;volatile
  2074  0012A6  E102               	bnz	l6122
  2075                           
  2076                           ;game.c: 117: currentState = 1;
  2077  0012A8  0E01               	movlw	1
  2078  0012AA  6E49               	movwf	_currentState,c	;volatile
  2079  0012AC                     l6122:
  2080                           
  2081                           ;game.c: 118: }
  2082                           ;game.c: 120: if(buttonState[0] == 0x01){
  2083  0012AC  043C               	decf	_buttonState,w,c	;volatile
  2084  0012AE  E103               	bnz	l6126
  2085                           
  2086                           ;game.c: 121: cycle_count = 60;
  2087  0012B0  0E3C               	movlw	60
  2088  0012B2  0100               	movlb	0	; () banked
  2089  0012B4  6F6B               	movwf	_cycle_count& (0+255),b
  2090  0012B6                     l6126:
  2091                           
  2092                           ;game.c: 122: }
  2093                           ;game.c: 124: } while(currentState == 6);
  2094  0012B6  5049               	movf	_currentState,w,c	;volatile
  2095  0012B8  0A06               	xorlw	6
  2096  0012BA  A4D8               	btfss	status,2,c
  2097  0012BC  0012               	return	
  2098  0012BE  D7C6               	goto	l6088
  2099  0012C0                     __end_of_game_loop:
  2100                           	opt stack 0
  2101                           tblptru	equ	0xFF8
  2102                           tblptrh	equ	0xFF7
  2103                           tblptrl	equ	0xFF6
  2104                           tablat	equ	0xFF5
  2105                           prodh	equ	0xFF4
  2106                           prodl	equ	0xFF3
  2107                           intcon	equ	0xFF2
  2108                           intcon2	equ	0xFF1
  2109                           postinc0	equ	0xFEE
  2110                           wreg	equ	0xFE8
  2111                           indf1	equ	0xFE7
  2112                           fsr1h	equ	0xFE2
  2113                           fsr1l	equ	0xFE1
  2114                           indf2	equ	0xFDF
  2115                           postinc2	equ	0xFDE
  2116                           postdec2	equ	0xFDD
  2117                           plusw2	equ	0xFDB
  2118                           fsr2h	equ	0xFDA
  2119                           fsr2l	equ	0xFD9
  2120                           status	equ	0xFD8
  2121                           
  2122 ;; *************** function _random_board *****************
  2123 ;; Defined at:
  2124 ;;		line 246 in file "game.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;  col             1   40[COMRAM] unsigned char 
  2129 ;;  row             1   39[COMRAM] unsigned char 
  2130 ;;  result          2   37[COMRAM] unsigned int 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;		None               void
  2133 ;; Registers used:
  2134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : F/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2140 ;;      Params:         0       0       0       0
  2141 ;;      Locals:         4       0       0       0
  2142 ;;      Temps:          3       0       0       0
  2143 ;;      Totals:         7       0       0       0
  2144 ;;Total ram usage:        7 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    9
  2147 ;; This function calls:
  2148 ;;		_clear_board_location
  2149 ;;		_set_board_location
  2150 ;; This function is called by:
  2151 ;;		_game_loop
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	text2
  2156  0014FC                     __ptext2:
  2157                           	opt stack 0
  2158  0014FC                     _random_board:
  2159                           	opt stack 20
  2160                           
  2161                           ;game.c: 247: uint16_t result;
  2162                           ;game.c: 249: for (uint8_t row = 0; row < (((8))); row++) {
  2163                           
  2164                           ;incstack = 0
  2165  0014FC  6A28               	clrf	random_board@row,c
  2166  0014FE                     l989:
  2167                           
  2168                           ;game.c: 250: GODONE = 0x01;
  2169  0014FE  82C2               	bsf	4034,1,c	;volatile
  2170  001500                     l991:
  2171  001500  B2C2               	btfsc	4034,1,c	;volatile
  2172  001502  D7FE               	goto	l991
  2173                           
  2174                           ;game.c: 252: result = ADRESL;
  2175  001504  CFC3 F026          	movff	4035,random_board@result	;volatile
  2176  001508  6A27               	clrf	random_board@result+1,c
  2177                           
  2178                           ;game.c: 253: result += (ADRESH << 8);
  2179  00150A  50C4               	movf	4036,w,c	;volatile
  2180  00150C  2627               	addwf	random_board@result+1,f,c
  2181                           
  2182                           ;game.c: 254: result += ((TMR1));
  2183  00150E  50CE               	movf	4046,w,c	;volatile
  2184  001510  2626               	addwf	random_board@result,f,c
  2185  001512  50CF               	movf	4047,w,c	;volatile
  2186  001514  2227               	addwfc	random_board@result+1,f,c
  2187                           
  2188                           ;game.c: 255: for (uint8_t col = 0; col < (((15))); col++) {
  2189  001516  6A29               	clrf	random_board@col,c
  2190  001518                     l5892:
  2191                           
  2192                           ;game.c: 256: if ((result >> col) & 0x01) {
  2193  001518  C029  F023         	movff	random_board@col,??_random_board
  2194  00151C  C026  F024         	movff	random_board@result,??_random_board+1
  2195  001520  C027  F025         	movff	random_board@result+1,??_random_board+2
  2196  001524  2A23               	incf	??_random_board,f,c
  2197  001526  D003               	goto	u5714
  2198  001528                     u5715:
  2199  001528  90D8               	bcf	status,0,c
  2200  00152A  3225               	rrcf	??_random_board+2,f,c
  2201  00152C  3224               	rrcf	??_random_board+1,f,c
  2202  00152E                     u5714:
  2203  00152E  2E23               	decfsz	??_random_board,f,c
  2204  001530  D7FB               	goto	u5715
  2205  001532  A024               	btfss	??_random_board+1,0,c
  2206  001534  D006               	goto	l5896
  2207                           
  2208                           ;game.c: 257: set_board_location(row, col);
  2209  001536  C029  F01E         	movff	random_board@col,set_board_location@col
  2210  00153A  5028               	movf	random_board@row,w,c
  2211  00153C  ECD9  F00B         	call	_set_board_location
  2212                           
  2213                           ;game.c: 258: } else {
  2214  001540  D005               	goto	l5898
  2215  001542                     l5896:
  2216                           
  2217                           ;game.c: 259: clear_board_location(row, col);
  2218  001542  C029  F01E         	movff	random_board@col,clear_board_location@col
  2219  001546  5028               	movf	random_board@row,w,c
  2220  001548  ECB2  F00B         	call	_clear_board_location
  2221  00154C                     l5898:
  2222                           
  2223                           ; BSR set to: 0
  2224  00154C  2A29               	incf	random_board@col,f,c
  2225                           
  2226                           ; BSR set to: 0
  2227  00154E  0E0E               	movlw	14
  2228  001550  6429               	cpfsgt	random_board@col,c
  2229  001552  D7E2               	goto	l5892
  2230                           
  2231                           ; BSR set to: 0
  2232  001554  2A28               	incf	random_board@row,f,c
  2233                           
  2234                           ; BSR set to: 0
  2235  001556  0E07               	movlw	7
  2236  001558  6428               	cpfsgt	random_board@row,c
  2237  00155A  D7D1               	goto	l989
  2238  00155C  0C07               	retlw	7
  2239  00155E                     __end_of_random_board:
  2240                           	opt stack 0
  2241                           tblptru	equ	0xFF8
  2242                           tblptrh	equ	0xFF7
  2243                           tblptrl	equ	0xFF6
  2244                           tablat	equ	0xFF5
  2245                           prodh	equ	0xFF4
  2246                           prodl	equ	0xFF3
  2247                           intcon	equ	0xFF2
  2248                           intcon2	equ	0xFF1
  2249                           postinc0	equ	0xFEE
  2250                           wreg	equ	0xFE8
  2251                           indf1	equ	0xFE7
  2252                           fsr1h	equ	0xFE2
  2253                           fsr1l	equ	0xFE1
  2254                           indf2	equ	0xFDF
  2255                           postinc2	equ	0xFDE
  2256                           postdec2	equ	0xFDD
  2257                           plusw2	equ	0xFDB
  2258                           fsr2h	equ	0xFDA
  2259                           fsr2l	equ	0xFD9
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _init_game *****************
  2263 ;; Defined at:
  2264 ;;		line 62 in file "game.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;		None               void
  2271 ;; Registers used:
  2272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : F/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2278 ;;      Params:         0       0       0       0
  2279 ;;      Locals:         0       0       0       0
  2280 ;;      Temps:          0       0       0       0
  2281 ;;      Totals:         0       0       0       0
  2282 ;;Total ram usage:        0 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:   10
  2285 ;; This function calls:
  2286 ;;		_glider
  2287 ;;		_memset
  2288 ;;		_swap_buffers
  2289 ;; This function is called by:
  2290 ;;		_game_loop
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text3
  2295  001C00                     __ptext3:
  2296                           	opt stack 0
  2297  001C00                     _init_game:
  2298                           	opt stack 19
  2299                           
  2300                           ;game.c: 64: memset(game_board, 0, sizeof(game_board));
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;incstack = 0
  2304  001C00  6A17               	clrf	memset@c+1,c
  2305  001C02  6A16               	clrf	memset@c,c
  2306  001C04  6A19               	clrf	memset@n+1,c
  2307  001C06  0E0F               	movlw	15
  2308  001C08  6E18               	movwf	memset@n,c
  2309  001C0A  0100               	movlb	0	; () banked
  2310  001C0C  0E91               	movlw	_game_board& (0+255)
  2311  001C0E  EC5E  F00D         	call	_memset
  2312                           
  2313                           ;game.c: 66: glider();
  2314  001C12  EC60  F009         	call	_glider	;wreg free
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;game.c: 68: swap_buffers();
  2318  001C16  EFE0  F00D         	goto	_swap_buffers	;wreg free
  2319  001C1A                     __end_of_init_game:
  2320                           	opt stack 0
  2321                           tblptru	equ	0xFF8
  2322                           tblptrh	equ	0xFF7
  2323                           tblptrl	equ	0xFF6
  2324                           tablat	equ	0xFF5
  2325                           prodh	equ	0xFF4
  2326                           prodl	equ	0xFF3
  2327                           intcon	equ	0xFF2
  2328                           intcon2	equ	0xFF1
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           indf1	equ	0xFE7
  2332                           fsr1h	equ	0xFE2
  2333                           fsr1l	equ	0xFE1
  2334                           indf2	equ	0xFDF
  2335                           postinc2	equ	0xFDE
  2336                           postdec2	equ	0xFDD
  2337                           plusw2	equ	0xFDB
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342 ;; *************** function _swap_buffers *****************
  2343 ;; Defined at:
  2344 ;;		line 210 in file "game.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;		None
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  col             1   21[COMRAM] unsigned char 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;		None               void
  2351 ;; Registers used:
  2352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2353 ;; Tracked objects:
  2354 ;;		On entry : F/0
  2355 ;;		On exit  : F/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2358 ;;      Params:         0       0       0       0
  2359 ;;      Locals:         1       0       0       0
  2360 ;;      Temps:          0       0       0       0
  2361 ;;      Totals:         1       0       0       0
  2362 ;;Total ram usage:        1 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; Hardware stack levels required when called:    7
  2365 ;; This function calls:
  2366 ;;		Nothing
  2367 ;; This function is called by:
  2368 ;;		_init_game
  2369 ;;		_game_loop
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           	psect	text4
  2374  001BC0                     __ptext4:
  2375                           	opt stack 0
  2376  001BC0                     _swap_buffers:
  2377                           	opt stack 22
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;game.c: 212: for (uint8_t col = 0; col < (((15))); col++) {
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;incstack = 0
  2384  001BC0  6A16               	clrf	swap_buffers@col,c
  2385  001BC2                     l3956:
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;game.c: 213: display.cols[col] = game_board[col];
  2389  001BC2  5016               	movf	swap_buffers@col,w,c
  2390  001BC4  0F91               	addlw	low _game_board
  2391  001BC6  6ED9               	movwf	fsr2l,c
  2392  001BC8  6ADA               	clrf	fsr2h,c
  2393  001BCA  5016               	movf	swap_buffers@col,w,c
  2394  001BCC  0F81               	addlw	low _display	;volatile
  2395  001BCE  6EE1               	movwf	fsr1l,c
  2396  001BD0  6AE2               	clrf	fsr1h,c
  2397  001BD2  CFDF FFE7          	movff	indf2,indf1
  2398                           
  2399                           ; BSR set to: 0
  2400  001BD6  2A16               	incf	swap_buffers@col,f,c
  2401                           
  2402                           ; BSR set to: 0
  2403  001BD8  0E0E               	movlw	14
  2404  001BDA  6416               	cpfsgt	swap_buffers@col,c
  2405  001BDC  D7F2               	goto	l3956
  2406  001BDE  0C0E               	retlw	14
  2407  001BE0                     __end_of_swap_buffers:
  2408                           	opt stack 0
  2409                           tblptru	equ	0xFF8
  2410                           tblptrh	equ	0xFF7
  2411                           tblptrl	equ	0xFF6
  2412                           tablat	equ	0xFF5
  2413                           prodh	equ	0xFF4
  2414                           prodl	equ	0xFF3
  2415                           intcon	equ	0xFF2
  2416                           intcon2	equ	0xFF1
  2417                           postinc0	equ	0xFEE
  2418                           wreg	equ	0xFE8
  2419                           indf1	equ	0xFE7
  2420                           fsr1h	equ	0xFE2
  2421                           fsr1l	equ	0xFE1
  2422                           indf2	equ	0xFDF
  2423                           postinc2	equ	0xFDE
  2424                           postdec2	equ	0xFDD
  2425                           plusw2	equ	0xFDB
  2426                           fsr2h	equ	0xFDA
  2427                           fsr2l	equ	0xFD9
  2428                           status	equ	0xFD8
  2429                           
  2430 ;; *************** function _memset *****************
  2431 ;; Defined at:
  2432 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\memset.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;  p1              1    wreg     PTR void 
  2435 ;;		 -> game_board(15), 
  2436 ;;  c               2   21[COMRAM] int 
  2437 ;;  n               2   23[COMRAM] unsigned int 
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;  p1              1   25[COMRAM] PTR void 
  2440 ;;		 -> game_board(15), 
  2441 ;;  p               1   26[COMRAM] PTR unsigned char 
  2442 ;;		 -> game_board(15), 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      PTR void 
  2445 ;; Registers used:
  2446 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2447 ;; Tracked objects:
  2448 ;;		On entry : F/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2452 ;;      Params:         4       0       0       0
  2453 ;;      Locals:         2       0       0       0
  2454 ;;      Temps:          0       0       0       0
  2455 ;;      Totals:         6       0       0       0
  2456 ;;Total ram usage:        6 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    7
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_init_game
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text5
  2467  001ABC                     __ptext5:
  2468                           	opt stack 0
  2469  001ABC                     _memset:
  2470                           	opt stack 21
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;incstack = 0
  2474                           ;memset@p1 stored from wreg
  2475  001ABC  6E1A               	movwf	memset@p1,c
  2476                           
  2477                           ; BSR set to: 0
  2478  001ABE  C01A  F01B         	movff	memset@p1,memset@p
  2479  001AC2  D006               	goto	l3936
  2480  001AC4                     l3932:
  2481  001AC4  501B               	movf	memset@p,w,c
  2482  001AC6  6ED9               	movwf	fsr2l,c
  2483  001AC8  6ADA               	clrf	fsr2h,c
  2484  001ACA  C016  FFDF         	movff	memset@c,indf2
  2485  001ACE  2A1B               	incf	memset@p,f,c
  2486  001AD0                     l3936:
  2487  001AD0  0618               	decf	memset@n,f,c
  2488  001AD2  A0D8               	btfss	status,0,c
  2489  001AD4  0619               	decf	memset@n+1,f,c
  2490  001AD6  2818               	incf	memset@n& (0+255),w,c
  2491  001AD8  B4D8               	btfsc	status,2,c
  2492  001ADA  2819               	incf	(memset@n+1)& (0+255),w,c
  2493  001ADC  B4D8               	btfsc	status,2,c
  2494  001ADE  0012               	return	
  2495  001AE0  D7F1               	goto	l3932
  2496  001AE2                     __end_of_memset:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           prodh	equ	0xFF4
  2503                           prodl	equ	0xFF3
  2504                           intcon	equ	0xFF2
  2505                           intcon2	equ	0xFF1
  2506                           postinc0	equ	0xFEE
  2507                           wreg	equ	0xFE8
  2508                           indf1	equ	0xFE7
  2509                           fsr1h	equ	0xFE2
  2510                           fsr1l	equ	0xFE1
  2511                           indf2	equ	0xFDF
  2512                           postinc2	equ	0xFDE
  2513                           postdec2	equ	0xFDD
  2514                           plusw2	equ	0xFDB
  2515                           fsr2h	equ	0xFDA
  2516                           fsr2l	equ	0xFD9
  2517                           status	equ	0xFD8
  2518                           
  2519 ;; *************** function _glider *****************
  2520 ;; Defined at:
  2521 ;;		line 236 in file "game.c"
  2522 ;; Parameters:    Size  Location     Type
  2523 ;;		None
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  col             1   38[COMRAM] unsigned char 
  2526 ;;  row             1   37[COMRAM] unsigned char 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;		None               void
  2529 ;; Registers used:
  2530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : F/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2536 ;;      Params:         0       0       0       0
  2537 ;;      Locals:         2       0       0       0
  2538 ;;      Temps:          4       0       0       0
  2539 ;;      Totals:         6       0       0       0
  2540 ;;Total ram usage:        6 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    9
  2543 ;; This function calls:
  2544 ;;		___lbmod
  2545 ;;		___llmod
  2546 ;;		_set_board_location
  2547 ;; This function is called by:
  2548 ;;		_init_game
  2549 ;;		_game_loop
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text6
  2554  0012C0                     __ptext6:
  2555                           	opt stack 0
  2556  0012C0                     _glider:
  2557                           	opt stack 19
  2558                           
  2559                           ;game.c: 237: uint8_t row = milliseconds % ((((8))) - 2);
  2560                           
  2561                           ;incstack = 0
  2562  0012C0  C034  F016         	movff	_milliseconds,___llmod@dividend	;volatile
  2563  0012C4  C035  F017         	movff	_milliseconds+1,___llmod@dividend+1	;volatile
  2564  0012C8  C036  F018         	movff	_milliseconds+2,___llmod@dividend+2	;volatile
  2565  0012CC  C037  F019         	movff	_milliseconds+3,___llmod@dividend+3	;volatile
  2566  0012D0  0E06               	movlw	6
  2567  0012D2  6E1A               	movwf	___llmod@divisor,c
  2568  0012D4  0E00               	movlw	0
  2569  0012D6  6A1B               	clrf	___llmod@divisor+1,c
  2570  0012D8  6A1C               	clrf	___llmod@divisor+2,c
  2571  0012DA  6A1D               	clrf	___llmod@divisor+3,c
  2572  0012DC  ECAF  F00A         	call	___llmod	;wreg free
  2573  0012E0  C016  F022         	movff	?___llmod,??_glider
  2574  0012E4  C017  F023         	movff	?___llmod+1,??_glider+1
  2575  0012E8  C018  F024         	movff	?___llmod+2,??_glider+2
  2576  0012EC  C019  F025         	movff	?___llmod+3,??_glider+3
  2577  0012F0  5022               	movf	??_glider,w,c
  2578  0012F2  6E26               	movwf	glider@row,c
  2579                           
  2580                           ;game.c: 238: uint8_t col = TMR0L % ((((15))) - 2);
  2581  0012F4  0E0D               	movlw	13
  2582  0012F6  6E16               	movwf	___lbmod@divisor,c
  2583  0012F8  50D6               	movf	4054,w,c	;volatile
  2584  0012FA  EC84  F00D         	call	___lbmod
  2585  0012FE  6E27               	movwf	glider@col,c
  2586                           
  2587                           ;game.c: 239: set_board_location(row + 2, col);
  2588  001300  C027  F01E         	movff	glider@col,set_board_location@col
  2589  001304  5026               	movf	glider@row,w,c
  2590  001306  0F02               	addlw	2
  2591  001308  ECD9  F00B         	call	_set_board_location
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;game.c: 240: set_board_location(row + 2, col + 1);
  2595  00130C  2827               	incf	glider@col,w,c
  2596  00130E  6E1E               	movwf	set_board_location@col,c
  2597  001310  5026               	movf	glider@row,w,c
  2598  001312  0F02               	addlw	2
  2599  001314  ECD9  F00B         	call	_set_board_location
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;game.c: 241: set_board_location(row + 2, col + 2);
  2603  001318  5027               	movf	glider@col,w,c
  2604  00131A  0F02               	addlw	2
  2605  00131C  6E1E               	movwf	set_board_location@col,c
  2606  00131E  5026               	movf	glider@row,w,c
  2607  001320  0F02               	addlw	2
  2608  001322  ECD9  F00B         	call	_set_board_location
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;game.c: 242: set_board_location(row + 1, col + 2);
  2612  001326  5027               	movf	glider@col,w,c
  2613  001328  0F02               	addlw	2
  2614  00132A  6E1E               	movwf	set_board_location@col,c
  2615  00132C  2826               	incf	glider@row,w,c
  2616  00132E  ECD9  F00B         	call	_set_board_location
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;game.c: 243: set_board_location(row, col + 1);
  2620  001332  2827               	incf	glider@col,w,c
  2621  001334  6E1E               	movwf	set_board_location@col,c
  2622  001336  5026               	movf	glider@row,w,c
  2623  001338  EFD9  F00B         	goto	_set_board_location
  2624  00133C                     __end_of_glider:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodh	equ	0xFF4
  2631                           prodl	equ	0xFF3
  2632                           intcon	equ	0xFF2
  2633                           intcon2	equ	0xFF1
  2634                           postinc0	equ	0xFEE
  2635                           wreg	equ	0xFE8
  2636                           indf1	equ	0xFE7
  2637                           fsr1h	equ	0xFE2
  2638                           fsr1l	equ	0xFE1
  2639                           indf2	equ	0xFDF
  2640                           postinc2	equ	0xFDE
  2641                           postdec2	equ	0xFDD
  2642                           plusw2	equ	0xFDB
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647 ;; *************** function ___llmod *****************
  2648 ;; Defined at:
  2649 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;  dividend        4   21[COMRAM] unsigned long 
  2652 ;;  divisor         4   25[COMRAM] unsigned long 
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;  counter         1   29[COMRAM] unsigned char 
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  4   21[COMRAM] unsigned long 
  2657 ;; Registers used:
  2658 ;;		wreg, status,2, status,0
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2664 ;;      Params:         8       0       0       0
  2665 ;;      Locals:         1       0       0       0
  2666 ;;      Temps:          0       0       0       0
  2667 ;;      Totals:         9       0       0       0
  2668 ;;Total ram usage:        9 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    7
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_glider
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text7
  2679  00155E                     __ptext7:
  2680                           	opt stack 0
  2681  00155E                     ___llmod:
  2682                           	opt stack 20
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;incstack = 0
  2686  00155E  501D               	movf	___llmod@divisor+3,w,c
  2687  001560  101A               	iorwf	___llmod@divisor,w,c
  2688  001562  101B               	iorwf	___llmod@divisor+1,w,c
  2689  001564  101C               	iorwf	___llmod@divisor+2,w,c
  2690  001566  E023               	bz	l1509
  2691  001568  0E01               	movlw	1
  2692  00156A  6E1E               	movwf	___llmod@counter,c
  2693  00156C  D006               	goto	l3714
  2694  00156E                     l3712:
  2695  00156E  90D8               	bcf	status,0,c
  2696  001570  361A               	rlcf	___llmod@divisor,f,c
  2697  001572  361B               	rlcf	___llmod@divisor+1,f,c
  2698  001574  361C               	rlcf	___llmod@divisor+2,f,c
  2699  001576  361D               	rlcf	___llmod@divisor+3,f,c
  2700  001578  2A1E               	incf	___llmod@counter,f,c
  2701  00157A                     l3714:
  2702  00157A  AE1D               	btfss	___llmod@divisor+3,7,c
  2703  00157C  D7F8               	goto	l3712
  2704  00157E                     l3716:
  2705  00157E  501A               	movf	___llmod@divisor,w,c
  2706  001580  5C16               	subwf	___llmod@dividend,w,c
  2707  001582  501B               	movf	___llmod@divisor+1,w,c
  2708  001584  5817               	subwfb	___llmod@dividend+1,w,c
  2709  001586  501C               	movf	___llmod@divisor+2,w,c
  2710  001588  5818               	subwfb	___llmod@dividend+2,w,c
  2711  00158A  501D               	movf	___llmod@divisor+3,w,c
  2712  00158C  5819               	subwfb	___llmod@dividend+3,w,c
  2713  00158E  E308               	bnc	l3720
  2714  001590  501A               	movf	___llmod@divisor,w,c
  2715  001592  5E16               	subwf	___llmod@dividend,f,c
  2716  001594  501B               	movf	___llmod@divisor+1,w,c
  2717  001596  5A17               	subwfb	___llmod@dividend+1,f,c
  2718  001598  501C               	movf	___llmod@divisor+2,w,c
  2719  00159A  5A18               	subwfb	___llmod@dividend+2,f,c
  2720  00159C  501D               	movf	___llmod@divisor+3,w,c
  2721  00159E  5A19               	subwfb	___llmod@dividend+3,f,c
  2722  0015A0                     l3720:
  2723  0015A0  90D8               	bcf	status,0,c
  2724  0015A2  321D               	rrcf	___llmod@divisor+3,f,c
  2725  0015A4  321C               	rrcf	___llmod@divisor+2,f,c
  2726  0015A6  321B               	rrcf	___llmod@divisor+1,f,c
  2727  0015A8  321A               	rrcf	___llmod@divisor,f,c
  2728  0015AA  2E1E               	decfsz	___llmod@counter,f,c
  2729  0015AC  D7E8               	goto	l3716
  2730  0015AE                     l1509:
  2731  0015AE  C016  F016         	movff	___llmod@dividend,?___llmod
  2732  0015B2  C017  F017         	movff	___llmod@dividend+1,?___llmod+1
  2733  0015B6  C018  F018         	movff	___llmod@dividend+2,?___llmod+2
  2734  0015BA  C019  F019         	movff	___llmod@dividend+3,?___llmod+3
  2735  0015BE  0012               	return	
  2736  0015C0                     __end_of___llmod:
  2737                           	opt stack 0
  2738                           tblptru	equ	0xFF8
  2739                           tblptrh	equ	0xFF7
  2740                           tblptrl	equ	0xFF6
  2741                           tablat	equ	0xFF5
  2742                           prodh	equ	0xFF4
  2743                           prodl	equ	0xFF3
  2744                           intcon	equ	0xFF2
  2745                           intcon2	equ	0xFF1
  2746                           postinc0	equ	0xFEE
  2747                           wreg	equ	0xFE8
  2748                           indf1	equ	0xFE7
  2749                           fsr1h	equ	0xFE2
  2750                           fsr1l	equ	0xFE1
  2751                           indf2	equ	0xFDF
  2752                           postinc2	equ	0xFDE
  2753                           postdec2	equ	0xFDD
  2754                           plusw2	equ	0xFDB
  2755                           fsr2h	equ	0xFDA
  2756                           fsr2l	equ	0xFD9
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function _calculate_next_game_board *****************
  2760 ;; Defined at:
  2761 ;;		line 128 in file "game.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;		None
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;  num_living_n    1   48[COMRAM] unsigned char 
  2766 ;;  cell_is_aliv    1   46[COMRAM] unsigned char 
  2767 ;;  neighbors       1   45[COMRAM] unsigned char 
  2768 ;;  col             1   50[COMRAM] unsigned char 
  2769 ;;  row             1   49[COMRAM] unsigned char 
  2770 ;;  alive_count     1   47[COMRAM] unsigned char 
  2771 ;; Return value:  Size  Location     Type
  2772 ;;                  1    wreg      unsigned char 
  2773 ;; Registers used:
  2774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2775 ;; Tracked objects:
  2776 ;;		On entry : 0/0
  2777 ;;		On exit  : F/0
  2778 ;;		Unchanged: 0/0
  2779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2780 ;;      Params:         0       0       0       0
  2781 ;;      Locals:         6       0       0       0
  2782 ;;      Temps:          0       0       0       0
  2783 ;;      Totals:         6       0       0       0
  2784 ;;Total ram usage:        6 bytes
  2785 ;; Hardware stack levels used:    1
  2786 ;; Hardware stack levels required when called:   10
  2787 ;; This function calls:
  2788 ;;		_clear_board_location
  2789 ;;		_get_board_value
  2790 ;;		_get_neighbors
  2791 ;;		_num_ones
  2792 ;;		_set_board_location
  2793 ;; This function is called by:
  2794 ;;		_game_loop
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           	psect	text8
  2799  0011C2                     __ptext8:
  2800                           	opt stack 0
  2801  0011C2                     _calculate_next_game_board:
  2802                           	opt stack 19
  2803                           
  2804                           ;game.c: 130: uint8_t alive_count = 0;
  2805                           
  2806                           ;incstack = 0
  2807  0011C2  6A30               	clrf	calculate_next_game_board@alive_count,c
  2808                           
  2809                           ;game.c: 132: for (uint8_t row = 0; row < (((8))); row++) {
  2810  0011C4  6A32               	clrf	calculate_next_game_board@row,c
  2811  0011C6                     l928:
  2812                           
  2813                           ;game.c: 133: for (uint8_t col = 0; col < (((15))); col++) {
  2814  0011C6  6A33               	clrf	calculate_next_game_board@col,c
  2815  0011C8                     l5838:
  2816                           
  2817                           ;game.c: 134: uint8_t neighbors = get_neighbors(row, col);
  2818  0011C8  C033  F025         	movff	calculate_next_game_board@col,get_neighbors@col
  2819  0011CC  5032               	movf	calculate_next_game_board@row,w,c
  2820  0011CE  ECD7  F005         	call	_get_neighbors
  2821  0011D2  6E2E               	movwf	calculate_next_game_board@neighbors,c
  2822                           
  2823                           ;game.c: 135: uint8_t num_living_neighbors = num_ones(neighbors);
  2824  0011D4  502E               	movf	calculate_next_game_board@neighbors,w,c
  2825  0011D6  EC6C  F00E         	call	_num_ones
  2826  0011DA  6E31               	movwf	calculate_next_game_board@num_living_neighbors,c
  2827                           
  2828                           ;game.c: 136: uint8_t cell_is_alive = get_board_value(row, col);
  2829  0011DC  C033  F01E         	movff	calculate_next_game_board@col,get_board_value@col
  2830  0011E0  5032               	movf	calculate_next_game_board@row,w,c
  2831  0011E2  EC16  F00A         	call	_get_board_value
  2832  0011E6  6E2F               	movwf	calculate_next_game_board@cell_is_alive,c
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;game.c: 138: if (cell_is_alive) {
  2836  0011E8  502F               	movf	calculate_next_game_board@cell_is_alive,w,c
  2837  0011EA  E013               	bz	l5856
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;game.c: 139: if (num_living_neighbors < 2 || num_living_neighbors > 3) {
  2841  0011EC  0E01               	movlw	1
  2842  0011EE  6431               	cpfsgt	calculate_next_game_board@num_living_neighbors,c
  2843  0011F0  D003               	goto	l5850
  2844                           
  2845                           ; BSR set to: 0
  2846  0011F2  0E03               	movlw	3
  2847  0011F4  6431               	cpfsgt	calculate_next_game_board@num_living_neighbors,c
  2848  0011F6  D006               	goto	l5852
  2849  0011F8                     l5850:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;game.c: 140: clear_board_location(row, col);
  2853  0011F8  C033  F01E         	movff	calculate_next_game_board@col,clear_board_location@col
  2854  0011FC  5032               	movf	calculate_next_game_board@row,w,c
  2855  0011FE  ECB2  F00B         	call	_clear_board_location
  2856                           
  2857                           ;game.c: 141: } else {
  2858  001202  D015               	goto	l5864
  2859  001204                     l5852:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;game.c: 142: set_board_location(row, col);
  2863  001204  C033  F01E         	movff	calculate_next_game_board@col,set_board_location@col
  2864  001208  5032               	movf	calculate_next_game_board@row,w,c
  2865  00120A  ECD9  F00B         	call	_set_board_location
  2866  00120E                     l5854:
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;game.c: 143: alive_count++;
  2870  00120E  2A30               	incf	calculate_next_game_board@alive_count,f,c
  2871  001210  D00E               	goto	l5864
  2872  001212                     l5856:
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;game.c: 146: if (num_living_neighbors == 3) {
  2876  001212  5031               	movf	calculate_next_game_board@num_living_neighbors,w,c
  2877  001214  0A03               	xorlw	3
  2878  001216  E106               	bnz	l5862
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;game.c: 147: set_board_location(row, col);
  2882  001218  C033  F01E         	movff	calculate_next_game_board@col,set_board_location@col
  2883  00121C  5032               	movf	calculate_next_game_board@row,w,c
  2884  00121E  ECD9  F00B         	call	_set_board_location
  2885  001222  D7F5               	goto	l5854
  2886  001224                     l5862:
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;game.c: 150: clear_board_location(row, col);
  2890  001224  C033  F01E         	movff	calculate_next_game_board@col,clear_board_location@col
  2891  001228  5032               	movf	calculate_next_game_board@row,w,c
  2892  00122A  ECB2  F00B         	call	_clear_board_location
  2893  00122E                     l5864:
  2894                           
  2895                           ; BSR set to: 0
  2896  00122E  2A33               	incf	calculate_next_game_board@col,f,c
  2897                           
  2898                           ; BSR set to: 0
  2899  001230  0E0E               	movlw	14
  2900  001232  6433               	cpfsgt	calculate_next_game_board@col,c
  2901  001234  D7C9               	goto	l5838
  2902                           
  2903                           ; BSR set to: 0
  2904  001236  2A32               	incf	calculate_next_game_board@row,f,c
  2905                           
  2906                           ; BSR set to: 0
  2907  001238  0E07               	movlw	7
  2908  00123A  6432               	cpfsgt	calculate_next_game_board@row,c
  2909  00123C  D7C4               	goto	l928
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;game.c: 151: }
  2913                           ;game.c: 152: }
  2914                           ;game.c: 154: }
  2915                           ;game.c: 155: }
  2916                           ;game.c: 156: return alive_count;
  2917  00123E  5030               	movf	calculate_next_game_board@alive_count,w,c
  2918                           
  2919                           ; BSR set to: 0
  2920  001240  0012               	return	
  2921  001242                     __end_of_calculate_next_game_board:
  2922                           	opt stack 0
  2923                           tblptru	equ	0xFF8
  2924                           tblptrh	equ	0xFF7
  2925                           tblptrl	equ	0xFF6
  2926                           tablat	equ	0xFF5
  2927                           prodh	equ	0xFF4
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           intcon2	equ	0xFF1
  2931                           postinc0	equ	0xFEE
  2932                           wreg	equ	0xFE8
  2933                           indf1	equ	0xFE7
  2934                           fsr1h	equ	0xFE2
  2935                           fsr1l	equ	0xFE1
  2936                           indf2	equ	0xFDF
  2937                           postinc2	equ	0xFDE
  2938                           postdec2	equ	0xFDD
  2939                           plusw2	equ	0xFDB
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _num_ones *****************
  2945 ;; Defined at:
  2946 ;;		line 202 in file "game.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  v               1    wreg     unsigned char 
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;  v               1   22[COMRAM] unsigned char 
  2951 ;;  c               1   21[COMRAM] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      unsigned char 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2, status,0
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2961 ;;      Params:         0       0       0       0
  2962 ;;      Locals:         2       0       0       0
  2963 ;;      Temps:          0       0       0       0
  2964 ;;      Totals:         2       0       0       0
  2965 ;;Total ram usage:        2 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:    7
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_calculate_next_game_board
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text9
  2976  001CD8                     __ptext9:
  2977                           	opt stack 0
  2978  001CD8                     _num_ones:
  2979                           	opt stack 21
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;incstack = 0
  2983                           ;num_ones@v stored from wreg
  2984  001CD8  6E17               	movwf	num_ones@v,c
  2985                           
  2986                           ;game.c: 203: uint8_t c;
  2987                           ;game.c: 204: for (c = 0; v; c++) {
  2988  001CDA  6A16               	clrf	num_ones@c,c
  2989  001CDC  D003               	goto	l4030
  2990  001CDE                     l4026:
  2991                           
  2992                           ;game.c: 205: v &= (v - 1);
  2993  001CDE  0417               	decf	num_ones@v,w,c
  2994  001CE0  1617               	andwf	num_ones@v,f,c
  2995  001CE2  2A16               	incf	num_ones@c,f,c
  2996  001CE4                     l4030:
  2997  001CE4  6617               	tstfsz	num_ones@v,c
  2998  001CE6  D7FB               	goto	l4026
  2999                           
  3000                           ;game.c: 206: }
  3001                           ;game.c: 207: return c;
  3002  001CE8  5016               	movf	num_ones@c,w,c
  3003  001CEA  0012               	return	
  3004  001CEC                     __end_of_num_ones:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           prodh	equ	0xFF4
  3011                           prodl	equ	0xFF3
  3012                           intcon	equ	0xFF2
  3013                           intcon2	equ	0xFF1
  3014                           postinc0	equ	0xFEE
  3015                           wreg	equ	0xFE8
  3016                           indf1	equ	0xFE7
  3017                           fsr1h	equ	0xFE2
  3018                           fsr1l	equ	0xFE1
  3019                           indf2	equ	0xFDF
  3020                           postinc2	equ	0xFDE
  3021                           postdec2	equ	0xFDD
  3022                           plusw2	equ	0xFDB
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027 ;; *************** function _get_neighbors *****************
  3028 ;; Defined at:
  3029 ;;		line 159 in file "game.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  row             1    wreg     unsigned char 
  3032 ;;  col             1   36[COMRAM] unsigned char 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  row             1   39[COMRAM] unsigned char 
  3035 ;;  cc              1   42[COMRAM] char 
  3036 ;;  rr              1   41[COMRAM] char 
  3037 ;;  c               1   44[COMRAM] char 
  3038 ;;  r               1   43[COMRAM] char 
  3039 ;;  neighbor_val    1   40[COMRAM] unsigned char 
  3040 ;;  return_value    1   38[COMRAM] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      unsigned char 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3050 ;;      Params:         1       0       0       0
  3051 ;;      Locals:         7       0       0       0
  3052 ;;      Temps:          1       0       0       0
  3053 ;;      Totals:         9       0       0       0
  3054 ;;Total ram usage:        9 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    9
  3057 ;; This function calls:
  3058 ;;		_get_board_value
  3059 ;; This function is called by:
  3060 ;;		_calculate_next_game_board
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text10
  3065  000BAE                     __ptext10:
  3066                           	opt stack 0
  3067  000BAE                     _get_neighbors:
  3068                           	opt stack 19
  3069                           
  3070                           ;incstack = 0
  3071                           ;get_neighbors@row stored from wreg
  3072  000BAE  6E28               	movwf	get_neighbors@row,c
  3073                           
  3074                           ;game.c: 160: uint8_t return_value = 0;
  3075  000BB0  6A27               	clrf	get_neighbors@return_value,c
  3076  000BB2  6A2D               	clrf	get_neighbors@c,c
  3077                           
  3078                           ;game.c: 162: uint8_t neighbor_value = 0;
  3079  000BB4  6A29               	clrf	get_neighbors@neighbor_value,c
  3080                           
  3081                           ;game.c: 164: for (int8_t rr = -1; rr <= 1; rr++) {
  3082  000BB6  682A               	setf	get_neighbors@rr,c
  3083  000BB8                     l943:
  3084                           
  3085                           ;game.c: 165: for (int8_t cc = -1; cc <= 1; cc++) {
  3086  000BB8  682B               	setf	get_neighbors@cc,c
  3087  000BBA                     l945:
  3088                           
  3089                           ;game.c: 166: if (rr != 0 || cc != 0) {
  3090  000BBA  662A               	tstfsz	get_neighbors@rr,c
  3091  000BBC  D002               	goto	l5516
  3092  000BBE  502B               	movf	get_neighbors@cc,w,c
  3093  000BC0  E04E               	bz	l5554
  3094  000BC2                     l5516:
  3095                           
  3096                           ;game.c: 167: r = row + rr;
  3097  000BC2  5028               	movf	get_neighbors@row,w,c
  3098  000BC4  242A               	addwf	get_neighbors@rr,w,c
  3099  000BC6  6E2C               	movwf	get_neighbors@r,c
  3100                           
  3101                           ;game.c: 168: c = col + cc;
  3102  000BC8  5025               	movf	get_neighbors@col,w,c
  3103  000BCA  242B               	addwf	get_neighbors@cc,w,c
  3104  000BCC  6E2D               	movwf	get_neighbors@c,c
  3105                           
  3106                           ;game.c: 170: if ((r < 0) || (r >= (((8)))) || (c < 0) || (c >= (((15))))) {
  3107  000BCE  BE2C               	btfsc	get_neighbors@r,7,c
  3108  000BD0  D032               	goto	l5546
  3109  000BD2  502C               	movf	get_neighbors@r,w,c
  3110  000BD4  0A80               	xorlw	128
  3111  000BD6  6E26               	movwf	??_get_neighbors& (0+255),c
  3112  000BD8  0E08               	movlw	8
  3113  000BDA  0A80               	xorlw	128
  3114  000BDC  5C26               	subwf	??_get_neighbors,w,c
  3115  000BDE  A0D8               	btfss	status,0,c
  3116  000BE0  BE2D               	btfsc	get_neighbors@c,7,c
  3117  000BE2  D029               	goto	l5546
  3118  000BE4  502D               	movf	get_neighbors@c,w,c
  3119  000BE6  0A80               	xorlw	128
  3120  000BE8  0F71               	addlw	-143
  3121  000BEA  E225               	bc	l5546
  3122  000BEC  D02E               	goto	l5548
  3123  000BEE                     l954:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;game.c: 173: neighbor_value = 0;
  3127  000BEE  6A29               	clrf	get_neighbors@neighbor_value,c
  3128                           
  3129                           ;game.c: 174: break;
  3130  000BF0  D032               	goto	l5550
  3131  000BF2                     l5526:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;game.c: 176: neighbor_value = 1;
  3135  000BF2  0E01               	movlw	1
  3136  000BF4  D02F               	goto	L1
  3137  000BF6                     l957:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;game.c: 179: if (r < 0) r = (((8))) - 1;
  3141  000BF6  AE2C               	btfss	get_neighbors@r,7,c
  3142  000BF8  D003               	goto	l5530
  3143                           
  3144                           ; BSR set to: 0
  3145  000BFA  0E07               	movlw	7
  3146  000BFC  6E2C               	movwf	get_neighbors@r,c
  3147  000BFE  D005               	goto	l959
  3148  000C00                     l5530:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;game.c: 180: else if (r >= (((8)))) r = 0;
  3152  000C00  502C               	movf	get_neighbors@r,w,c
  3153  000C02  0A80               	xorlw	128
  3154  000C04  0F78               	addlw	-136
  3155  000C06  B0D8               	btfsc	status,0,c
  3156                           
  3157                           ; BSR set to: 0
  3158  000C08  6A2C               	clrf	get_neighbors@r,c
  3159  000C0A                     l959:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;game.c: 181: if (c < 0) c = (((15))) - 1;
  3163  000C0A  AE2D               	btfss	get_neighbors@c,7,c
  3164  000C0C  D003               	goto	l5536
  3165                           
  3166                           ; BSR set to: 0
  3167  000C0E  0E0E               	movlw	14
  3168  000C10  6E2D               	movwf	get_neighbors@c,c
  3169  000C12  D005               	goto	l5540
  3170  000C14                     l5536:
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;game.c: 182: else if (c >= (((15)))) c = 0;
  3174  000C14  502D               	movf	get_neighbors@c,w,c
  3175  000C16  0A80               	xorlw	128
  3176  000C18  0F71               	addlw	-143
  3177  000C1A  B0D8               	btfsc	status,0,c
  3178                           
  3179                           ; BSR set to: 0
  3180  000C1C  6A2D               	clrf	get_neighbors@c,c
  3181  000C1E                     l5540:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;game.c: 183: neighbor_value = get_board_value(r, c);
  3185  000C1E  C02D  F01E         	movff	get_neighbors@c,get_board_value@col
  3186  000C22  502C               	movf	get_neighbors@r,w,c
  3187  000C24  EC16  F00A         	call	_get_board_value
  3188  000C28  D015               	goto	L1
  3189  000C2A                     l5542:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;game.c: 186: neighbor_value = get_board_value(row, col);
  3193  000C2A  C025  F01E         	movff	get_neighbors@col,get_board_value@col
  3194  000C2E  5028               	movf	get_neighbors@row,w,c
  3195  000C30  EC16  F00A         	call	_get_board_value
  3196  000C34  D00F               	goto	L1
  3197  000C36                     l5546:
  3198  000C36  0100               	movlb	0	; () banked
  3199  000C38  51C5               	movf	_boundary_condition& (0+255),w,b
  3200                           
  3201                           ; Switch size 1, requested type "space"
  3202                           ; Number of cases is 4, Range of values is 0 to 3
  3203                           ; switch strategies available:
  3204                           ; Name         Instructions Cycles
  3205                           ; simple_byte           13     7 (average)
  3206                           ;	Chosen strategy is simple_byte
  3207  000C3A  E0D9               	bz	l954
  3208  000C3C  0A01               	xorlw	1	; case 1
  3209  000C3E  E0D9               	bz	l5526
  3210  000C40  0A03               	xorlw	3	; case 2
  3211  000C42  E0D9               	bz	l957
  3212  000C44  0A01               	xorlw	1	; case 3
  3213  000C46  E0F1               	bz	l5542
  3214  000C48  D006               	goto	l5550
  3215  000C4A                     l5548:
  3216                           
  3217                           ;game.c: 190: neighbor_value = get_board_value(r, c);
  3218  000C4A  C02D  F01E         	movff	get_neighbors@c,get_board_value@col
  3219  000C4E  502C               	movf	get_neighbors@r,w,c
  3220  000C50  EC16  F00A         	call	_get_board_value
  3221  000C54                     L1:
  3222  000C54  6E29               	movwf	get_neighbors@neighbor_value,c
  3223  000C56                     l5550:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;game.c: 191: }
  3227                           ;game.c: 193: return_value <<= 1;
  3228  000C56  90D8               	bcf	status,0,c
  3229  000C58  3627               	rlcf	get_neighbors@return_value,f,c
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;game.c: 194: return_value |= neighbor_value;
  3233  000C5A  5029               	movf	get_neighbors@neighbor_value,w,c
  3234  000C5C  1227               	iorwf	get_neighbors@return_value,f,c
  3235  000C5E                     l5554:
  3236  000C5E  2A2B               	incf	get_neighbors@cc,f,c
  3237  000C60  502B               	movf	get_neighbors@cc,w,c
  3238  000C62  0A80               	xorlw	128
  3239  000C64  0F7E               	addlw	-130
  3240  000C66  E3A9               	bnc	l945
  3241  000C68  2A2A               	incf	get_neighbors@rr,f,c
  3242  000C6A  502A               	movf	get_neighbors@rr,w,c
  3243  000C6C  0A80               	xorlw	128
  3244  000C6E  0F7E               	addlw	-130
  3245  000C70  E3A3               	bnc	l943
  3246                           
  3247                           ;game.c: 195: }
  3248                           ;game.c: 196: }
  3249                           ;game.c: 197: }
  3250                           ;game.c: 199: return return_value;
  3251  000C72  5027               	movf	get_neighbors@return_value,w,c
  3252  000C74  0012               	return	
  3253  000C76                     __end_of_get_neighbors:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           intcon2	equ	0xFF1
  3263                           postinc0	equ	0xFEE
  3264                           wreg	equ	0xFE8
  3265                           indf1	equ	0xFE7
  3266                           fsr1h	equ	0xFE2
  3267                           fsr1l	equ	0xFE1
  3268                           indf2	equ	0xFDF
  3269                           postinc2	equ	0xFDE
  3270                           postdec2	equ	0xFDD
  3271                           plusw2	equ	0xFDB
  3272                           fsr2h	equ	0xFDA
  3273                           fsr2l	equ	0xFD9
  3274                           status	equ	0xFD8
  3275                           
  3276 ;; *************** function _get_board_value *****************
  3277 ;; Defined at:
  3278 ;;		line 44 in file "game.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  row             1    wreg     unsigned char 
  3281 ;;  col             1   29[COMRAM] unsigned char 
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;  row             1   35[COMRAM] unsigned char 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      unsigned char 
  3286 ;; Registers used:
  3287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : F/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3293 ;;      Params:         1       0       0       0
  3294 ;;      Locals:         1       0       0       0
  3295 ;;      Temps:          5       0       0       0
  3296 ;;      Totals:         7       0       0       0
  3297 ;;Total ram usage:        7 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    8
  3300 ;; This function calls:
  3301 ;;		___awdiv
  3302 ;; This function is called by:
  3303 ;;		_calculate_next_game_board
  3304 ;;		_get_neighbors
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text11
  3309  00142C                     __ptext11:
  3310                           	opt stack 0
  3311  00142C                     _get_board_value:
  3312                           	opt stack 19
  3313                           
  3314                           ;incstack = 0
  3315                           ;get_board_value@row stored from wreg
  3316  00142C  6E24               	movwf	get_board_value@row,c
  3317                           
  3318                           ;game.c: 45: return(display.cols[ ( (( (((8)) * col) + row ) / ((8))) ) ]
  3319                           ;game.c: 46: & ((0x01 << (( ( (((8)) * col) + row ) % ((8)) )))))
  3320                           ;game.c: 47: >> ( ( (((8)) * col) + row ) % ((8)) );
  3321  00142E  501E               	movf	get_board_value@col,w,c
  3322  001430  0D08               	mullw	8
  3323  001432  50F3               	movf	prodl,w,c
  3324  001434  2424               	addwf	get_board_value@row,w,c
  3325  001436  6E1F               	movwf	??_get_board_value& (0+255),c
  3326  001438  0E07               	movlw	7
  3327  00143A  161F               	andwf	??_get_board_value,f,c
  3328  00143C  501E               	movf	get_board_value@col,w,c
  3329  00143E  0D08               	mullw	8
  3330  001440  5024               	movf	get_board_value@row,w,c
  3331  001442  24F3               	addwf	prodl,w,c
  3332  001444  6E16               	movwf	___awdiv@dividend,c
  3333  001446  0E00               	movlw	0
  3334  001448  20F4               	addwfc	prodh,w,c
  3335  00144A  6E17               	movwf	___awdiv@dividend+1,c
  3336  00144C  6A19               	clrf	___awdiv@divisor+1,c
  3337  00144E  0E08               	movlw	8
  3338  001450  6E18               	movwf	___awdiv@divisor,c
  3339  001452  EC13  F008         	call	___awdiv	;wreg free
  3340  001456  5016               	movf	?___awdiv,w,c
  3341  001458  0100               	movlb	0	; () banked
  3342  00145A  0F81               	addlw	low _display	;volatile
  3343  00145C  6ED9               	movwf	fsr2l,c
  3344  00145E  6ADA               	clrf	fsr2h,c
  3345  001460  50DF               	movf	indf2,w,c
  3346  001462  6E20               	movwf	(??_get_board_value+1)& (0+255),c
  3347  001464  501E               	movf	get_board_value@col,w,c
  3348  001466  0D08               	mullw	8
  3349  001468  50F3               	movf	prodl,w,c
  3350  00146A  2424               	addwf	get_board_value@row,w,c
  3351  00146C  6E21               	movwf	(??_get_board_value+2)& (0+255),c
  3352  00146E  0E07               	movlw	7
  3353  001470  1621               	andwf	??_get_board_value+2,f,c
  3354  001472  0E01               	movlw	1
  3355  001474  6E22               	movwf	(??_get_board_value+3)& (0+255),c
  3356  001476  2A21               	incf	??_get_board_value+2,f,c
  3357  001478  D002               	goto	u4974
  3358  00147A                     u4975:
  3359  00147A  90D8               	bcf	status,0,c
  3360  00147C  3622               	rlcf	??_get_board_value+3,f,c
  3361  00147E                     u4974:
  3362  00147E  2E21               	decfsz	??_get_board_value+2,f,c
  3363  001480  D7FC               	goto	u4975
  3364  001482  5022               	movf	??_get_board_value+3,w,c
  3365  001484  1420               	andwf	??_get_board_value+1,w,c
  3366  001486  6E23               	movwf	(??_get_board_value+4)& (0+255),c
  3367  001488  2A1F               	incf	??_get_board_value,f,c
  3368  00148A  D002               	goto	u4984
  3369  00148C                     u4985:
  3370  00148C  90D8               	bcf	status,0,c
  3371  00148E  3223               	rrcf	??_get_board_value+4,f,c
  3372  001490                     u4984:
  3373  001490  2E1F               	decfsz	??_get_board_value,f,c
  3374  001492  D7FC               	goto	u4985
  3375  001494  5023               	movf	??_get_board_value+4,w,c
  3376                           
  3377                           ; BSR set to: 0
  3378  001496  0012               	return	
  3379  001498                     __end_of_get_board_value:
  3380                           	opt stack 0
  3381                           tblptru	equ	0xFF8
  3382                           tblptrh	equ	0xFF7
  3383                           tblptrl	equ	0xFF6
  3384                           tablat	equ	0xFF5
  3385                           prodh	equ	0xFF4
  3386                           prodl	equ	0xFF3
  3387                           intcon	equ	0xFF2
  3388                           intcon2	equ	0xFF1
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           indf1	equ	0xFE7
  3392                           fsr1h	equ	0xFE2
  3393                           fsr1l	equ	0xFE1
  3394                           indf2	equ	0xFDF
  3395                           postinc2	equ	0xFDE
  3396                           postdec2	equ	0xFDD
  3397                           plusw2	equ	0xFDB
  3398                           fsr2h	equ	0xFDA
  3399                           fsr2l	equ	0xFD9
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _clear_board_location *****************
  3403 ;; Defined at:
  3404 ;;		line 52 in file "game.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  row             1    wreg     unsigned char 
  3407 ;;  col             1   29[COMRAM] unsigned char 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  row             1   33[COMRAM] unsigned char 
  3410 ;; Return value:  Size  Location     Type
  3411 ;;		None               void
  3412 ;; Registers used:
  3413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : F/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3419 ;;      Params:         1       0       0       0
  3420 ;;      Locals:         1       0       0       0
  3421 ;;      Temps:          3       0       0       0
  3422 ;;      Totals:         5       0       0       0
  3423 ;;Total ram usage:        5 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    8
  3426 ;; This function calls:
  3427 ;;		___awdiv
  3428 ;; This function is called by:
  3429 ;;		_calculate_next_game_board
  3430 ;;		_random_board
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text12
  3435  001764                     __ptext12:
  3436                           	opt stack 0
  3437  001764                     _clear_board_location:
  3438                           	opt stack 20
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;incstack = 0
  3442                           ;clear_board_location@row stored from wreg
  3443  001764  6E22               	movwf	clear_board_location@row,c
  3444                           
  3445                           ;game.c: 53: game_board[ ( (( (((8)) * col) + row ) / ((8))) ) ] &=
  3446                           ;game.c: 54: ~((0x01 << (( ( (((8)) * col) + row ) % ((8)) ))));
  3447  001766  501E               	movf	clear_board_location@col,w,c
  3448  001768  0D08               	mullw	8
  3449  00176A  50F3               	movf	prodl,w,c
  3450  00176C  2422               	addwf	clear_board_location@row,w,c
  3451  00176E  6E1F               	movwf	??_clear_board_location& (0+255),c
  3452  001770  0E07               	movlw	7
  3453  001772  161F               	andwf	??_clear_board_location,f,c
  3454  001774  0E01               	movlw	1
  3455  001776  6E20               	movwf	(??_clear_board_location+1)& (0+255),c
  3456  001778  2A1F               	incf	??_clear_board_location,f,c
  3457  00177A  D002               	goto	u5314
  3458  00177C                     u5315:
  3459  00177C  90D8               	bcf	status,0,c
  3460  00177E  3620               	rlcf	??_clear_board_location+1,f,c
  3461  001780                     u5314:
  3462  001780  2E1F               	decfsz	??_clear_board_location,f,c
  3463  001782  D7FC               	goto	u5315
  3464  001784  1C20               	comf	??_clear_board_location+1,w,c
  3465  001786  6E21               	movwf	(??_clear_board_location+2)& (0+255),c
  3466  001788  501E               	movf	clear_board_location@col,w,c
  3467  00178A  0D08               	mullw	8
  3468  00178C  5022               	movf	clear_board_location@row,w,c
  3469  00178E  24F3               	addwf	prodl,w,c
  3470  001790  6E16               	movwf	___awdiv@dividend,c
  3471  001792  0E00               	movlw	0
  3472  001794  20F4               	addwfc	prodh,w,c
  3473  001796  6E17               	movwf	___awdiv@dividend+1,c
  3474  001798  6A19               	clrf	___awdiv@divisor+1,c
  3475  00179A  0E08               	movlw	8
  3476  00179C  6E18               	movwf	___awdiv@divisor,c
  3477  00179E  EC13  F008         	call	___awdiv	;wreg free
  3478  0017A2  5016               	movf	?___awdiv,w,c
  3479  0017A4  0100               	movlb	0	; () banked
  3480  0017A6  0F91               	addlw	low _game_board
  3481  0017A8  6ED9               	movwf	fsr2l,c
  3482  0017AA  6ADA               	clrf	fsr2h,c
  3483  0017AC  5021               	movf	??_clear_board_location+2,w,c
  3484  0017AE  16DF               	andwf	indf2,f,c
  3485                           
  3486                           ; BSR set to: 0
  3487  0017B0  0012               	return	
  3488  0017B2                     __end_of_clear_board_location:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           intcon	equ	0xFF2
  3497                           intcon2	equ	0xFF1
  3498                           postinc0	equ	0xFEE
  3499                           wreg	equ	0xFE8
  3500                           indf1	equ	0xFE7
  3501                           fsr1h	equ	0xFE2
  3502                           fsr1l	equ	0xFE1
  3503                           indf2	equ	0xFDF
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           plusw2	equ	0xFDB
  3507                           fsr2h	equ	0xFDA
  3508                           fsr2l	equ	0xFD9
  3509                           status	equ	0xFD8
  3510                           
  3511 ;; *************** function _block *****************
  3512 ;; Defined at:
  3513 ;;		line 218 in file "game.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;		None
  3518 ;; Return value:  Size  Location     Type
  3519 ;;		None               void
  3520 ;; Registers used:
  3521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : F/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3527 ;;      Params:         0       0       0       0
  3528 ;;      Locals:         0       0       0       0
  3529 ;;      Temps:          0       0       0       0
  3530 ;;      Totals:         0       0       0       0
  3531 ;;Total ram usage:        0 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    9
  3534 ;; This function calls:
  3535 ;;		_set_board_location
  3536 ;; This function is called by:
  3537 ;;		_game_loop
  3538 ;; This function uses a non-reentrant model
  3539 ;;
  3540                           
  3541                           	psect	text13
  3542  001982                     __ptext13:
  3543                           	opt stack 0
  3544  001982                     _block:
  3545                           	opt stack 20
  3546                           
  3547                           ;game.c: 219: set_board_location(2, 3);
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;incstack = 0
  3551  001982  0E03               	movlw	3
  3552  001984  6E1E               	movwf	set_board_location@col,c
  3553  001986  0E02               	movlw	2
  3554  001988  ECD9  F00B         	call	_set_board_location
  3555                           
  3556                           ;game.c: 220: set_board_location(2, 4);
  3557  00198C  0E04               	movlw	4
  3558  00198E  6E1E               	movwf	set_board_location@col,c
  3559  001990  0E02               	movlw	2
  3560  001992  ECD9  F00B         	call	_set_board_location
  3561                           
  3562                           ;game.c: 221: set_board_location(3, 3);
  3563  001996  0E03               	movlw	3
  3564  001998  6E1E               	movwf	set_board_location@col,c
  3565  00199A  ECD9  F00B         	call	_set_board_location
  3566                           
  3567                           ;game.c: 222: set_board_location(4, 6);
  3568  00199E  0E06               	movlw	6
  3569  0019A0  6E1E               	movwf	set_board_location@col,c
  3570  0019A2  0E04               	movlw	4
  3571  0019A4  ECD9  F00B         	call	_set_board_location
  3572                           
  3573                           ;game.c: 223: set_board_location(5, 5);
  3574  0019A8  0E05               	movlw	5
  3575  0019AA  6E1E               	movwf	set_board_location@col,c
  3576  0019AC  ECD9  F00B         	call	_set_board_location
  3577                           
  3578                           ;game.c: 224: set_board_location(5, 6);
  3579  0019B0  0E06               	movlw	6
  3580  0019B2  6E1E               	movwf	set_board_location@col,c
  3581  0019B4  0E05               	movlw	5
  3582  0019B6  EFD9  F00B         	goto	_set_board_location
  3583  0019BA                     __end_of_block:
  3584                           	opt stack 0
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           prodh	equ	0xFF4
  3590                           prodl	equ	0xFF3
  3591                           intcon	equ	0xFF2
  3592                           intcon2	equ	0xFF1
  3593                           postinc0	equ	0xFEE
  3594                           wreg	equ	0xFE8
  3595                           indf1	equ	0xFE7
  3596                           fsr1h	equ	0xFE2
  3597                           fsr1l	equ	0xFE1
  3598                           indf2	equ	0xFDF
  3599                           postinc2	equ	0xFDE
  3600                           postdec2	equ	0xFDD
  3601                           plusw2	equ	0xFDB
  3602                           fsr2h	equ	0xFDA
  3603                           fsr2l	equ	0xFD9
  3604                           status	equ	0xFD8
  3605                           
  3606 ;; *************** function _blinker *****************
  3607 ;; Defined at:
  3608 ;;		line 228 in file "game.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  row             1   33[COMRAM] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;		None               void
  3615 ;; Registers used:
  3616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : F/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3622 ;;      Params:         0       0       0       0
  3623 ;;      Locals:         1       0       0       0
  3624 ;;      Temps:          0       0       0       0
  3625 ;;      Totals:         1       0       0       0
  3626 ;;Total ram usage:        1 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    9
  3629 ;; This function calls:
  3630 ;;		_set_board_location
  3631 ;; This function is called by:
  3632 ;;		_game_loop
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           	psect	text14
  3637  001B54                     __ptext14:
  3638                           	opt stack 0
  3639  001B54                     _blinker:
  3640                           	opt stack 20
  3641                           
  3642                           ;game.c: 229: uint8_t row = milliseconds % ((((8))));
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;incstack = 0
  3646  001B54  5034               	movf	_milliseconds,w,c	;volatile
  3647  001B56  0B07               	andlw	7
  3648  001B58  6E22               	movwf	blinker@row,c
  3649                           
  3650                           ;game.c: 230: set_board_location(row, 2);
  3651  001B5A  0E02               	movlw	2
  3652  001B5C  6E1E               	movwf	set_board_location@col,c
  3653  001B5E  5022               	movf	blinker@row,w,c
  3654  001B60  ECD9  F00B         	call	_set_board_location
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;game.c: 231: set_board_location(row, 3);
  3658  001B64  0E03               	movlw	3
  3659  001B66  6E1E               	movwf	set_board_location@col,c
  3660  001B68  5022               	movf	blinker@row,w,c
  3661  001B6A  ECD9  F00B         	call	_set_board_location
  3662                           
  3663                           ; BSR set to: 0
  3664                           ;game.c: 232: set_board_location(row, 4);
  3665  001B6E  0E04               	movlw	4
  3666  001B70  6E1E               	movwf	set_board_location@col,c
  3667  001B72  5022               	movf	blinker@row,w,c
  3668  001B74  EFD9  F00B         	goto	_set_board_location
  3669  001B78                     __end_of_blinker:
  3670                           	opt stack 0
  3671                           tblptru	equ	0xFF8
  3672                           tblptrh	equ	0xFF7
  3673                           tblptrl	equ	0xFF6
  3674                           tablat	equ	0xFF5
  3675                           prodh	equ	0xFF4
  3676                           prodl	equ	0xFF3
  3677                           intcon	equ	0xFF2
  3678                           intcon2	equ	0xFF1
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           indf1	equ	0xFE7
  3682                           fsr1h	equ	0xFE2
  3683                           fsr1l	equ	0xFE1
  3684                           indf2	equ	0xFDF
  3685                           postinc2	equ	0xFDE
  3686                           postdec2	equ	0xFDD
  3687                           plusw2	equ	0xFDB
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function _set_board_location *****************
  3693 ;; Defined at:
  3694 ;;		line 57 in file "game.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  row             1    wreg     unsigned char 
  3697 ;;  col             1   29[COMRAM] unsigned char 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  row             1   32[COMRAM] unsigned char 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;		None               void
  3702 ;; Registers used:
  3703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : F/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3709 ;;      Params:         1       0       0       0
  3710 ;;      Locals:         1       0       0       0
  3711 ;;      Temps:          2       0       0       0
  3712 ;;      Totals:         4       0       0       0
  3713 ;;Total ram usage:        4 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    8
  3716 ;; This function calls:
  3717 ;;		___awdiv
  3718 ;; This function is called by:
  3719 ;;		_calculate_next_game_board
  3720 ;;		_block
  3721 ;;		_blinker
  3722 ;;		_glider
  3723 ;;		_random_board
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text15
  3728  0017B2                     __ptext15:
  3729                           	opt stack 0
  3730  0017B2                     _set_board_location:
  3731                           	opt stack 20
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;incstack = 0
  3735                           ;set_board_location@row stored from wreg
  3736  0017B2  6E21               	movwf	set_board_location@row,c
  3737                           
  3738                           ;game.c: 58: game_board[ ( (( (((8)) * col) + row ) / ((8))) ) ] |=
  3739                           ;game.c: 59: (0x01 << (( ( (((8)) * col) + row ) % ((8)) )));
  3740  0017B4  501E               	movf	set_board_location@col,w,c
  3741  0017B6  0D08               	mullw	8
  3742  0017B8  50F3               	movf	prodl,w,c
  3743  0017BA  2421               	addwf	set_board_location@row,w,c
  3744  0017BC  6E1F               	movwf	??_set_board_location& (0+255),c
  3745  0017BE  0E07               	movlw	7
  3746  0017C0  161F               	andwf	??_set_board_location,f,c
  3747  0017C2  0E01               	movlw	1
  3748  0017C4  6E20               	movwf	(??_set_board_location+1)& (0+255),c
  3749  0017C6  2A1F               	incf	??_set_board_location,f,c
  3750  0017C8  D002               	goto	u4994
  3751  0017CA                     u4995:
  3752  0017CA  90D8               	bcf	status,0,c
  3753  0017CC  3620               	rlcf	??_set_board_location+1,f,c
  3754  0017CE                     u4994:
  3755  0017CE  2E1F               	decfsz	??_set_board_location,f,c
  3756  0017D0  D7FC               	goto	u4995
  3757  0017D2  501E               	movf	set_board_location@col,w,c
  3758  0017D4  0D08               	mullw	8
  3759  0017D6  5021               	movf	set_board_location@row,w,c
  3760  0017D8  24F3               	addwf	prodl,w,c
  3761  0017DA  6E16               	movwf	___awdiv@dividend,c
  3762  0017DC  0E00               	movlw	0
  3763  0017DE  20F4               	addwfc	prodh,w,c
  3764  0017E0  6E17               	movwf	___awdiv@dividend+1,c
  3765  0017E2  6A19               	clrf	___awdiv@divisor+1,c
  3766  0017E4  0E08               	movlw	8
  3767  0017E6  6E18               	movwf	___awdiv@divisor,c
  3768  0017E8  EC13  F008         	call	___awdiv	;wreg free
  3769  0017EC  5016               	movf	?___awdiv,w,c
  3770  0017EE  0100               	movlb	0	; () banked
  3771  0017F0  0F91               	addlw	low _game_board
  3772  0017F2  6ED9               	movwf	fsr2l,c
  3773  0017F4  6ADA               	clrf	fsr2h,c
  3774  0017F6  5020               	movf	??_set_board_location+1,w,c
  3775  0017F8  12DF               	iorwf	indf2,f,c
  3776                           
  3777                           ; BSR set to: 0
  3778  0017FA  0012               	return	
  3779  0017FC                     __end_of_set_board_location:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           intcon2	equ	0xFF1
  3789                           postinc0	equ	0xFEE
  3790                           wreg	equ	0xFE8
  3791                           indf1	equ	0xFE7
  3792                           fsr1h	equ	0xFE2
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           postdec2	equ	0xFDD
  3797                           plusw2	equ	0xFDB
  3798                           fsr2h	equ	0xFDA
  3799                           fsr2l	equ	0xFD9
  3800                           status	equ	0xFD8
  3801                           
  3802 ;; *************** function _Write_Eep *****************
  3803 ;; Defined at:
  3804 ;;		line 355 in file "main.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  badd            2   21[COMRAM] unsigned int 
  3807 ;;  bdat            1   23[COMRAM] unsigned char 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  GIE_BIT_VAL     1   24[COMRAM] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;		None               void
  3812 ;; Registers used:
  3813 ;;		wreg, status,2
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3819 ;;      Params:         3       0       0       0
  3820 ;;      Locals:         1       0       0       0
  3821 ;;      Temps:          0       0       0       0
  3822 ;;      Totals:         4       0       0       0
  3823 ;;Total ram usage:        4 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    7
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_main
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text16
  3834  0019F2                     __ptext16:
  3835                           	opt stack 0
  3836  0019F2                     _Write_Eep:
  3837                           	opt stack 23
  3838                           
  3839                           ;main.c: 357: EEADR = (badd & 0x0ff);
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;incstack = 0
  3843  0019F2  C016  FFA9         	movff	Write_Eep@badd,4009	;volatile
  3844                           
  3845                           ;main.c: 358: EEDATA = bdat;
  3846  0019F6  C018  FFA8         	movff	Write_Eep@bdat,4008	;volatile
  3847                           
  3848                           ;main.c: 359: EECON1bits.EEPGD = 0;
  3849  0019FA  9EA6               	bcf	4006,7,c	;volatile
  3850                           
  3851                           ;main.c: 360: EECON1bits.CFGS = 0;
  3852  0019FC  9CA6               	bcf	4006,6,c	;volatile
  3853                           
  3854                           ;main.c: 361: EECON1bits.WREN = 1;
  3855  0019FE  84A6               	bsf	4006,2,c	;volatile
  3856                           
  3857                           ;main.c: 362: GIE_BIT_VAL = INTCONbits.GIE;
  3858  001A00  0E00               	movlw	0
  3859  001A02  BEF2               	btfsc	intcon,7,c	;volatile
  3860  001A04  0E01               	movlw	1
  3861  001A06  6E19               	movwf	Write_Eep@GIE_BIT_VAL,c
  3862                           
  3863                           ;main.c: 363: INTCONbits.GIE = 0;
  3864  001A08  9EF2               	bcf	intcon,7,c	;volatile
  3865                           
  3866                           ;main.c: 364: EECON2 = 0x55;
  3867  001A0A  0E55               	movlw	85
  3868  001A0C  6EA7               	movwf	4007,c	;volatile
  3869                           
  3870                           ;main.c: 365: EECON2 = 0xAA;
  3871  001A0E  0EAA               	movlw	170
  3872  001A10  6EA7               	movwf	4007,c	;volatile
  3873                           
  3874                           ;main.c: 366: EECON1bits.WR = 1;
  3875  001A12  82A6               	bsf	4006,1,c	;volatile
  3876  001A14                     l568:
  3877  001A14  B2A6               	btfsc	4006,1,c	;volatile
  3878  001A16  D7FE               	goto	l568
  3879                           
  3880                           ;main.c: 368: INTCONbits.GIE = GIE_BIT_VAL;
  3881  001A18  B019               	btfsc	Write_Eep@GIE_BIT_VAL,0,c
  3882  001A1A  D002               	bra	u2075
  3883  001A1C  9EF2               	bcf	intcon,7,c	;volatile
  3884  001A1E  D001               	bra	u2076
  3885  001A20                     u2075:
  3886  001A20  8EF2               	bsf	intcon,7,c	;volatile
  3887  001A22                     u2076:
  3888                           
  3889                           ;main.c: 369: EECON1bits.WREN = 0;
  3890  001A22  94A6               	bcf	4006,2,c	;volatile
  3891  001A24  0012               	return	
  3892  001A26                     __end_of_Write_Eep:
  3893                           	opt stack 0
  3894                           tblptru	equ	0xFF8
  3895                           tblptrh	equ	0xFF7
  3896                           tblptrl	equ	0xFF6
  3897                           tablat	equ	0xFF5
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           intcon	equ	0xFF2
  3901                           intcon2	equ	0xFF1
  3902                           postinc0	equ	0xFEE
  3903                           wreg	equ	0xFE8
  3904                           indf1	equ	0xFE7
  3905                           fsr1h	equ	0xFE2
  3906                           fsr1l	equ	0xFE1
  3907                           indf2	equ	0xFDF
  3908                           postinc2	equ	0xFDE
  3909                           postdec2	equ	0xFDD
  3910                           plusw2	equ	0xFDB
  3911                           fsr2h	equ	0xFDA
  3912                           fsr2l	equ	0xFD9
  3913                           status	equ	0xFD8
  3914                           
  3915 ;; *************** function _TimeNumerical *****************
  3916 ;; Defined at:
  3917 ;;		line 202 in file "main.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;		None               void
  3924 ;; Registers used:
  3925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : F/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3931 ;;      Params:         0       0       0       0
  3932 ;;      Locals:         0       0       0       0
  3933 ;;      Temps:          1       0       0       0
  3934 ;;      Totals:         1       0       0       0
  3935 ;;Total ram usage:        1 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:   12
  3938 ;; This function calls:
  3939 ;;		_ClearDisplay
  3940 ;;		_DisplayText
  3941 ;;		_RTCGetDateTime
  3942 ;;		_RtcNumberToString
  3943 ;; This function is called by:
  3944 ;;		_main
  3945 ;; This function uses a non-reentrant model
  3946 ;;
  3947                           
  3948                           	psect	text17
  3949  000EF8                     __ptext17:
  3950                           	opt stack 0
  3951  000EF8                     _TimeNumerical:
  3952                           	opt stack 18
  3953                           
  3954                           ;main.c: 204: static uint8_t prevSeconds = 0;
  3955                           ;main.c: 206: if (firstLoop) {
  3956                           
  3957                           ;incstack = 0
  3958  000EF8  5041               	movf	_firstLoop,w,c
  3959  000EFA  E006               	bz	l5934
  3960                           
  3961                           ;main.c: 207: ClearDisplay();
  3962  000EFC  EC33  F00E         	call	_ClearDisplay	;wreg free
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;main.c: 208: date_flag = 0x00;
  3966  000F00  9248               	bcf	_date_flag/(0+8),_date_flag& (0+7),c	;volatile
  3967                           
  3968                           ;main.c: 209: colon_flag = 0x00;
  3969  000F02  0100               	movlb	(_colon_flag/(0+8)) shr (0+8)
  3970  000F04  9048               	bcf	_colon_flag/(0+8),_colon_flag& (0+7),c
  3971                           
  3972                           ;main.c: 210: firstLoop = 0x00;
  3973  000F06  6A41               	clrf	_firstLoop,c
  3974  000F08                     l5934:
  3975                           
  3976                           ;main.c: 211: }
  3977                           ;main.c: 213: RTCGetDateTime();
  3978  000F08  EC2D  F007         	call	_RTCGetDateTime	;wreg free
  3979                           
  3980                           ;main.c: 214: if ((prevSeconds != dateTime.sec) || firstLoop) {
  3981  000F0C  0100               	movlb	0	; () banked
  3982  000F0E  516A               	movf	TimeNumerical@prevSeconds& (0+255),w,b
  3983  000F10  636D               	cpfseq	_dateTime& (0+255),b
  3984  000F12  D003               	goto	l501
  3985                           
  3986                           ; BSR set to: 0
  3987  000F14  5041               	movf	_firstLoop,w,c
  3988  000F16  B4D8               	btfsc	status,2,c
  3989  000F18  0012               	return	
  3990  000F1A                     l501:
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;main.c: 215: if (date_flag) {
  3994  000F1A  A248               	btfss	_date_flag/(0+8),_date_flag& (0+7),c	;volatile
  3995  000F1C  D012               	goto	l502
  3996                           
  3997                           ;main.c: 216: RtcNumberToString(dateTime.mon, dateTime.mday, dateTime.dstring);
  3998  000F1E  C071  F01A         	movff	_dateTime+4,RtcNumberToString@number2
  3999  000F22  0100               	movlb	0	; () banked
  4000  000F24  0E7B               	movlw	low (_dateTime+14)
  4001  000F26  6E1B               	movwf	RtcNumberToString@string,c
  4002  000F28  5172               	movf	(_dateTime+5)& (0+255),w,b
  4003  000F2A  EC8E  F006         	call	_RtcNumberToString
  4004                           
  4005                           ;main.c: 217: DisplayText(0, 1, dateTime.dstring);
  4006  000F2E  0E01               	movlw	1
  4007  000F30  6E17               	movwf	DisplayText@yStart,c
  4008  000F32  6A19               	clrf	DisplayText@gString+1,c
  4009  000F34  0100               	movlb	0	; () banked
  4010  000F36  0E7B               	movlw	low (_dateTime+14)
  4011  000F38  6E18               	movwf	DisplayText@gString,c
  4012  000F3A  0E00               	movlw	0
  4013  000F3C  ECAE  F003         	call	_DisplayText
  4014                           
  4015                           ;main.c: 218: }else {
  4016  000F40  D019               	goto	l5954
  4017  000F42                     l502:
  4018                           
  4019                           ;main.c: 219: if ((dateTime.sec % 2) && colon_flag) dateTime.tstring[2] = 32;
  4020  000F42  0100               	movlb	0	; () banked
  4021  000F44  B16D               	btfsc	_dateTime& (0+255),0,b
  4022                           
  4023                           ; BSR set to: 0
  4024  000F46  A048               	btfss	_colon_flag/(0+8),_colon_flag& (0+7),c
  4025  000F48  D002               	goto	l5948
  4026  000F4A  0E20               	movlw	32
  4027  000F4C  D001               	goto	L2
  4028  000F4E                     l5948:
  4029                           
  4030                           ;main.c: 220: else dateTime.tstring[2] = 58;
  4031  000F4E  0E3A               	movlw	58
  4032  000F50                     L2:
  4033  000F50  0100               	movlb	0	; () banked
  4034  000F52  6F77               	movwf	(_dateTime+10)& (0+255),b
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;main.c: 221: RtcNumberToString(dateTime.hour, dateTime.min, dateTime.tstring);
  4038  000F54  C06E  F01A         	movff	_dateTime+1,RtcNumberToString@number2
  4039  000F58  0E75               	movlw	low (_dateTime+8)
  4040  000F5A  6E1B               	movwf	RtcNumberToString@string,c
  4041  000F5C  516F               	movf	(_dateTime+2)& (0+255),w,b
  4042  000F5E  EC8E  F006         	call	_RtcNumberToString
  4043                           
  4044                           ;main.c: 222: DisplayText(0, 1, dateTime.tstring);
  4045  000F62  0E01               	movlw	1
  4046  000F64  6E17               	movwf	DisplayText@yStart,c
  4047  000F66  6A19               	clrf	DisplayText@gString+1,c
  4048  000F68  0100               	movlb	0	; () banked
  4049  000F6A  0E75               	movlw	low (_dateTime+8)
  4050  000F6C  6E18               	movwf	DisplayText@gString,c
  4051  000F6E  0E00               	movlw	0
  4052  000F70  ECAE  F003         	call	_DisplayText
  4053  000F74                     l5954:
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;main.c: 223: }
  4057                           ;main.c: 224: display.cols[dateTime.sec / 4] |= (1 << 7);
  4058  000F74  C06D  F025         	movff	_dateTime,??_TimeNumerical
  4059  000F78  90D8               	bcf	status,0,c
  4060  000F7A  3225               	rrcf	??_TimeNumerical,f,c
  4061  000F7C  90D8               	bcf	status,0,c
  4062  000F7E  3225               	rrcf	??_TimeNumerical,f,c
  4063  000F80  5025               	movf	??_TimeNumerical,w,c
  4064  000F82  0F81               	addlw	low _display	;volatile
  4065  000F84  6ED9               	movwf	fsr2l,c
  4066  000F86  6ADA               	clrf	fsr2h,c
  4067  000F88  0E00               	movlw	0
  4068  000F8A  8EDB               	bsf	plusw2,7,c
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;main.c: 226: prevSeconds = dateTime.sec;
  4072  000F8C  C06D  F06A         	movff	_dateTime,TimeNumerical@prevSeconds
  4073                           
  4074                           ; BSR set to: 0
  4075  000F90  0C00               	retlw	0
  4076  000F92                     __end_of_TimeNumerical:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           intcon	equ	0xFF2
  4085                           intcon2	equ	0xFF1
  4086                           postinc0	equ	0xFEE
  4087                           wreg	equ	0xFE8
  4088                           indf1	equ	0xFE7
  4089                           fsr1h	equ	0xFE2
  4090                           fsr1l	equ	0xFE1
  4091                           indf2	equ	0xFDF
  4092                           postinc2	equ	0xFDE
  4093                           postdec2	equ	0xFDD
  4094                           plusw2	equ	0xFDB
  4095                           fsr2h	equ	0xFDA
  4096                           fsr2l	equ	0xFD9
  4097                           status	equ	0xFD8
  4098                           
  4099 ;; *************** function _TemperatureDisplay *****************
  4100 ;; Defined at:
  4101 ;;		line 230 in file "main.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;		None
  4106 ;; Return value:  Size  Location     Type
  4107 ;;		None               void
  4108 ;; Registers used:
  4109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : F/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4115 ;;      Params:         0       0       0       0
  4116 ;;      Locals:         0       0       0       0
  4117 ;;      Temps:          0       0       0       0
  4118 ;;      Totals:         0       0       0       0
  4119 ;;Total ram usage:        0 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:   12
  4122 ;; This function calls:
  4123 ;;		_DisplayText
  4124 ;;		_LM75GetTemp
  4125 ;;		_NumberToString
  4126 ;;		_strcat
  4127 ;; This function is called by:
  4128 ;;		_main
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text18
  4133  00133C                     __ptext18:
  4134                           	opt stack 0
  4135  00133C                     _TemperatureDisplay:
  4136                           	opt stack 18
  4137                           
  4138                           ;main.c: 231: static uint8_t prevTemp = 0;
  4139                           ;main.c: 233: if (firstLoop) {
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;incstack = 0
  4143  00133C  5041               	movf	_firstLoop,w,c
  4144  00133E  E003               	bz	l6066
  4145                           
  4146                           ;main.c: 234: firstLoop = 0x00;
  4147  001340  6A41               	clrf	_firstLoop,c
  4148                           
  4149                           ;main.c: 235: prevTemp = 0;
  4150  001342  0100               	movlb	0	; () banked
  4151  001344  6B69               	clrf	TemperatureDisplay@prevTemp& (0+255),b
  4152  001346                     l6066:
  4153                           
  4154                           ;main.c: 236: }
  4155                           ;main.c: 238: LM75GetTemp();
  4156  001346  ECDE  F006         	call	_LM75GetTemp	;wreg free
  4157                           
  4158                           ;main.c: 239: if ((temperature.celcsius != prevTemp) || firstLoop) {
  4159  00134A  0100               	movlb	0	; () banked
  4160  00134C  5169               	movf	TemperatureDisplay@prevTemp& (0+255),w,b
  4161  00134E  623F               	cpfseq	_temperature,c	;volatile
  4162  001350  D003               	goto	l514
  4163                           
  4164                           ; BSR set to: 0
  4165  001352  5041               	movf	_firstLoop,w,c
  4166  001354  B4D8               	btfsc	status,2,c
  4167  001356  0012               	return	
  4168  001358                     l514:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;main.c: 241: if (temp_flag) {
  4172  001358  A448               	btfss	_temp_flag/(0+8),_temp_flag& (0+7),c	;volatile
  4173  00135A  D011               	goto	l6076
  4174                           
  4175                           ;main.c: 242: NumberToString(temperature.fahrenheit, tempString);
  4176  00135C  C040  F028         	movff	_temperature+1,NumberToString@number	;volatile
  4177  001360  6A29               	clrf	NumberToString@number+1,c
  4178  001362  0100               	movlb	0	; () banked
  4179  001364  0EAC               	movlw	low _tempString
  4180  001366  6E2A               	movwf	NumberToString@strPtr,c
  4181  001368  ECA6  F002         	call	_NumberToString	;wreg free
  4182                           
  4183                           ;main.c: 243: strcat(tempString, "F");
  4184  00136C  0E3F               	movlw	high STR_25
  4185  00136E  6E17               	movwf	strcat@from+1,c
  4186  001370  0EFD               	movlw	low STR_25
  4187  001372  6E16               	movwf	strcat@from,c
  4188  001374  0100               	movlb	0	; () banked
  4189  001376  0EAC               	movlw	_tempString& (0+255)
  4190  001378  ECDD  F00C         	call	_strcat
  4191                           
  4192                           ;main.c: 244: }else {
  4193  00137C  D010               	goto	l6080
  4194  00137E                     l6076:
  4195                           
  4196                           ;main.c: 245: NumberToString(temperature.celcsius, tempString);
  4197  00137E  C03F  F028         	movff	_temperature,NumberToString@number	;volatile
  4198  001382  6A29               	clrf	NumberToString@number+1,c
  4199  001384  0100               	movlb	0	; () banked
  4200  001386  0EAC               	movlw	low _tempString
  4201  001388  6E2A               	movwf	NumberToString@strPtr,c
  4202  00138A  ECA6  F002         	call	_NumberToString	;wreg free
  4203                           
  4204                           ;main.c: 246: strcat(tempString, "C");
  4205  00138E  0E3F               	movlw	high STR_26
  4206  001390  6E17               	movwf	strcat@from+1,c
  4207  001392  0EFB               	movlw	low STR_26
  4208  001394  6E16               	movwf	strcat@from,c
  4209  001396  0100               	movlb	0	; () banked
  4210  001398  0EAC               	movlw	_tempString& (0+255)
  4211  00139A  ECDD  F00C         	call	_strcat
  4212  00139E                     l6080:
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;main.c: 247: }
  4216                           ;main.c: 249: DisplayText(2, 2, tempString);
  4217  00139E  0E02               	movlw	2
  4218  0013A0  6E17               	movwf	DisplayText@yStart,c
  4219  0013A2  6A19               	clrf	DisplayText@gString+1,c
  4220  0013A4  0EAC               	movlw	low _tempString
  4221  0013A6  6E18               	movwf	DisplayText@gString,c
  4222  0013A8  0E02               	movlw	2
  4223  0013AA  ECAE  F003         	call	_DisplayText
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;main.c: 250: prevTemp = temperature.celcsius;
  4227  0013AE  C03F  F069         	movff	_temperature,TemperatureDisplay@prevTemp	;volatile
  4228                           
  4229                           ; BSR set to: 0
  4230  0013B2  0012               	return	
  4231  0013B4                     __end_of_TemperatureDisplay:
  4232                           	opt stack 0
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           intcon2	equ	0xFF1
  4241                           postinc0	equ	0xFEE
  4242                           wreg	equ	0xFE8
  4243                           indf1	equ	0xFE7
  4244                           fsr1h	equ	0xFE2
  4245                           fsr1l	equ	0xFE1
  4246                           indf2	equ	0xFDF
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           plusw2	equ	0xFDB
  4250                           fsr2h	equ	0xFDA
  4251                           fsr2l	equ	0xFD9
  4252                           status	equ	0xFD8
  4253                           
  4254 ;; *************** function _SecondsTime *****************
  4255 ;; Defined at:
  4256 ;;		line 298 in file "main.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;		None               void
  4263 ;; Registers used:
  4264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : F/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4270 ;;      Params:         0       0       0       0
  4271 ;;      Locals:         0       0       0       0
  4272 ;;      Temps:          0       0       0       0
  4273 ;;      Totals:         0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:   12
  4277 ;; This function calls:
  4278 ;;		_DisplayText
  4279 ;;		_NumberToString
  4280 ;;		_RTCGetDateTime
  4281 ;;		_RtcNumberToString
  4282 ;; This function is called by:
  4283 ;;		_main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text19
  4288  0015C0                     __ptext19:
  4289                           	opt stack 0
  4290  0015C0                     _SecondsTime:
  4291                           	opt stack 18
  4292                           
  4293                           ;main.c: 300: static uint8_t prevSeconds = 0;
  4294                           ;main.c: 302: RTCGetDateTime();
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;incstack = 0
  4298  0015C0  EC2D  F007         	call	_RTCGetDateTime	;wreg free
  4299                           
  4300                           ;main.c: 303: if ((prevSeconds != dateTime.sec) || firstLoop) {
  4301  0015C4  0100               	movlb	0	; () banked
  4302  0015C6  5168               	movf	SecondsTime@prevSeconds& (0+255),w,b
  4303  0015C8  636D               	cpfseq	_dateTime& (0+255),b
  4304  0015CA  D003               	goto	l6014
  4305                           
  4306                           ; BSR set to: 0
  4307  0015CC  5041               	movf	_firstLoop,w,c
  4308  0015CE  B4D8               	btfsc	status,2,c
  4309  0015D0  0012               	return	
  4310  0015D2                     l6014:
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;main.c: 304: if ((dateTime.sec == 0x00) || firstLoop) {
  4314  0015D2  516D               	movf	_dateTime& (0+255),w,b
  4315  0015D4  E002               	bz	l6018
  4316                           
  4317                           ; BSR set to: 0
  4318  0015D6  5041               	movf	_firstLoop,w,c
  4319  0015D8  E011               	bz	l6024
  4320  0015DA                     l6018:
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;main.c: 305: RtcNumberToString(dateTime.hour, dateTime.min, dateTime.tstring);
  4324  0015DA  C06E  F01A         	movff	_dateTime+1,RtcNumberToString@number2
  4325  0015DE  0E75               	movlw	low (_dateTime+8)
  4326  0015E0  6E1B               	movwf	RtcNumberToString@string,c
  4327  0015E2  516F               	movf	(_dateTime+2)& (0+255),w,b
  4328  0015E4  EC8E  F006         	call	_RtcNumberToString
  4329                           
  4330                           ;main.c: 306: DisplayText(0, 0, dateTime.tstring);
  4331  0015E8  6A17               	clrf	DisplayText@yStart,c
  4332  0015EA  6A19               	clrf	DisplayText@gString+1,c
  4333  0015EC  0100               	movlb	0	; () banked
  4334  0015EE  0E75               	movlw	low (_dateTime+8)
  4335  0015F0  6E18               	movwf	DisplayText@gString,c
  4336  0015F2  0E00               	movlw	0
  4337  0015F4  ECAE  F003         	call	_DisplayText
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;main.c: 307: firstLoop = 0x00;
  4341  0015F8  6A41               	clrf	_firstLoop,c
  4342                           
  4343                           ;main.c: 308: }else {
  4344  0015FA  D010               	goto	l6028
  4345  0015FC                     l6024:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;main.c: 309: NumberToString(dateTime.sec, tempString);
  4349  0015FC  C06D  F028         	movff	_dateTime,NumberToString@number
  4350  001600  6A29               	clrf	NumberToString@number+1,c
  4351  001602  0EAC               	movlw	low _tempString
  4352  001604  6E2A               	movwf	NumberToString@strPtr,c
  4353  001606  ECA6  F002         	call	_NumberToString	;wreg free
  4354                           
  4355                           ;main.c: 310: DisplayText(4, 1, tempString);
  4356  00160A  0E01               	movlw	1
  4357  00160C  6E17               	movwf	DisplayText@yStart,c
  4358  00160E  6A19               	clrf	DisplayText@gString+1,c
  4359  001610  0100               	movlb	0	; () banked
  4360  001612  0EAC               	movlw	low _tempString
  4361  001614  6E18               	movwf	DisplayText@gString,c
  4362  001616  0E04               	movlw	4
  4363  001618  ECAE  F003         	call	_DisplayText
  4364  00161C                     l6028:
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;main.c: 311: }
  4368                           ;main.c: 312: prevSeconds = dateTime.sec;
  4369  00161C  C06D  F068         	movff	_dateTime,SecondsTime@prevSeconds
  4370                           
  4371                           ; BSR set to: 0
  4372  001620  0012               	return	
  4373  001622                     __end_of_SecondsTime:
  4374                           	opt stack 0
  4375                           tblptru	equ	0xFF8
  4376                           tblptrh	equ	0xFF7
  4377                           tblptrl	equ	0xFF6
  4378                           tablat	equ	0xFF5
  4379                           prodh	equ	0xFF4
  4380                           prodl	equ	0xFF3
  4381                           intcon	equ	0xFF2
  4382                           intcon2	equ	0xFF1
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           indf1	equ	0xFE7
  4386                           fsr1h	equ	0xFE2
  4387                           fsr1l	equ	0xFE1
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           plusw2	equ	0xFDB
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _ScrollTime *****************
  4397 ;; Defined at:
  4398 ;;		line 254 in file "main.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  state           1   20[BANK0 ] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;		None               void
  4405 ;; Registers used:
  4406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : F/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4412 ;;      Params:         0       0       0       0
  4413 ;;      Locals:         0       1       0       0
  4414 ;;      Temps:          0       0       0       0
  4415 ;;      Totals:         0       1       0       0
  4416 ;;Total ram usage:        1 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:   12
  4419 ;; This function calls:
  4420 ;;		_ClearDisplay
  4421 ;;		_DateStringLong
  4422 ;;		_LM75GetTemp
  4423 ;;		_NumberToString
  4424 ;;		_RTCGetDateTime
  4425 ;;		_RtcNumberToString
  4426 ;;		_ScrollText
  4427 ;;		_strcat
  4428 ;; This function is called by:
  4429 ;;		_main
  4430 ;; This function uses a non-reentrant model
  4431 ;;
  4432                           
  4433                           	psect	text20
  4434  000AE4                     __ptext20:
  4435                           	opt stack 0
  4436  000AE4                     _ScrollTime:
  4437                           	opt stack 18
  4438                           
  4439                           ;main.c: 255: uint8_t state = 0;
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;incstack = 0
  4443  000AE4  0100               	movlb	0	; () banked
  4444  000AE6  6BC4               	clrf	ScrollTime@state& (0+255),b
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;main.c: 257: ClearDisplay();
  4448  000AE8  EC33  F00E         	call	_ClearDisplay	;wreg free
  4449  000AEC                     l5962:
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;main.c: 259: if (firstLoop) {
  4453  000AEC  5041               	movf	_firstLoop,w,c
  4454  000AEE  E04C               	bz	l6002
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;main.c: 260: RTCGetDateTime();
  4458  000AF0  EC2D  F007         	call	_RTCGetDateTime	;wreg free
  4459                           
  4460                           ;main.c: 261: LM75GetTemp();
  4461  000AF4  ECDE  F006         	call	_LM75GetTemp	;wreg free
  4462                           
  4463                           ;main.c: 262: firstLoop = 0x00;
  4464  000AF8  6A41               	clrf	_firstLoop,c
  4465  000AFA  D046               	goto	l6002
  4466  000AFC                     l5968:
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;main.c: 266: ScrollText(string_IT_IS);
  4470  000AFC  0E3F               	movlw	high _string_IT_IS
  4471  000AFE  6E25               	movwf	ScrollText@gString+1,c
  4472  000B00  0E58               	movlw	low _string_IT_IS
  4473  000B02  6E24               	movwf	ScrollText@gString,c
  4474  000B04  EC69  F001         	call	_ScrollText	;wreg free
  4475                           
  4476                           ;main.c: 267: state = 1;
  4477  000B08  0E01               	movlw	1
  4478  000B0A  D034               	goto	L6
  4479  000B0C                     l5972:
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;main.c: 270: NumberToString(temperature.celcsius, tempString);
  4483  000B0C  C03F  F028         	movff	_temperature,NumberToString@number	;volatile
  4484  000B10  6A29               	clrf	NumberToString@number+1,c
  4485  000B12  0EAC               	movlw	low _tempString
  4486  000B14  6E2A               	movwf	NumberToString@strPtr,c
  4487  000B16  ECA6  F002         	call	_NumberToString	;wreg free
  4488                           
  4489                           ;main.c: 271: strcat(tempString, "C");
  4490  000B1A  0E3F               	movlw	high STR_26
  4491  000B1C  6E17               	movwf	strcat@from+1,c
  4492  000B1E  0EFB               	movlw	low STR_26
  4493  000B20  6E16               	movwf	strcat@from,c
  4494  000B22  0100               	movlb	0	; () banked
  4495  000B24  0EAC               	movlw	_tempString& (0+255)
  4496  000B26  ECDD  F00C         	call	_strcat
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;main.c: 272: ScrollText(tempString);
  4500  000B2A  6A25               	clrf	ScrollText@gString+1,c
  4501  000B2C  0EAC               	movlw	low _tempString
  4502  000B2E  6E24               	movwf	ScrollText@gString,c
  4503  000B30  EC69  F001         	call	_ScrollText	;wreg free
  4504                           
  4505                           ;main.c: 273: state = 2;
  4506  000B34  0E02               	movlw	2
  4507  000B36  D01E               	goto	L6
  4508  000B38                     l5980:
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;main.c: 276: ScrollText(string_AT);
  4512  000B38  0E3F               	movlw	high _string_AT
  4513  000B3A  6E25               	movwf	ScrollText@gString+1,c
  4514  000B3C  0E5F               	movlw	low _string_AT
  4515  000B3E  6E24               	movwf	ScrollText@gString,c
  4516  000B40  EC69  F001         	call	_ScrollText	;wreg free
  4517                           
  4518                           ;main.c: 277: state = 3;
  4519  000B44  0E03               	movlw	3
  4520  000B46  D016               	goto	L6
  4521  000B48                     l5984:
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;main.c: 280: RtcNumberToString(dateTime.hour, dateTime.min, dateTime.tstring);
  4525  000B48  C06E  F01A         	movff	_dateTime+1,RtcNumberToString@number2
  4526  000B4C  0E75               	movlw	low (_dateTime+8)
  4527  000B4E  6E1B               	movwf	RtcNumberToString@string,c
  4528  000B50  516F               	movf	(_dateTime+2)& (0+255),w,b
  4529  000B52  EC8E  F006         	call	_RtcNumberToString
  4530                           
  4531                           ;main.c: 281: ScrollText(dateTime.tstring);
  4532  000B56  6A25               	clrf	ScrollText@gString+1,c
  4533  000B58  0100               	movlb	0	; () banked
  4534  000B5A  0E75               	movlw	low (_dateTime+8)
  4535  000B5C  6E24               	movwf	ScrollText@gString,c
  4536  000B5E  EC69  F001         	call	_ScrollText	;wreg free
  4537                           
  4538                           ;main.c: 282: state = 4;
  4539  000B62  0E04               	movlw	4
  4540  000B64  D007               	goto	L6
  4541  000B66                     l5990:
  4542                           
  4543                           ; BSR set to: 0
  4544                           ;main.c: 285: ScrollText(string_ON);
  4545  000B66  0E3F               	movlw	high _string_ON
  4546  000B68  6E25               	movwf	ScrollText@gString+1,c
  4547  000B6A  0E69               	movlw	low _string_ON
  4548  000B6C  6E24               	movwf	ScrollText@gString,c
  4549  000B6E  EC69  F001         	call	_ScrollText	;wreg free
  4550                           
  4551                           ;main.c: 286: state = 5;
  4552  000B72  0E05               	movlw	5
  4553  000B74                     L6:
  4554  000B74  0100               	movlb	0	; () banked
  4555  000B76  6FC4               	movwf	ScrollTime@state& (0+255),b
  4556                           
  4557                           ;main.c: 287: break;
  4558  000B78  D014               	goto	l6004
  4559  000B7A                     l5994:
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;main.c: 289: DateStringLong();
  4563  000B7A  EC37  F000         	call	_DateStringLong	;wreg free
  4564                           
  4565                           ;main.c: 290: state = 0;
  4566  000B7E  0100               	movlb	0	; () banked
  4567  000B80  6BC4               	clrf	ScrollTime@state& (0+255),b
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;main.c: 291: firstLoop = 0x01;
  4571  000B82  0E01               	movlw	1
  4572  000B84  6E41               	movwf	_firstLoop,c
  4573                           
  4574                           ;main.c: 292: break;
  4575  000B86  D00D               	goto	l6004
  4576  000B88                     l6002:
  4577  000B88  0100               	movlb	0	; () banked
  4578  000B8A  51C4               	movf	ScrollTime@state& (0+255),w,b
  4579                           
  4580                           ; Switch size 1, requested type "space"
  4581                           ; Number of cases is 6, Range of values is 0 to 5
  4582                           ; switch strategies available:
  4583                           ; Name         Instructions Cycles
  4584                           ; simple_byte           19    10 (average)
  4585                           ;	Chosen strategy is simple_byte
  4586  000B8C  E0B7               	bz	l5968
  4587  000B8E  0A01               	xorlw	1	; case 1
  4588  000B90  E0BD               	bz	l5972
  4589  000B92  0A03               	xorlw	3	; case 2
  4590  000B94  E0D1               	bz	l5980
  4591  000B96  0A01               	xorlw	1	; case 3
  4592  000B98  E0D7               	bz	l5984
  4593  000B9A  0A07               	xorlw	7	; case 4
  4594  000B9C  E0E4               	bz	l5990
  4595  000B9E  0A01               	xorlw	1	; case 5
  4596  000BA0  E0EC               	bz	l5994
  4597  000BA2                     l6004:
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;main.c: 294: } while (currentState == 2);
  4601  000BA2  5049               	movf	_currentState,w,c	;volatile
  4602  000BA4  0A02               	xorlw	2
  4603  000BA6  E0A2               	bz	l5962
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;main.c: 295: firstLoop = 0x01;
  4607  000BA8  0E01               	movlw	1
  4608  000BAA  6E41               	movwf	_firstLoop,c
  4609                           
  4610                           ; BSR set to: 0
  4611  000BAC  0C01               	retlw	1
  4612  000BAE                     __end_of_ScrollTime:
  4613                           	opt stack 0
  4614                           tblptru	equ	0xFF8
  4615                           tblptrh	equ	0xFF7
  4616                           tblptrl	equ	0xFF6
  4617                           tablat	equ	0xFF5
  4618                           prodh	equ	0xFF4
  4619                           prodl	equ	0xFF3
  4620                           intcon	equ	0xFF2
  4621                           intcon2	equ	0xFF1
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           indf1	equ	0xFE7
  4625                           fsr1h	equ	0xFE2
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           plusw2	equ	0xFDB
  4631                           fsr2h	equ	0xFDA
  4632                           fsr2l	equ	0xFD9
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _RtcNumberToString *****************
  4636 ;; Defined at:
  4637 ;;		line 152 in file "DS1307.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  number1         1    wreg     unsigned char 
  4640 ;;  number2         1   25[COMRAM] unsigned char 
  4641 ;;  string          1   26[COMRAM] PTR unsigned char 
  4642 ;;		 -> dateTime(20), 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  number1         1   27[COMRAM] unsigned char 
  4645 ;; Return value:  Size  Location     Type
  4646 ;;		None               void
  4647 ;; Registers used:
  4648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4649 ;; Tracked objects:
  4650 ;;		On entry : F/0
  4651 ;;		On exit  : 0/0
  4652 ;;		Unchanged: 0/0
  4653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4654 ;;      Params:         2       0       0       0
  4655 ;;      Locals:         1       0       0       0
  4656 ;;      Temps:          0       0       0       0
  4657 ;;      Totals:         3       0       0       0
  4658 ;;Total ram usage:        3 bytes
  4659 ;; Hardware stack levels used:    1
  4660 ;; Hardware stack levels required when called:    8
  4661 ;; This function calls:
  4662 ;;		___lbdiv
  4663 ;;		___lbmod
  4664 ;; This function is called by:
  4665 ;;		_TimeNumerical
  4666 ;;		_ScrollTime
  4667 ;;		_SecondsTime
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text21
  4672  000D1C                     __ptext21:
  4673                           	opt stack 0
  4674  000D1C                     _RtcNumberToString:
  4675                           	opt stack 21
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;incstack = 0
  4679                           ;RtcNumberToString@number1 stored from wreg
  4680  000D1C  6E1C               	movwf	RtcNumberToString@number1,c
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;DS1307.c: 154: if (((number1) / 10) > 0) {
  4684  000D1E  0E0A               	movlw	10
  4685  000D20  6E16               	movwf	___lbdiv@divisor,c
  4686  000D22  501C               	movf	RtcNumberToString@number1,w,c
  4687  000D24  EC2D  F00D         	call	___lbdiv
  4688  000D28  0900               	iorlw	0
  4689  000D2A  E016               	bz	l5650
  4690                           
  4691                           ;DS1307.c: 155: if (number1 == 11) {
  4692  000D2C  501C               	movf	RtcNumberToString@number1,w,c
  4693  000D2E  0A0B               	xorlw	11
  4694  000D30  E10B               	bnz	l5646
  4695                           
  4696                           ;DS1307.c: 156: string[0] = 34;
  4697  000D32  501B               	movf	RtcNumberToString@string,w,c
  4698  000D34  6ED9               	movwf	fsr2l,c
  4699  000D36  6ADA               	clrf	fsr2h,c
  4700  000D38  0E22               	movlw	34
  4701  000D3A  6EDF               	movwf	indf2,c
  4702                           
  4703                           ;DS1307.c: 157: string[1] = 34;
  4704  000D3C  501B               	movf	RtcNumberToString@string,w,c
  4705  000D3E  6ED9               	movwf	fsr2l,c
  4706  000D40  6ADA               	clrf	fsr2h,c
  4707  000D42  2AD9               	incf	fsr2l,f,c
  4708  000D44  0E22               	movlw	34
  4709  000D46  D010               	goto	L7
  4710  000D48                     l5646:
  4711                           
  4712                           ;DS1307.c: 159: string[0] = 33;
  4713  000D48  501B               	movf	RtcNumberToString@string,w,c
  4714  000D4A  6ED9               	movwf	fsr2l,c
  4715  000D4C  6ADA               	clrf	fsr2h,c
  4716  000D4E  0E21               	movlw	33
  4717                           
  4718                           ;DS1307.c: 160: string[1] = (number1 % 10) + 48;
  4719  000D50  D82C               	call	PL14	;call to abstracted procedure
  4720  000D52  EC84  F00D         	call	___lbmod
  4721  000D56  D007               	goto	L8
  4722  000D58                     l5650:
  4723                           
  4724                           ;DS1307.c: 163: string[0] = 32;
  4725  000D58  501B               	movf	RtcNumberToString@string,w,c
  4726  000D5A  6ED9               	movwf	fsr2l,c
  4727  000D5C  6ADA               	clrf	fsr2h,c
  4728  000D5E  0E20               	movlw	32
  4729                           
  4730                           ;DS1307.c: 164: string[1] = (number1 % 10) + 48;
  4731  000D60  D824               	call	PL14	;call to abstracted procedure
  4732  000D62  EC84  F00D         	call	___lbmod
  4733  000D66                     L8:
  4734  000D66  0F30               	addlw	48
  4735  000D68                     L7:
  4736  000D68  6EDF               	movwf	indf2,c
  4737                           
  4738                           ;DS1307.c: 165: }
  4739                           ;DS1307.c: 166: string[3] = (number2 / 10) + 48;
  4740  000D6A  501B               	movf	RtcNumberToString@string,w,c
  4741  000D6C  6ED9               	movwf	fsr2l,c
  4742  000D6E  6ADA               	clrf	fsr2h,c
  4743  000D70  0E03               	movlw	3
  4744  000D72  26D9               	addwf	fsr2l,f,c
  4745  000D74  0E0A               	movlw	10
  4746  000D76  6E16               	movwf	___lbdiv@divisor,c
  4747  000D78  501A               	movf	RtcNumberToString@number2,w,c
  4748  000D7A  EC2D  F00D         	call	___lbdiv
  4749  000D7E  0F30               	addlw	48
  4750  000D80  6EDF               	movwf	indf2,c
  4751                           
  4752                           ;DS1307.c: 167: string[4] = (number2 % 10) + 48;
  4753  000D82  501B               	movf	RtcNumberToString@string,w,c
  4754  000D84  6ED9               	movwf	fsr2l,c
  4755  000D86  6ADA               	clrf	fsr2h,c
  4756  000D88  0E04               	movlw	4
  4757  000D8A  26D9               	addwf	fsr2l,f,c
  4758  000D8C  0E0A               	movlw	10
  4759  000D8E  6E16               	movwf	___lbmod@divisor,c
  4760  000D90  501A               	movf	RtcNumberToString@number2,w,c
  4761  000D92  EC84  F00D         	call	___lbmod
  4762  000D96  0F30               	addlw	48
  4763  000D98  6EDF               	movwf	indf2,c
  4764                           
  4765                           ;DS1307.c: 168: string[5] = '\0';
  4766  000D9A  501B               	movf	RtcNumberToString@string,w,c
  4767  000D9C  6ED9               	movwf	fsr2l,c
  4768  000D9E  6ADA               	clrf	fsr2h,c
  4769  000DA0  0E05               	movlw	5
  4770  000DA2  26D9               	addwf	fsr2l,f,c
  4771  000DA4  0E00               	movlw	0
  4772  000DA6  6EDF               	movwf	indf2,c
  4773  000DA8  0C00               	retlw	0
  4774  000DAA                     __end_of_RtcNumberToString:
  4775                           	opt stack 0
  4776  000DAA                     PL14:
  4777                           	opt stack 21
  4778  000DAA  6EDF               	movwf	indf2,c
  4779  000DAC  501B               	movf	RtcNumberToString@string,w,c
  4780  000DAE  6ED9               	movwf	fsr2l,c
  4781  000DB0  6ADA               	clrf	fsr2h,c
  4782  000DB2  2AD9               	incf	fsr2l,f,c
  4783  000DB4  0E0A               	movlw	10
  4784  000DB6  6E16               	movwf	___lbmod@divisor,c
  4785  000DB8  501C               	movf	RtcNumberToString@number1,w,c
  4786  000DBA  0012               	return	
  4787  000DBC                     __end_ofPL14:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           intcon	equ	0xFF2
  4796                           intcon2	equ	0xFF1
  4797                           postinc0	equ	0xFEE
  4798                           wreg	equ	0xFE8
  4799                           indf1	equ	0xFE7
  4800                           fsr1h	equ	0xFE2
  4801                           fsr1l	equ	0xFE1
  4802                           indf2	equ	0xFDF
  4803                           postinc2	equ	0xFDE
  4804                           postdec2	equ	0xFDD
  4805                           plusw2	equ	0xFDB
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function _DateStringLong *****************
  4811 ;; Defined at:
  4812 ;;		line 172 in file "DS1307.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;		None
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  tstring        16    0[BANK0 ] unsigned char [16]
  4817 ;;  length          2   17[BANK0 ] int 
  4818 ;;  number1         1   19[BANK0 ] unsigned char 
  4819 ;;  number2         1   16[BANK0 ] unsigned char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;		None               void
  4822 ;; Registers used:
  4823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4829 ;;      Params:         0       0       0       0
  4830 ;;      Locals:         0      20       0       0
  4831 ;;      Temps:          1       0       0       0
  4832 ;;      Totals:         1      20       0       0
  4833 ;;Total ram usage:       21 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    9
  4836 ;; This function calls:
  4837 ;;		_ScrollText
  4838 ;;		___lbdiv
  4839 ;;		_strcat
  4840 ;;		_strlen
  4841 ;; This function is called by:
  4842 ;;		_ScrollTime
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text22
  4847  00006E                     __ptext22:
  4848                           	opt stack 0
  4849  00006E                     _DateStringLong:
  4850                           	opt stack 20
  4851                           
  4852                           ;DS1307.c: 174: uint8_t tstring[16];
  4853                           ;DS1307.c: 175: unsigned char number1, number2;
  4854                           ;DS1307.c: 176: int length;
  4855                           ;DS1307.c: 180: tstring[0] = '\0';
  4856                           
  4857                           ;incstack = 0
  4858  00006E  0100               	movlb	0	; () banked
  4859  000070  6BB0               	clrf	DateStringLong@tstring& (0+255),b
  4860                           
  4861                           ;DS1307.c: 182: switch (dateTime.wday) {
  4862  000072  D038               	goto	l5678
  4863  000074                     l5662:
  4864                           
  4865                           ; BSR set to: 0
  4866  000074  0E3F               	movlw	high STR_1
  4867  000076  6E17               	movwf	strcat@from+1,c
  4868  000078  0EB2               	movlw	low STR_1
  4869  00007A  6E16               	movwf	strcat@from,c
  4870  00007C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4871  00007E  ECDD  F00C         	call	_strcat
  4872                           
  4873                           ;DS1307.c: 184: break;
  4874  000082  D0A0               	goto	l5706
  4875  000084                     l5664:
  4876                           
  4877                           ; BSR set to: 0
  4878  000084  0E3F               	movlw	high STR_2
  4879  000086  6E17               	movwf	strcat@from+1,c
  4880  000088  0E9E               	movlw	low STR_2
  4881  00008A  6E16               	movwf	strcat@from,c
  4882  00008C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4883  00008E  ECDD  F00C         	call	_strcat
  4884                           
  4885                           ;DS1307.c: 186: break;
  4886  000092  D098               	goto	l5706
  4887  000094                     l5666:
  4888                           
  4889                           ; BSR set to: 0
  4890  000094  0E3F               	movlw	high STR_3
  4891  000096  6E17               	movwf	strcat@from+1,c
  4892  000098  0E99               	movlw	low STR_3
  4893  00009A  6E16               	movwf	strcat@from,c
  4894  00009C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4895  00009E  ECDD  F00C         	call	_strcat
  4896                           
  4897                           ;DS1307.c: 188: break;
  4898  0000A2  D090               	goto	l5706
  4899  0000A4                     l5668:
  4900                           
  4901                           ; BSR set to: 0
  4902  0000A4  0E3F               	movlw	high STR_4
  4903  0000A6  6E17               	movwf	strcat@from+1,c
  4904  0000A8  0ED0               	movlw	low STR_4
  4905  0000AA  6E16               	movwf	strcat@from,c
  4906  0000AC  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4907  0000AE  ECDD  F00C         	call	_strcat
  4908                           
  4909                           ;DS1307.c: 190: break;
  4910  0000B2  D088               	goto	l5706
  4911  0000B4                     l5670:
  4912                           
  4913                           ; BSR set to: 0
  4914  0000B4  0E3F               	movlw	high STR_5
  4915  0000B6  6E17               	movwf	strcat@from+1,c
  4916  0000B8  0EA8               	movlw	low STR_5
  4917  0000BA  6E16               	movwf	strcat@from,c
  4918  0000BC  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4919  0000BE  ECDD  F00C         	call	_strcat
  4920                           
  4921                           ;DS1307.c: 192: break;
  4922  0000C2  D080               	goto	l5706
  4923  0000C4                     l5672:
  4924                           
  4925                           ; BSR set to: 0
  4926  0000C4  0E3F               	movlw	high STR_6
  4927  0000C6  6E17               	movwf	strcat@from+1,c
  4928  0000C8  0EC6               	movlw	low STR_6
  4929  0000CA  6E16               	movwf	strcat@from,c
  4930  0000CC  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4931  0000CE  ECDD  F00C         	call	_strcat
  4932                           
  4933                           ;DS1307.c: 194: break;
  4934  0000D2  D078               	goto	l5706
  4935  0000D4                     l5674:
  4936                           
  4937                           ; BSR set to: 0
  4938  0000D4  0E3F               	movlw	high STR_7
  4939  0000D6  6E17               	movwf	strcat@from+1,c
  4940  0000D8  0EB7               	movlw	low STR_7
  4941  0000DA  6E16               	movwf	strcat@from,c
  4942  0000DC  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4943  0000DE  ECDD  F00C         	call	_strcat
  4944                           
  4945                           ;DS1307.c: 196: break;
  4946  0000E2  D070               	goto	l5706
  4947  0000E4                     l5678:
  4948                           
  4949                           ; BSR set to: 0
  4950  0000E4  5170               	movf	(_dateTime+3)& (0+255),w,b
  4951                           
  4952                           ; Switch size 1, requested type "space"
  4953                           ; Number of cases is 7, Range of values is 1 to 7
  4954                           ; switch strategies available:
  4955                           ; Name         Instructions Cycles
  4956                           ; simple_byte           22    12 (average)
  4957                           ;	Chosen strategy is simple_byte
  4958  0000E6  0A01               	xorlw	1	; case 1
  4959  0000E8  E0C5               	bz	l5662
  4960  0000EA  0A03               	xorlw	3	; case 2
  4961  0000EC  E0CB               	bz	l5664
  4962  0000EE  0A01               	xorlw	1	; case 3
  4963  0000F0  E0D1               	bz	l5666
  4964  0000F2  0A07               	xorlw	7	; case 4
  4965  0000F4  E0D7               	bz	l5668
  4966  0000F6  0A01               	xorlw	1	; case 5
  4967  0000F8  E0DD               	bz	l5670
  4968  0000FA  0A03               	xorlw	3	; case 6
  4969  0000FC  E0E3               	bz	l5672
  4970  0000FE  0A01               	xorlw	1	; case 7
  4971  000100  E0E9               	bz	l5674
  4972  000102  D060               	goto	l5706
  4973  000104                     l5680:
  4974                           
  4975                           ; BSR set to: 0
  4976  000104  0E3F               	movlw	high STR_8
  4977  000106  6E17               	movwf	strcat@from+1,c
  4978  000108  0EAD               	movlw	low STR_8
  4979  00010A  6E16               	movwf	strcat@from,c
  4980  00010C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4981  00010E  ECDD  F00C         	call	_strcat
  4982                           
  4983                           ;DS1307.c: 201: break;
  4984  000112  D071               	goto	l5708
  4985  000114                     l5682:
  4986                           
  4987                           ; BSR set to: 0
  4988  000114  0E3F               	movlw	high STR_9
  4989  000116  6E17               	movwf	strcat@from+1,c
  4990  000118  0E8F               	movlw	low STR_9
  4991  00011A  6E16               	movwf	strcat@from,c
  4992  00011C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  4993  00011E  ECDD  F00C         	call	_strcat
  4994                           
  4995                           ;DS1307.c: 203: break;
  4996  000122  D069               	goto	l5708
  4997  000124                     l5684:
  4998                           
  4999                           ; BSR set to: 0
  5000  000124  0E3F               	movlw	high STR_10
  5001  000126  6E17               	movwf	strcat@from+1,c
  5002  000128  0EBC               	movlw	low STR_10
  5003  00012A  6E16               	movwf	strcat@from,c
  5004  00012C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5005  00012E  ECDD  F00C         	call	_strcat
  5006                           
  5007                           ;DS1307.c: 205: break;
  5008  000132  D061               	goto	l5708
  5009  000134                     l5686:
  5010                           
  5011                           ; BSR set to: 0
  5012  000134  0E3F               	movlw	high STR_11
  5013  000136  6E17               	movwf	strcat@from+1,c
  5014  000138  0EC1               	movlw	low STR_11
  5015  00013A  6E16               	movwf	strcat@from,c
  5016  00013C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5017  00013E  ECDD  F00C         	call	_strcat
  5018                           
  5019                           ;DS1307.c: 207: break;
  5020  000142  D059               	goto	l5708
  5021  000144                     l5688:
  5022                           
  5023                           ; BSR set to: 0
  5024  000144  0E3F               	movlw	high STR_12
  5025  000146  6E17               	movwf	strcat@from+1,c
  5026  000148  0EDA               	movlw	low STR_12
  5027  00014A  6E16               	movwf	strcat@from,c
  5028  00014C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5029  00014E  ECDD  F00C         	call	_strcat
  5030                           
  5031                           ;DS1307.c: 209: break;
  5032  000152  D051               	goto	l5708
  5033  000154                     l5690:
  5034                           
  5035                           ; BSR set to: 0
  5036  000154  0E3F               	movlw	high STR_13
  5037  000156  6E17               	movwf	strcat@from+1,c
  5038  000158  0E6E               	movlw	low STR_13
  5039  00015A  6E16               	movwf	strcat@from,c
  5040  00015C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5041  00015E  ECDD  F00C         	call	_strcat
  5042                           
  5043                           ;DS1307.c: 211: break;
  5044  000162  D049               	goto	l5708
  5045  000164                     l5692:
  5046                           
  5047                           ; BSR set to: 0
  5048  000164  0E3F               	movlw	high STR_14
  5049  000166  6E17               	movwf	strcat@from+1,c
  5050  000168  0E7A               	movlw	low STR_14
  5051  00016A  6E16               	movwf	strcat@from,c
  5052  00016C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5053  00016E  ECDD  F00C         	call	_strcat
  5054                           
  5055                           ;DS1307.c: 213: break;
  5056  000172  D041               	goto	l5708
  5057  000174                     l5694:
  5058                           
  5059                           ; BSR set to: 0
  5060  000174  0E3F               	movlw	high STR_15
  5061  000176  6E17               	movwf	strcat@from+1,c
  5062  000178  0EA3               	movlw	low STR_15
  5063  00017A  6E16               	movwf	strcat@from,c
  5064  00017C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5065  00017E  ECDD  F00C         	call	_strcat
  5066                           
  5067                           ;DS1307.c: 215: break;
  5068  000182  D039               	goto	l5708
  5069  000184                     l5696:
  5070                           
  5071                           ; BSR set to: 0
  5072  000184  0E3F               	movlw	high STR_16
  5073  000186  6E17               	movwf	strcat@from+1,c
  5074  000188  0E74               	movlw	low STR_16
  5075  00018A  6E16               	movwf	strcat@from,c
  5076  00018C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5077  00018E  ECDD  F00C         	call	_strcat
  5078                           
  5079                           ;DS1307.c: 217: break;
  5080  000192  D031               	goto	l5708
  5081  000194                     l5698:
  5082                           
  5083                           ; BSR set to: 0
  5084  000194  0E3F               	movlw	high STR_17
  5085  000196  6E17               	movwf	strcat@from+1,c
  5086  000198  0ECB               	movlw	low STR_17
  5087  00019A  6E16               	movwf	strcat@from,c
  5088  00019C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5089  00019E  ECDD  F00C         	call	_strcat
  5090                           
  5091                           ;DS1307.c: 219: break;
  5092  0001A2  D029               	goto	l5708
  5093  0001A4                     l5700:
  5094                           
  5095                           ; BSR set to: 0
  5096  0001A4  0E3F               	movlw	high STR_18
  5097  0001A6  6E17               	movwf	strcat@from+1,c
  5098  0001A8  0ED5               	movlw	low STR_18
  5099  0001AA  6E16               	movwf	strcat@from,c
  5100  0001AC  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5101  0001AE  ECDD  F00C         	call	_strcat
  5102                           
  5103                           ;DS1307.c: 221: break;
  5104  0001B2  D021               	goto	l5708
  5105  0001B4                     l5702:
  5106                           
  5107                           ; BSR set to: 0
  5108  0001B4  0E3F               	movlw	high STR_19
  5109  0001B6  6E17               	movwf	strcat@from+1,c
  5110  0001B8  0E94               	movlw	low STR_19
  5111  0001BA  6E16               	movwf	strcat@from,c
  5112  0001BC  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5113  0001BE  ECDD  F00C         	call	_strcat
  5114                           
  5115                           ;DS1307.c: 223: break;
  5116  0001C2  D019               	goto	l5708
  5117  0001C4                     l5706:
  5118                           
  5119                           ; BSR set to: 0
  5120  0001C4  5172               	movf	(_dateTime+5)& (0+255),w,b
  5121                           
  5122                           ; Switch size 1, requested type "space"
  5123                           ; Number of cases is 12, Range of values is 1 to 12
  5124                           ; switch strategies available:
  5125                           ; Name         Instructions Cycles
  5126                           ; simple_byte           37    19 (average)
  5127                           ;	Chosen strategy is simple_byte
  5128  0001C6  0A01               	xorlw	1	; case 1
  5129  0001C8  E09D               	bz	l5680
  5130  0001CA  0A03               	xorlw	3	; case 2
  5131  0001CC  E0A3               	bz	l5682
  5132  0001CE  0A01               	xorlw	1	; case 3
  5133  0001D0  E0A9               	bz	l5684
  5134  0001D2  0A07               	xorlw	7	; case 4
  5135  0001D4  E0AF               	bz	l5686
  5136  0001D6  0A01               	xorlw	1	; case 5
  5137  0001D8  E0B5               	bz	l5688
  5138  0001DA  0A03               	xorlw	3	; case 6
  5139  0001DC  E0BB               	bz	l5690
  5140  0001DE  0A01               	xorlw	1	; case 7
  5141  0001E0  E0C1               	bz	l5692
  5142  0001E2  0A0F               	xorlw	15	; case 8
  5143  0001E4  E0C7               	bz	l5694
  5144  0001E6  0A01               	xorlw	1	; case 9
  5145  0001E8  E0CD               	bz	l5696
  5146  0001EA  0A03               	xorlw	3	; case 10
  5147  0001EC  E0D3               	bz	l5698
  5148  0001EE  0A01               	xorlw	1	; case 11
  5149  0001F0  E0D9               	bz	l5700
  5150  0001F2  0A07               	xorlw	7	; case 12
  5151  0001F4  E0DF               	bz	l5702
  5152  0001F6                     l5708:
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;DS1307.c: 226: if (dateTime.mday < 10) number1 = 0;
  5156  0001F6  0E0A               	movlw	10
  5157  0001F8  5D71               	subwf	(_dateTime+4)& (0+255),w,b
  5158  0001FA  E202               	bc	l5712
  5159                           
  5160                           ; BSR set to: 0
  5161  0001FC  6BC3               	clrf	DateStringLong@number1& (0+255),b
  5162  0001FE  D007               	goto	l5714
  5163  000200                     l5712:
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;DS1307.c: 227: else number1 = dateTime.mday / 10;
  5167  000200  0E0A               	movlw	10
  5168  000202  6E16               	movwf	___lbdiv@divisor,c
  5169  000204  5171               	movf	(_dateTime+4)& (0+255),w,b
  5170  000206  EC2D  F00D         	call	___lbdiv
  5171  00020A  0100               	movlb	0	; () banked
  5172  00020C  6FC3               	movwf	DateStringLong@number1& (0+255),b
  5173  00020E                     l5714:
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;DS1307.c: 229: number2 = dateTime.mday - (number1 * 10);
  5177  00020E  51C3               	movf	DateStringLong@number1& (0+255),w,b
  5178  000210  0DF6               	mullw	246
  5179  000212  50F3               	movf	prodl,w,c
  5180  000214  2571               	addwf	(_dateTime+4)& (0+255),w,b
  5181  000216  6FC0               	movwf	DateStringLong@number2& (0+255),b
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;DS1307.c: 231: if (number1 > 0) {
  5185  000218  51C3               	movf	DateStringLong@number1& (0+255),w,b
  5186  00021A  E008               	bz	l88
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;DS1307.c: 232: length = strlen(tstring);
  5190  00021C  6A17               	clrf	strlen@s+1,c
  5191  00021E  0EB0               	movlw	low DateStringLong@tstring
  5192  000220  6E16               	movwf	strlen@s,c
  5193  000222  EC47  F00C         	call	_strlen	;wreg free
  5194                           
  5195                           ;DS1307.c: 233: tstring[length] = number1 + 48;
  5196  000226  D84B               	call	PL12	;call to abstracted procedure
  5197  000228  51C3               	movf	DateStringLong@number1& (0+255),w,b
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;DS1307.c: 234: tstring[length + 1] = '\0';
  5201  00022A  D83E               	call	PL8	;call to abstracted procedure
  5202  00022C                     l88:
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;DS1307.c: 235: }
  5206                           ;DS1307.c: 237: length = strlen(tstring);
  5207  00022C  6A17               	clrf	strlen@s+1,c
  5208  00022E  0EB0               	movlw	low DateStringLong@tstring
  5209  000230  6E16               	movwf	strlen@s,c
  5210  000232  EC47  F00C         	call	_strlen	;wreg free
  5211                           
  5212                           ;DS1307.c: 238: tstring[length] = number2 + 48;
  5213  000236  D843               	call	PL12	;call to abstracted procedure
  5214  000238  51C0               	movf	DateStringLong@number2& (0+255),w,b
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;DS1307.c: 239: tstring[length + 1] = '\0';
  5218  00023A  D836               	call	PL8	;call to abstracted procedure
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;DS1307.c: 241: if (number1 == 1) {
  5222  00023C  05C3               	decf	DateStringLong@number1& (0+255),w,b
  5223  00023E  E108               	bnz	l5732
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;DS1307.c: 242: strcat(tstring, "TH ");
  5227  000240  0E3F               	movlw	high STR_20
  5228  000242  6E17               	movwf	strcat@from+1,c
  5229  000244  0EF3               	movlw	low STR_20
  5230  000246  6E16               	movwf	strcat@from,c
  5231  000248  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5232  00024A  ECDD  F00C         	call	_strcat
  5233                           
  5234                           ;DS1307.c: 243: } else {
  5235  00024E  D027               	goto	l5746
  5236  000250                     l5732:
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;DS1307.c: 244: if (number2 == 1) strcat(tstring, "ST ");
  5240  000250  05C0               	decf	DateStringLong@number2& (0+255),w,b
  5241  000252  E108               	bnz	l5736
  5242                           
  5243                           ; BSR set to: 0
  5244  000254  0E3F               	movlw	high STR_21
  5245  000256  6E17               	movwf	strcat@from+1,c
  5246  000258  0EF7               	movlw	low STR_21
  5247  00025A  6E16               	movwf	strcat@from,c
  5248  00025C  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5249  00025E  ECDD  F00C         	call	_strcat
  5250  000262  D01D               	goto	l5746
  5251  000264                     l5736:
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;DS1307.c: 245: else if (number2 == 2) strcat(tstring, "ND ");
  5255  000264  51C0               	movf	DateStringLong@number2& (0+255),w,b
  5256  000266  0A02               	xorlw	2
  5257  000268  E108               	bnz	l5740
  5258                           
  5259                           ; BSR set to: 0
  5260  00026A  0E3F               	movlw	high STR_22
  5261  00026C  6E17               	movwf	strcat@from+1,c
  5262  00026E  0EEB               	movlw	low STR_22
  5263  000270  6E16               	movwf	strcat@from,c
  5264  000272  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5265  000274  ECDD  F00C         	call	_strcat
  5266  000278  D012               	goto	l5746
  5267  00027A                     l5740:
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;DS1307.c: 246: else if (number2 == 3) strcat(tstring, "RD ");
  5271  00027A  51C0               	movf	DateStringLong@number2& (0+255),w,b
  5272  00027C  0A03               	xorlw	3
  5273  00027E  E108               	bnz	l5744
  5274                           
  5275                           ; BSR set to: 0
  5276  000280  0E3F               	movlw	high STR_23
  5277  000282  6E17               	movwf	strcat@from+1,c
  5278  000284  0EEF               	movlw	low STR_23
  5279  000286  6E16               	movwf	strcat@from,c
  5280  000288  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5281  00028A  ECDD  F00C         	call	_strcat
  5282  00028E  D007               	goto	l5746
  5283  000290                     l5744:
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;DS1307.c: 247: else strcat(tstring, "TH ");
  5287  000290  0E3F               	movlw	high STR_20
  5288  000292  6E17               	movwf	strcat@from+1,c
  5289  000294  0EF3               	movlw	low STR_20
  5290  000296  6E16               	movwf	strcat@from,c
  5291  000298  0EB0               	movlw	DateStringLong@tstring& (0+255)
  5292  00029A  ECDD  F00C         	call	_strcat
  5293  00029E                     l5746:
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;DS1307.c: 248: }
  5297                           ;DS1307.c: 249: ScrollText(tstring);
  5298  00029E  6A25               	clrf	ScrollText@gString+1,c
  5299  0002A0  0EB0               	movlw	low DateStringLong@tstring
  5300  0002A2  6E24               	movwf	ScrollText@gString,c
  5301  0002A4  EF69  F001         	goto	_ScrollText	;wreg free
  5302  0002A8                     __end_of_DateStringLong:
  5303                           	opt stack 0
  5304  0002A8                     PL8:
  5305                           	opt stack 20
  5306  0002A8  0F30               	addlw	48
  5307  0002AA  6EDF               	movwf	indf2,c
  5308  0002AC  C0C1  F033         	movff	DateStringLong@length,??_DateStringLong
  5309  0002B0  2A33               	incf	??_DateStringLong,f,c
  5310  0002B2  5033               	movf	??_DateStringLong,w,c
  5311  0002B4  0FB0               	addlw	low DateStringLong@tstring
  5312  0002B6  6ED9               	movwf	fsr2l,c
  5313  0002B8  6ADA               	clrf	fsr2h,c
  5314  0002BA  6ADF               	clrf	indf2,c
  5315  0002BC  0012               	return	
  5316  0002BE                     __end_ofPL8:
  5317                           	opt stack 0
  5318  0002BE                     PL12:
  5319                           	opt stack 20
  5320  0002BE  C016  F0C1         	movff	?_strlen,DateStringLong@length
  5321  0002C2  C017  F0C2         	movff	?_strlen+1,DateStringLong@length+1
  5322  0002C6  0100               	movlb	0	; () banked
  5323  0002C8  51C1               	movf	DateStringLong@length& (0+255),w,b
  5324  0002CA  0FB0               	addlw	low DateStringLong@tstring
  5325  0002CC  6ED9               	movwf	fsr2l,c
  5326  0002CE  6ADA               	clrf	fsr2h,c
  5327  0002D0  0012               	return	
  5328  0002D2                     __end_ofPL12:
  5329                           	opt stack 0
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           intcon	equ	0xFF2
  5337                           intcon2	equ	0xFF1
  5338                           postinc0	equ	0xFEE
  5339                           wreg	equ	0xFE8
  5340                           indf1	equ	0xFE7
  5341                           fsr1h	equ	0xFE2
  5342                           fsr1l	equ	0xFE1
  5343                           indf2	equ	0xFDF
  5344                           postinc2	equ	0xFDE
  5345                           postdec2	equ	0xFDD
  5346                           plusw2	equ	0xFDB
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function _strcat *****************
  5352 ;; Defined at:
  5353 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strcat.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  to              1    wreg     PTR unsigned char 
  5356 ;;		 -> tempString(4), DateStringLong@tstring(16), 
  5357 ;;  from            2   21[COMRAM] PTR const unsigned char 
  5358 ;;		 -> STR_27(2), STR_26(2), STR_25(2), STR_24(4), 
  5359 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_20(4), 
  5360 ;;		 -> STR_19(5), STR_18(5), STR_17(5), STR_16(6), 
  5361 ;;		 -> STR_15(5), STR_14(6), STR_13(6), STR_12(5), 
  5362 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  5363 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5364 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
  5365 ;; Auto vars:     Size  Location     Type
  5366 ;;  to              1   24[COMRAM] PTR unsigned char 
  5367 ;;		 -> tempString(4), DateStringLong@tstring(16), 
  5368 ;;  cp              1   23[COMRAM] PTR unsigned char 
  5369 ;;		 -> tempString(4), DateStringLong@tstring(16), 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  1    wreg      PTR unsigned char 
  5372 ;; Registers used:
  5373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5374 ;; Tracked objects:
  5375 ;;		On entry : F/0
  5376 ;;		On exit  : F/0
  5377 ;;		Unchanged: F/0
  5378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5379 ;;      Params:         2       0       0       0
  5380 ;;      Locals:         2       0       0       0
  5381 ;;      Temps:          0       0       0       0
  5382 ;;      Totals:         4       0       0       0
  5383 ;;Total ram usage:        4 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    7
  5386 ;; This function calls:
  5387 ;;		Nothing
  5388 ;; This function is called by:
  5389 ;;		_DateStringLong
  5390 ;;		_TemperatureDisplay
  5391 ;;		_ScrollTime
  5392 ;; This function uses a non-reentrant model
  5393 ;;
  5394                           
  5395                           	psect	text23
  5396  0019BA                     __ptext23:
  5397                           	opt stack 0
  5398  0019BA                     _strcat:
  5399                           	opt stack 22
  5400                           
  5401                           ;incstack = 0
  5402                           ;strcat@to stored from wreg
  5403  0019BA  6E19               	movwf	strcat@to,c
  5404                           
  5405                           ; BSR set to: 0
  5406  0019BC  C019  F018         	movff	strcat@to,strcat@cp
  5407  0019C0  D001               	goto	l5342
  5408  0019C2                     l5340:
  5409                           
  5410                           ; BSR set to: 0
  5411  0019C2  2A18               	incf	strcat@cp,f,c
  5412  0019C4                     l5342:
  5413                           
  5414                           ; BSR set to: 0
  5415  0019C4  5018               	movf	strcat@cp,w,c
  5416  0019C6  6ED9               	movwf	fsr2l,c
  5417  0019C8  6ADA               	clrf	fsr2h,c
  5418  0019CA  50DF               	movf	indf2,w,c
  5419  0019CC  E004               	bz	l5346
  5420  0019CE  D7F9               	goto	l5340
  5421  0019D0                     l5344:
  5422                           
  5423                           ; BSR set to: 0
  5424  0019D0  2A18               	incf	strcat@cp,f,c
  5425  0019D2  4A16               	infsnz	strcat@from,f,c
  5426  0019D4  2A17               	incf	strcat@from+1,f,c
  5427  0019D6                     l5346:
  5428                           
  5429                           ; BSR set to: 0
  5430  0019D6  C016  FFF6         	movff	strcat@from,tblptrl
  5431  0019DA  C017  FFF7         	movff	strcat@from+1,tblptrh
  5432  0019DE                     	if	0	;tblptru may be non-zero
  5433  0019DE                     	endif
  5434  0019DE                     	if	0	;tblptru may be non-zero
  5435  0019DE                     	endif
  5436  0019DE  5018               	movf	strcat@cp,w,c
  5437  0019E0  6ED9               	movwf	fsr2l,c
  5438  0019E2  6ADA               	clrf	fsr2h,c
  5439  0019E4  0008               	tblrd		*
  5440  0019E6  CFF5 FFDF          	movff	tablat,indf2
  5441  0019EA  50DF               	movf	indf2,w,c
  5442  0019EC  B4D8               	btfsc	status,2,c
  5443  0019EE  0012               	return	
  5444  0019F0  D7EF               	goto	l5344
  5445  0019F2                     __end_of_strcat:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           intcon	equ	0xFF2
  5454                           intcon2	equ	0xFF1
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           indf1	equ	0xFE7
  5458                           fsr1h	equ	0xFE2
  5459                           fsr1l	equ	0xFE1
  5460                           indf2	equ	0xFDF
  5461                           postinc2	equ	0xFDE
  5462                           postdec2	equ	0xFDD
  5463                           plusw2	equ	0xFDB
  5464                           fsr2h	equ	0xFDA
  5465                           fsr2l	equ	0xFD9
  5466                           status	equ	0xFD8
  5467                           
  5468 ;; *************** function _Read_Eep *****************
  5469 ;; Defined at:
  5470 ;;		line 345 in file "main.c"
  5471 ;; Parameters:    Size  Location     Type
  5472 ;;  badd            2   21[COMRAM] unsigned int 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;		None
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      unsigned char 
  5477 ;; Registers used:
  5478 ;;		wreg, status,2
  5479 ;; Tracked objects:
  5480 ;;		On entry : F/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5484 ;;      Params:         2       0       0       0
  5485 ;;      Locals:         0       0       0       0
  5486 ;;      Temps:          0       0       0       0
  5487 ;;      Totals:         2       0       0       0
  5488 ;;Total ram usage:        2 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    7
  5491 ;; This function calls:
  5492 ;;		Nothing
  5493 ;; This function is called by:
  5494 ;;		_main
  5495 ;; This function uses a non-reentrant model
  5496 ;;
  5497                           
  5498                           	psect	text24
  5499  001D14                     __ptext24:
  5500                           	opt stack 0
  5501  001D14                     _Read_Eep:
  5502                           	opt stack 23
  5503                           
  5504                           ; BSR set to: 0
  5505                           ;main.c: 346: EEADR = (badd & 0x0ff);
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;incstack = 0
  5509  001D14  C016  FFA9         	movff	Read_Eep@badd,4009	;volatile
  5510                           
  5511                           ;main.c: 347: EECON1bits.CFGS = 0;
  5512  001D18  9CA6               	bcf	4006,6,c	;volatile
  5513                           
  5514                           ;main.c: 348: EECON1bits.EEPGD = 0;
  5515  001D1A  9EA6               	bcf	4006,7,c	;volatile
  5516                           
  5517                           ;main.c: 349: EECON1bits.RD = 1;
  5518  001D1C  80A6               	bsf	4006,0,c	;volatile
  5519                           
  5520                           ;main.c: 350: __nop();
  5521  001D1E  F000               	nop	
  5522                           
  5523                           ;main.c: 351: __nop();
  5524  001D20  F000               	nop	
  5525                           
  5526                           ;main.c: 352: return ( EEDATA);
  5527  001D22  50A8               	movf	4008,w,c	;volatile
  5528  001D24  0012               	return	
  5529  001D26                     __end_of_Read_Eep:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           intcon	equ	0xFF2
  5538                           intcon2	equ	0xFF1
  5539                           postinc0	equ	0xFEE
  5540                           wreg	equ	0xFE8
  5541                           indf1	equ	0xFE7
  5542                           fsr1h	equ	0xFE2
  5543                           fsr1l	equ	0xFE1
  5544                           indf2	equ	0xFDF
  5545                           postinc2	equ	0xFDE
  5546                           postdec2	equ	0xFDD
  5547                           plusw2	equ	0xFDB
  5548                           fsr2h	equ	0xFDA
  5549                           fsr2l	equ	0xFD9
  5550                           status	equ	0xFD8
  5551                           
  5552 ;; *************** function _InitTimersAndInterrupts *****************
  5553 ;; Defined at:
  5554 ;;		line 72 in file "system.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;		None
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;		None
  5559 ;; Return value:  Size  Location     Type
  5560 ;;		None               void
  5561 ;; Registers used:
  5562 ;;		wreg, status,2
  5563 ;; Tracked objects:
  5564 ;;		On entry : F/0
  5565 ;;		On exit  : F/0
  5566 ;;		Unchanged: F/0
  5567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5568 ;;      Params:         0       0       0       0
  5569 ;;      Locals:         0       0       0       0
  5570 ;;      Temps:          0       0       0       0
  5571 ;;      Totals:         0       0       0       0
  5572 ;;Total ram usage:        0 bytes
  5573 ;; Hardware stack levels used:    1
  5574 ;; Hardware stack levels required when called:    7
  5575 ;; This function calls:
  5576 ;;		Nothing
  5577 ;; This function is called by:
  5578 ;;		_main
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text25
  5583  001948                     __ptext25:
  5584                           	opt stack 0
  5585  001948                     _InitTimersAndInterrupts:
  5586                           	opt stack 23
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;system.c: 74: (INTCONbits.GIE = 0);
  5590                           
  5591                           ;incstack = 0
  5592  001948  9EF2               	bcf	intcon,7,c	;volatile
  5593                           
  5594                           ;system.c: 103: TMR0L = 0;
  5595  00194A  6AD6               	clrf	4054,c	;volatile
  5596                           
  5597                           ;system.c: 104: INTCONbits.TMR0IF = 0;
  5598  00194C  94F2               	bcf	intcon,2,c	;volatile
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;system.c: 105: T0CON = 0b11000011;
  5602  00194E  0EC3               	movlw	195
  5603  001950  6ED5               	movwf	4053,c	;volatile
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;system.c: 106: INTCON2bits.TMR0IP = 1;
  5607  001952  84F1               	bsf	intcon2,2,c	;volatile
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;system.c: 107: INTCONbits.TMR0IE = 1;
  5611  001954  8AF2               	bsf	intcon,5,c	;volatile
  5612                           
  5613                           ;system.c: 115: ((void)(TMR3H=((53536)>>8),TMR3L=((53536)&0xFF)));
  5614  001956  0ED1               	movlw	209
  5615  001958  6EB3               	movwf	4019,c	;volatile
  5616  00195A  0E20               	movlw	32
  5617  00195C  6EB2               	movwf	4018,c	;volatile
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;system.c: 116: PIR2bits.TMR3IF = 0x00;
  5621  00195E  92A1               	bcf	4001,1,c	;volatile
  5622                           
  5623                           ;system.c: 117: T3CON = 0b10000001;
  5624  001960  0E81               	movlw	129
  5625  001962  6EB1               	movwf	4017,c	;volatile
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;system.c: 118: IPR2bits.TMR3IP = 0;
  5629  001964  92A2               	bcf	4002,1,c	;volatile
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;system.c: 119: PIE2bits.TMR3IE = 0x01;
  5633  001966  82A0               	bsf	4000,1,c	;volatile
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;system.c: 123: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  5637  001968  6ACF               	clrf	4047,c	;volatile
  5638                           
  5639                           ; BSR set to: 0
  5640  00196A  6ACE               	clrf	4046,c	;volatile
  5641                           
  5642                           ;system.c: 124: T1CON = 0b10110001;
  5643  00196C  0EB1               	movlw	177
  5644  00196E  6ECD               	movwf	4045,c	;volatile
  5645                           
  5646                           ;system.c: 132: ADCON0 = 0b00100001;
  5647  001970  0E21               	movlw	33
  5648  001972  6EC2               	movwf	4034,c	;volatile
  5649                           
  5650                           ; BSR set to: 0
  5651                           ;system.c: 135: ADCON1 = 0b00000000;
  5652  001974  6AC1               	clrf	4033,c	;volatile
  5653                           
  5654                           ;system.c: 138: ADCON2 = 0b10010110;
  5655  001976  0E96               	movlw	150
  5656  001978  6EC0               	movwf	4032,c	;volatile
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;system.c: 146: RCONbits.IPEN = 1;
  5660  00197A  8ED0               	bsf	4048,7,c	;volatile
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;system.c: 148: INTCONbits.GIEL = 1;
  5664  00197C  8CF2               	bsf	intcon,6,c	;volatile
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;system.c: 150: (INTCONbits.GIE = 1);
  5668  00197E  8EF2               	bsf	intcon,7,c	;volatile
  5669                           
  5670                           ; BSR set to: 0
  5671  001980  0C96               	retlw	150
  5672  001982                     __end_of_InitTimersAndInterrupts:
  5673                           	opt stack 0
  5674                           tblptru	equ	0xFF8
  5675                           tblptrh	equ	0xFF7
  5676                           tblptrl	equ	0xFF6
  5677                           tablat	equ	0xFF5
  5678                           prodh	equ	0xFF4
  5679                           prodl	equ	0xFF3
  5680                           intcon	equ	0xFF2
  5681                           intcon2	equ	0xFF1
  5682                           postinc0	equ	0xFEE
  5683                           wreg	equ	0xFE8
  5684                           indf1	equ	0xFE7
  5685                           fsr1h	equ	0xFE2
  5686                           fsr1l	equ	0xFE1
  5687                           indf2	equ	0xFDF
  5688                           postinc2	equ	0xFDE
  5689                           postdec2	equ	0xFDD
  5690                           plusw2	equ	0xFDB
  5691                           fsr2h	equ	0xFDA
  5692                           fsr2l	equ	0xFD9
  5693                           status	equ	0xFD8
  5694                           
  5695 ;; *************** function _InitPeripherals *****************
  5696 ;; Defined at:
  5697 ;;		line 42 in file "system.c"
  5698 ;; Parameters:    Size  Location     Type
  5699 ;;		None
  5700 ;; Auto vars:     Size  Location     Type
  5701 ;;		None
  5702 ;; Return value:  Size  Location     Type
  5703 ;;		None               void
  5704 ;; Registers used:
  5705 ;;		None
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5711 ;;      Params:         0       0       0       0
  5712 ;;      Locals:         0       0       0       0
  5713 ;;      Temps:          0       0       0       0
  5714 ;;      Totals:         0       0       0       0
  5715 ;;Total ram usage:        0 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    7
  5718 ;; This function calls:
  5719 ;;		Nothing
  5720 ;; This function is called by:
  5721 ;;		_main
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text26
  5726  001A26                     __ptext26:
  5727                           	opt stack 0
  5728  001A26                     _InitPeripherals:
  5729                           	opt stack 23
  5730                           
  5731                           ;system.c: 45: (INTCONbits.GIE = 0);
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;incstack = 0
  5735  001A26  9EF2               	bcf	intcon,7,c	;volatile
  5736                           
  5737                           ;system.c: 49: LATA = 0x00;LATB = 0x00;LATC = 0x00;TRISA = 0xFF; TRISB = 0xFF;TRISC = 0x
      +                          FF;
  5738  001A28  6A89               	clrf	3977,c	;volatile
  5739  001A2A  6A8A               	clrf	3978,c	;volatile
  5740  001A2C  6A8B               	clrf	3979,c	;volatile
  5741  001A2E  6892               	setf	3986,c	;volatile
  5742  001A30  6893               	setf	3987,c	;volatile
  5743  001A32  6894               	setf	3988,c	;volatile
  5744                           
  5745                           ;system.c: 50: ANSEL = 0x00;ANSELH = 0x00;
  5746  001A34  6A7E               	clrf	3966,c	;volatile
  5747  001A36  6A7F               	clrf	3967,c	;volatile
  5748                           
  5749                           ;system.c: 51: ADON = 0;C1ON = 0;C2ON = 0;SSPEN = 0x00;USBEN = 0x00;UCFG = 0x00; CCP1CON
      +                           = 0x00;SPEN = 0x00;SRLEN = 0x00;FVR1EN = 0x00;D1EN = 0x00;
  5750  001A38  90C2               	bcf	4034,0,c	;volatile
  5751  001A3A  9E6D               	bcf	3949,7,c	;volatile
  5752  001A3C  9E6B               	bcf	3947,7,c	;volatile
  5753  001A3E  9AC6               	bcf	4038,5,c	;volatile
  5754  001A40  9664               	bcf	3940,3,c	;volatile
  5755  001A42  6A61               	clrf	3937,c	;volatile
  5756  001A44  6ABD               	clrf	4029,c	;volatile
  5757  001A46  9EAB               	bcf	4011,7,c	;volatile
  5758  001A48  9E68               	bcf	3944,7,c	;volatile
  5759  001A4A  9EBA               	bcf	4026,7,c	;volatile
  5760  001A4C  9EBB               	bcf	4027,7,c	;volatile
  5761                           
  5762                           ;system.c: 54: TRISC2 = 0xFF;
  5763  001A4E  8494               	bsf	3988,2,c	;volatile
  5764                           
  5765                           ;system.c: 55: TRISC0 = 0xFF;
  5766  001A50  8094               	bsf	3988,0,c	;volatile
  5767                           
  5768                           ;system.c: 56: TRISC1 = 0xFF;
  5769  001A52  8294               	bsf	3988,1,c	;volatile
  5770                           
  5771                           ;system.c: 59: ANS8 = 0xFF;
  5772  001A54  807F               	bsf	3967,0,c	;volatile
  5773                           
  5774                           ;system.c: 60: TRISC6 = 0xFF;
  5775  001A56  8C94               	bsf	3988,6,c	;volatile
  5776  001A58  0012               	return	
  5777  001A5A                     __end_of_InitPeripherals:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           intcon	equ	0xFF2
  5786                           intcon2	equ	0xFF1
  5787                           postinc0	equ	0xFEE
  5788                           wreg	equ	0xFE8
  5789                           indf1	equ	0xFE7
  5790                           fsr1h	equ	0xFE2
  5791                           fsr1l	equ	0xFE1
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           plusw2	equ	0xFDB
  5796                           fsr2h	equ	0xFDA
  5797                           fsr2l	equ	0xFD9
  5798                           status	equ	0xFD8
  5799                           
  5800 ;; *************** function _InitHardwareVars *****************
  5801 ;; Defined at:
  5802 ;;		line 153 in file "system.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;		None
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;		None
  5807 ;; Return value:  Size  Location     Type
  5808 ;;		None               void
  5809 ;; Registers used:
  5810 ;;		wreg, status,2, status,0
  5811 ;; Tracked objects:
  5812 ;;		On entry : 0/0
  5813 ;;		On exit  : F/0
  5814 ;;		Unchanged: 0/0
  5815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5816 ;;      Params:         0       0       0       0
  5817 ;;      Locals:         0       0       0       0
  5818 ;;      Temps:          0       0       0       0
  5819 ;;      Totals:         0       0       0       0
  5820 ;;Total ram usage:        0 bytes
  5821 ;; Hardware stack levels used:    1
  5822 ;; Hardware stack levels required when called:    7
  5823 ;; This function calls:
  5824 ;;		Nothing
  5825 ;; This function is called by:
  5826 ;;		_main
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830                           	psect	text27
  5831  001676                     __ptext27:
  5832                           	opt stack 0
  5833  001676                     _InitHardwareVars:
  5834                           	opt stack 23
  5835                           
  5836                           ;system.c: 156: button_0.down = 0;
  5837                           
  5838                           ;incstack = 0
  5839  001676  0100               	movlb	0	; () banked
  5840  001678  91A0               	bcf	_button_0& (0+255),0,b	;volatile
  5841                           
  5842                           ;system.c: 157: button_0.latched = 0;
  5843  00167A  93A0               	bcf	_button_0& (0+255),1,b	;volatile
  5844                           
  5845                           ;system.c: 158: button_0.pressed = 0;
  5846  00167C  95A0               	bcf	_button_0& (0+255),2,b	;volatile
  5847                           
  5848                           ; BSR set to: 0
  5849                           ;system.c: 159: button_0.port = &PORTC;
  5850  00167E  0E0F               	movlw	15	;volatile
  5851  001680  6FA2               	movwf	(_button_0+2)& (0+255),b	;volatile
  5852  001682  0E82               	movlw	130	;volatile
  5853  001684  6FA1               	movwf	(_button_0+1)& (0+255),b	;volatile
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;system.c: 160: button_0.pin = 2;
  5857  001686  0E02               	movlw	2
  5858  001688  6FA3               	movwf	(_button_0+3)& (0+255),b	;volatile
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;system.c: 161: button_0.debounce = 0;
  5862  00168A  6BA4               	clrf	(_button_0+4)& (0+255),b	;volatile
  5863  00168C  6BA5               	clrf	(_button_0+5)& (0+255),b	;volatile
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;system.c: 163: button_1.down = 0;
  5867  00168E  9042               	bcf	_button_1,0,c	;volatile
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;system.c: 164: button_1.latched = 0;
  5871  001690  9242               	bcf	_button_1,1,c	;volatile
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;system.c: 165: button_1.pressed = 0;
  5875  001692  9442               	bcf	_button_1,2,c	;volatile
  5876                           
  5877                           ; BSR set to: 0
  5878                           ;system.c: 166: button_1.port = &PORTC;
  5879  001694  0E0F               	movlw	15	;volatile
  5880  001696  6E44               	movwf	_button_1+2,c	;volatile
  5881  001698  0E82               	movlw	130	;volatile
  5882  00169A  6E43               	movwf	_button_1+1,c	;volatile
  5883                           
  5884                           ;system.c: 167: button_1.pin = 1;
  5885  00169C  0E01               	movlw	1
  5886  00169E  6E45               	movwf	_button_1+3,c	;volatile
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;system.c: 168: button_1.debounce = 0;
  5890  0016A0  6A46               	clrf	_button_1+4,c	;volatile
  5891  0016A2  6A47               	clrf	_button_1+5,c	;volatile
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;system.c: 170: button_2.down = 0;
  5895  0016A4  91A6               	bcf	_button_2& (0+255),0,b	;volatile
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;system.c: 171: button_2.latched = 0;
  5899  0016A6  93A6               	bcf	_button_2& (0+255),1,b	;volatile
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;system.c: 172: button_2.pressed = 0;
  5903  0016A8  95A6               	bcf	_button_2& (0+255),2,b	;volatile
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;system.c: 173: button_2.port = &PORTC;
  5907  0016AA  0E0F               	movlw	15	;volatile
  5908  0016AC  6FA8               	movwf	(_button_2+2)& (0+255),b	;volatile
  5909  0016AE  0E82               	movlw	130	;volatile
  5910  0016B0  6FA7               	movwf	(_button_2+1)& (0+255),b	;volatile
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;system.c: 174: button_2.pin = 0;
  5914  0016B2  6BA9               	clrf	(_button_2+3)& (0+255),b	;volatile
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;system.c: 175: button_2.debounce = 0;
  5918  0016B4  6BAA               	clrf	(_button_2+4)& (0+255),b	;volatile
  5919  0016B6  6BAB               	clrf	(_button_2+5)& (0+255),b	;volatile
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;system.c: 177: buttons[0] = &button_0;
  5923  0016B8  0EA0               	movlw	low _button_0	;volatile
  5924  0016BA  6F60               	movwf	_buttons& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;system.c: 178: buttons[1] = &button_1;
  5928  0016BC  0E42               	movlw	low _button_1	;volatile
  5929  0016BE  6F61               	movwf	(_buttons+1)& (0+255),b
  5930                           
  5931                           ; BSR set to: 0
  5932                           ;system.c: 179: buttons[2] = &button_2;
  5933  0016C0  0EA6               	movlw	low _button_2	;volatile
  5934  0016C2  6F62               	movwf	(_buttons+2)& (0+255),b
  5935                           
  5936                           ; BSR set to: 0
  5937  0016C4  0012               	return	
  5938  0016C6                     __end_of_InitHardwareVars:
  5939                           	opt stack 0
  5940                           tblptru	equ	0xFF8
  5941                           tblptrh	equ	0xFF7
  5942                           tblptrl	equ	0xFF6
  5943                           tablat	equ	0xFF5
  5944                           prodh	equ	0xFF4
  5945                           prodl	equ	0xFF3
  5946                           intcon	equ	0xFF2
  5947                           intcon2	equ	0xFF1
  5948                           postinc0	equ	0xFEE
  5949                           wreg	equ	0xFE8
  5950                           indf1	equ	0xFE7
  5951                           fsr1h	equ	0xFE2
  5952                           fsr1l	equ	0xFE1
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           plusw2	equ	0xFDB
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function _HandleButtons *****************
  5962 ;; Defined at:
  5963 ;;		line 120 in file "main.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;		None
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;		None
  5968 ;; Return value:  Size  Location     Type
  5969 ;;		None               void
  5970 ;; Registers used:
  5971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5977 ;;      Params:         0       0       0       0
  5978 ;;      Locals:         0       0       0       0
  5979 ;;      Temps:          0       4       0       0
  5980 ;;      Totals:         0       4       0       0
  5981 ;;Total ram usage:        4 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:   12
  5984 ;; This function calls:
  5985 ;;		_ClearButtons
  5986 ;;		_InputTime
  5987 ;;		_RTCSetTime
  5988 ;; This function is called by:
  5989 ;;		_main
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	text28
  5994  00084E                     __ptext28:
  5995                           	opt stack 0
  5996  00084E                     _HandleButtons:
  5997                           	opt stack 18
  5998                           
  5999                           ;main.c: 121: static uint16_t holdTimer = 0;
  6000                           ;main.c: 123: switch (currentState) {
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;incstack = 0
  6004  00084E  D05F               	goto	l6210
  6005  000850                     l474:
  6006                           
  6007                           ;main.c: 125: if (button_0.pressed) {
  6008  000850  0100               	movlb	0	; () banked
  6009  000852  A5A0               	btfss	_button_0& (0+255),2,b	;volatile
  6010  000854  D006               	goto	l6136
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;main.c: 126: ClearButtons();
  6014  000856  ECBC  F00D         	call	_ClearButtons	;wreg free
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;main.c: 127: date_flag ^= 0x01;
  6018  00085A  0100               	movlb	(_date_flag/(0+8)) shr (0+8)
  6019  00085C  7248               	btg	_date_flag/(0+8),_date_flag& (0+7),c	;volatile
  6020                           
  6021                           ;main.c: 128: firstLoop = 0x01;
  6022  00085E  0E01               	movlw	1
  6023  000860  6E41               	movwf	_firstLoop,c
  6024  000862                     l6136:
  6025                           
  6026                           ;main.c: 129: }
  6027                           ;main.c: 130: if (button_1.latched == 1 && holdTimer < tmrCount) {
  6028  000862  A242               	btfss	_button_1,1,c	;volatile
  6029  000864  D016               	goto	l476
  6030  000866  0100               	movlb	0	; () banked
  6031  000868  5163               	movf	HandleButtons@holdTimer& (0+255),w,b
  6032  00086A  6FB9               	movwf	??_HandleButtons& (0+255),b
  6033  00086C  5164               	movf	(HandleButtons@holdTimer+1)& (0+255),w,b
  6034  00086E  6FBA               	movwf	(??_HandleButtons+1)& (0+255),b
  6035  000870  6BBB               	clrf	(??_HandleButtons+2)& (0+255),b
  6036  000872  6BBC               	clrf	(??_HandleButtons+3)& (0+255),b
  6037  000874  5038               	movf	_tmrCount,w,c	;volatile
  6038  000876  5DB9               	subwf	??_HandleButtons& (0+255),w,b
  6039  000878  5039               	movf	_tmrCount+1,w,c	;volatile
  6040  00087A  59BA               	subwfb	(??_HandleButtons+1)& (0+255),w,b
  6041  00087C  503A               	movf	_tmrCount+2,w,c	;volatile
  6042  00087E  59BB               	subwfb	(??_HandleButtons+2)& (0+255),w,b
  6043  000880  503B               	movf	_tmrCount+3,w,c	;volatile
  6044  000882  59BC               	subwfb	(??_HandleButtons+3)& (0+255),w,b
  6045  000884  E206               	bc	l476
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;main.c: 131: InputTime();
  6049  000886  EC08  F002         	call	_InputTime	;wreg free
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;main.c: 132: RTCSetTime();
  6053  00088A  EC9E  F008         	call	_RTCSetTime	;wreg free
  6054                           
  6055                           ;main.c: 133: ClearButtons();
  6056  00088E  EFBC  F00D         	goto	_ClearButtons	;wreg free
  6057  000892                     l476:
  6058  000892  B242               	btfsc	_button_1,1,c	;volatile
  6059  000894  D007               	goto	l6152
  6060                           
  6061                           ;main.c: 136: holdTimer = tmrCount + 1000L;
  6062  000896  0EE8               	movlw	232
  6063  000898  2438               	addwf	_tmrCount,w,c	;volatile
  6064  00089A  0100               	movlb	0	; () banked
  6065  00089C  6F63               	movwf	HandleButtons@holdTimer& (0+255),b
  6066  00089E  0E03               	movlw	3
  6067  0008A0  2039               	addwfc	_tmrCount+1,w,c	;volatile
  6068  0008A2  6F64               	movwf	(HandleButtons@holdTimer+1)& (0+255),b
  6069  0008A4                     l6152:
  6070                           
  6071                           ;main.c: 137: }
  6072                           ;main.c: 138: if (button_1.pressed) {
  6073  0008A4  A442               	btfss	_button_1,2,c	;volatile
  6074  0008A6  D003               	goto	l6160
  6075                           
  6076                           ;main.c: 139: ClearButtons();
  6077  0008A8  ECBC  F00D         	call	_ClearButtons	;wreg free
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;main.c: 140: currentState++;
  6081                           
  6082                           ; BSR set to: 0
  6083                           ;main.c: 141: firstLoop = 0x01;
  6084  0008AC  D83E               	call	PL18	;call to abstracted procedure
  6085  0008AE                     l6160:
  6086                           
  6087                           ;main.c: 142: }
  6088                           ;main.c: 143: if (button_2.pressed) {
  6089  0008AE  0100               	movlb	0	; () banked
  6090  0008B0  A5A6               	btfss	_button_2& (0+255),2,b	;volatile
  6091  0008B2  0012               	return	
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;main.c: 144: ClearButtons();
  6095  0008B4  ECBC  F00D         	call	_ClearButtons	;wreg free
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;main.c: 145: colon_flag ^= 0x01;
  6099  0008B8  0100               	movlb	(_colon_flag/(0+8)) shr (0+8)
  6100  0008BA  7048               	btg	_colon_flag/(0+8),_colon_flag& (0+7),c
  6101  0008BC                     l6166:
  6102                           
  6103                           ;main.c: 146: firstLoop = 0x01;
  6104  0008BC  0E01               	movlw	1
  6105  0008BE  6E41               	movwf	_firstLoop,c
  6106  0008C0  0C01               	retlw	1
  6107  0008C2                     l484:
  6108                           
  6109                           ;main.c: 155: if (button_1.pressed) {
  6110  0008C2  A442               	btfss	_button_1,2,c	;volatile
  6111  0008C4  D003               	goto	l6174
  6112                           
  6113                           ;main.c: 156: ClearButtons();
  6114  0008C6  ECBC  F00D         	call	_ClearButtons	;wreg free
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;main.c: 157: currentState++;
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;main.c: 158: firstLoop = 0x01;
  6121  0008CA  D82F               	call	PL18	;call to abstracted procedure
  6122  0008CC                     l6174:
  6123                           
  6124                           ;main.c: 159: }
  6125                           ;main.c: 161: if (button_2.pressed) {
  6126  0008CC  0100               	movlb	0	; () banked
  6127  0008CE  A5A6               	btfss	_button_2& (0+255),2,b	;volatile
  6128  0008D0  0012               	return	
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;main.c: 162: ClearButtons();
  6132  0008D2  ECBC  F00D         	call	_ClearButtons	;wreg free
  6133  0008D6  D7F2               	goto	l6166
  6134  0008D8                     l487:
  6135                           
  6136                           ;main.c: 168: if (button_1.pressed) {
  6137  0008D8  A442               	btfss	_button_1,2,c	;volatile
  6138  0008DA  0012               	return	
  6139                           
  6140                           ;main.c: 169: ClearButtons();
  6141  0008DC  ECBC  F00D         	call	_ClearButtons	;wreg free
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;main.c: 170: currentState++;
  6145  0008E0  2A49               	incf	_currentState,f,c	;volatile
  6146  0008E2  D7EC               	goto	l6166
  6147  0008E4                     l489:
  6148                           
  6149                           ;main.c: 176: if (button_1.pressed) {
  6150  0008E4  A442               	btfss	_button_1,2,c	;volatile
  6151  0008E6  D003               	goto	l6192
  6152                           
  6153                           ;main.c: 177: ClearButtons();
  6154  0008E8  ECBC  F00D         	call	_ClearButtons	;wreg free
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;main.c: 178: currentState++;
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;main.c: 179: firstLoop = 0x01;
  6161  0008EC  D81E               	call	PL18	;call to abstracted procedure
  6162  0008EE                     l6192:
  6163                           
  6164                           ;main.c: 180: }
  6165                           ;main.c: 182: if (button_0.pressed) {
  6166  0008EE  0100               	movlb	0	; () banked
  6167  0008F0  A5A0               	btfss	_button_0& (0+255),2,b	;volatile
  6168  0008F2  D005               	goto	l6200
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;main.c: 183: ClearButtons();
  6172  0008F4  ECBC  F00D         	call	_ClearButtons	;wreg free
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;main.c: 184: temp_flag = 0x01;
  6176  0008F8  8448               	bsf	_temp_flag/(0+8),_temp_flag& (0+7),c	;volatile
  6177                           
  6178                           ;main.c: 185: firstLoop = 0x01;
  6179  0008FA  0E01               	movlw	1
  6180  0008FC  6E41               	movwf	_firstLoop,c
  6181  0008FE                     l6200:
  6182                           
  6183                           ;main.c: 186: }
  6184                           ;main.c: 188: if (button_2.pressed) {
  6185  0008FE  0100               	movlb	0	; () banked
  6186  000900  A5A6               	btfss	_button_2& (0+255),2,b	;volatile
  6187  000902  0012               	return	
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;main.c: 189: ClearButtons();
  6191  000904  ECBC  F00D         	call	_ClearButtons	;wreg free
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;main.c: 190: temp_flag = 0x00;
  6195  000908  0100               	movlb	(_temp_flag/(0+8)) shr (0+8)
  6196  00090A  9448               	bcf	_temp_flag/(0+8),_temp_flag& (0+7),c	;volatile
  6197  00090C  D7D7               	goto	l6166
  6198  00090E                     l6210:
  6199  00090E  5049               	movf	_currentState,w,c	;volatile
  6200                           
  6201                           ; Switch size 1, requested type "space"
  6202                           ; Number of cases is 6, Range of values is 1 to 6
  6203                           ; switch strategies available:
  6204                           ; Name         Instructions Cycles
  6205                           ; simple_byte           19    10 (average)
  6206                           ;	Chosen strategy is simple_byte
  6207  000910  0A01               	xorlw	1	; case 1
  6208  000912  E09E               	bz	l474
  6209  000914  0A03               	xorlw	3	; case 2
  6210  000916  B4D8               	btfsc	status,2,c
  6211  000918  0012               	return	
  6212  00091A  0A01               	xorlw	1	; case 3
  6213  00091C  E0D2               	bz	l484
  6214  00091E  0A07               	xorlw	7	; case 4
  6215  000920  E0DB               	bz	l487
  6216  000922  0A01               	xorlw	1	; case 5
  6217  000924  E0DF               	bz	l489
  6218  000926  0A03               	xorlw	3	; case 6
  6219  000928  0012               	return	
  6220  00092A                     __end_of_HandleButtons:
  6221                           	opt stack 0
  6222  00092A                     PL18:
  6223                           	opt stack 18
  6224  00092A  2A49               	incf	_currentState,f,c	;volatile
  6225  00092C  0E01               	movlw	1
  6226  00092E  6E41               	movwf	_firstLoop,c
  6227  000930  0C01               	retlw	1
  6228  000932                     __end_ofPL18:
  6229                           	opt stack 0
  6230                           tblptru	equ	0xFF8
  6231                           tblptrh	equ	0xFF7
  6232                           tblptrl	equ	0xFF6
  6233                           tablat	equ	0xFF5
  6234                           prodh	equ	0xFF4
  6235                           prodl	equ	0xFF3
  6236                           intcon	equ	0xFF2
  6237                           intcon2	equ	0xFF1
  6238                           postinc0	equ	0xFEE
  6239                           wreg	equ	0xFE8
  6240                           indf1	equ	0xFE7
  6241                           fsr1h	equ	0xFE2
  6242                           fsr1l	equ	0xFE1
  6243                           indf2	equ	0xFDF
  6244                           postinc2	equ	0xFDE
  6245                           postdec2	equ	0xFDD
  6246                           plusw2	equ	0xFDB
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _RTCSetTime *****************
  6252 ;; Defined at:
  6253 ;;		line 105 in file "DS1307.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  i2cBuffer       1   27[COMRAM] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;		None               void
  6260 ;; Registers used:
  6261 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6262 ;; Tracked objects:
  6263 ;;		On entry : F/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6267 ;;      Params:         0       0       0       0
  6268 ;;      Locals:         1       0       0       0
  6269 ;;      Temps:          0       0       0       0
  6270 ;;      Totals:         1       0       0       0
  6271 ;;Total ram usage:        1 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:   11
  6274 ;; This function calls:
  6275 ;;		_StartI2C
  6276 ;;		_StopI2C
  6277 ;;		_TransmitI2C
  6278 ;;		_dec_to_bcd
  6279 ;; This function is called by:
  6280 ;;		_HandleButtons
  6281 ;; This function uses a non-reentrant model
  6282 ;;
  6283                           
  6284                           	psect	text29
  6285  00113C                     __ptext29:
  6286                           	opt stack 0
  6287  00113C                     _RTCSetTime:
  6288                           	opt stack 18
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;DS1307.c: 106: uint8_t i2cBuffer;
  6292                           ;DS1307.c: 108: StartI2C();
  6293                           
  6294                           ;incstack = 0
  6295  00113C  EC80  F00E         	call	_StartI2C	;wreg free
  6296                           
  6297                           ;DS1307.c: 109: TransmitI2C(0xD0);
  6298  001140  0ED0               	movlw	208
  6299  001142  EC11  F00B         	call	_TransmitI2C
  6300                           
  6301                           ;DS1307.c: 110: TransmitI2C(0x00);
  6302  001146  0E00               	movlw	0
  6303  001148  EC11  F00B         	call	_TransmitI2C
  6304                           
  6305                           ;DS1307.c: 111: i2cBuffer = dec_to_bcd(dateTime.sec);
  6306  00114C  0100               	movlb	0	; () banked
  6307  00114E  516D               	movf	_dateTime& (0+255),w,b
  6308  001150  ECF0  F00D         	call	_dec_to_bcd
  6309  001154  6E1C               	movwf	RTCSetTime@i2cBuffer,c
  6310                           
  6311                           ;DS1307.c: 112: TransmitI2C(i2cBuffer);
  6312  001156  501C               	movf	RTCSetTime@i2cBuffer,w,c
  6313  001158  EC11  F00B         	call	_TransmitI2C
  6314                           
  6315                           ;DS1307.c: 113: i2cBuffer = dec_to_bcd(dateTime.min);
  6316  00115C  0100               	movlb	0	; () banked
  6317  00115E  516E               	movf	(_dateTime+1)& (0+255),w,b
  6318  001160  ECF0  F00D         	call	_dec_to_bcd
  6319  001164  6E1C               	movwf	RTCSetTime@i2cBuffer,c
  6320                           
  6321                           ;DS1307.c: 114: TransmitI2C(i2cBuffer);
  6322  001166  501C               	movf	RTCSetTime@i2cBuffer,w,c
  6323  001168  EC11  F00B         	call	_TransmitI2C
  6324                           
  6325                           ;DS1307.c: 115: i2cBuffer = dec_to_bcd(dateTime.hour);
  6326  00116C  0100               	movlb	0	; () banked
  6327  00116E  516F               	movf	(_dateTime+2)& (0+255),w,b
  6328  001170  ECF0  F00D         	call	_dec_to_bcd
  6329  001174  6E1C               	movwf	RTCSetTime@i2cBuffer,c
  6330                           
  6331                           ;DS1307.c: 116: TransmitI2C(i2cBuffer | 0x40);
  6332  001176  501C               	movf	RTCSetTime@i2cBuffer,w,c
  6333  001178  0940               	iorlw	64
  6334  00117A  EC11  F00B         	call	_TransmitI2C
  6335                           
  6336                           ;DS1307.c: 117: i2cBuffer = dec_to_bcd(dateTime.wday);
  6337  00117E  0100               	movlb	0	; () banked
  6338  001180  5170               	movf	(_dateTime+3)& (0+255),w,b
  6339  001182  ECF0  F00D         	call	_dec_to_bcd
  6340  001186  6E1C               	movwf	RTCSetTime@i2cBuffer,c
  6341                           
  6342                           ;DS1307.c: 118: TransmitI2C(i2cBuffer);
  6343  001188  501C               	movf	RTCSetTime@i2cBuffer,w,c
  6344  00118A  EC11  F00B         	call	_TransmitI2C
  6345                           
  6346                           ;DS1307.c: 119: i2cBuffer = dec_to_bcd(dateTime.mday);
  6347  00118E  0100               	movlb	0	; () banked
  6348  001190  5171               	movf	(_dateTime+4)& (0+255),w,b
  6349  001192  ECF0  F00D         	call	_dec_to_bcd
  6350  001196  6E1C               	movwf	RTCSetTime@i2cBuffer,c
  6351                           
  6352                           ;DS1307.c: 120: TransmitI2C(i2cBuffer);
  6353  001198  501C               	movf	RTCSetTime@i2cBuffer,w,c
  6354  00119A  EC11  F00B         	call	_TransmitI2C
  6355                           
  6356                           ;DS1307.c: 121: i2cBuffer = dec_to_bcd(dateTime.mon);
  6357  00119E  0100               	movlb	0	; () banked
  6358  0011A0  5172               	movf	(_dateTime+5)& (0+255),w,b
  6359  0011A2  ECF0  F00D         	call	_dec_to_bcd
  6360  0011A6  6E1C               	movwf	RTCSetTime@i2cBuffer,c
  6361                           
  6362                           ;DS1307.c: 122: TransmitI2C(i2cBuffer);
  6363  0011A8  501C               	movf	RTCSetTime@i2cBuffer,w,c
  6364  0011AA  EC11  F00B         	call	_TransmitI2C
  6365                           
  6366                           ;DS1307.c: 123: i2cBuffer = dec_to_bcd(dateTime.year);
  6367  0011AE  0100               	movlb	0	; () banked
  6368  0011B0  5173               	movf	(_dateTime+6)& (0+255),w,b
  6369  0011B2  ECF0  F00D         	call	_dec_to_bcd
  6370  0011B6  6E1C               	movwf	RTCSetTime@i2cBuffer,c
  6371                           
  6372                           ;DS1307.c: 124: TransmitI2C(i2cBuffer);
  6373  0011B8  501C               	movf	RTCSetTime@i2cBuffer,w,c
  6374  0011BA  EC11  F00B         	call	_TransmitI2C
  6375                           
  6376                           ;DS1307.c: 125: StopI2C();
  6377  0011BE  EF9B  F00E         	goto	_StopI2C	;wreg free
  6378  0011C2                     __end_of_RTCSetTime:
  6379                           	opt stack 0
  6380                           tblptru	equ	0xFF8
  6381                           tblptrh	equ	0xFF7
  6382                           tblptrl	equ	0xFF6
  6383                           tablat	equ	0xFF5
  6384                           prodh	equ	0xFF4
  6385                           prodl	equ	0xFF3
  6386                           intcon	equ	0xFF2
  6387                           intcon2	equ	0xFF1
  6388                           postinc0	equ	0xFEE
  6389                           wreg	equ	0xFE8
  6390                           indf1	equ	0xFE7
  6391                           fsr1h	equ	0xFE2
  6392                           fsr1l	equ	0xFE1
  6393                           indf2	equ	0xFDF
  6394                           postinc2	equ	0xFDE
  6395                           postdec2	equ	0xFDD
  6396                           plusw2	equ	0xFDB
  6397                           fsr2h	equ	0xFDA
  6398                           fsr2l	equ	0xFD9
  6399                           status	equ	0xFD8
  6400                           
  6401 ;; *************** function _dec_to_bcd *****************
  6402 ;; Defined at:
  6403 ;;		line 257 in file "DS1307.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;  dec             1    wreg     unsigned char 
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;  dec             1   26[COMRAM] unsigned char 
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  1    wreg      unsigned char 
  6410 ;; Registers used:
  6411 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6412 ;; Tracked objects:
  6413 ;;		On entry : F/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6417 ;;      Params:         0       0       0       0
  6418 ;;      Locals:         1       0       0       0
  6419 ;;      Temps:          1       0       0       0
  6420 ;;      Totals:         2       0       0       0
  6421 ;;Total ram usage:        2 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    8
  6424 ;; This function calls:
  6425 ;;		___lbdiv
  6426 ;;		___lbmod
  6427 ;; This function is called by:
  6428 ;;		_RTCSetTime
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           	psect	text30
  6433  001BE0                     __ptext30:
  6434                           	opt stack 0
  6435  001BE0                     _dec_to_bcd:
  6436                           	opt stack 20
  6437                           
  6438                           ;incstack = 0
  6439                           ;dec_to_bcd@dec stored from wreg
  6440  001BE0  6E1B               	movwf	dec_to_bcd@dec,c
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;DS1307.c: 258: return(((dec / 10) << 4)+ (dec % 10));
  6444  001BE2  0E0A               	movlw	10
  6445  001BE4  6E16               	movwf	___lbmod@divisor,c
  6446  001BE6  501B               	movf	dec_to_bcd@dec,w,c
  6447  001BE8  EC84  F00D         	call	___lbmod
  6448  001BEC  6E1A               	movwf	??_dec_to_bcd& (0+255),c
  6449  001BEE  0E0A               	movlw	10
  6450  001BF0  6E16               	movwf	___lbdiv@divisor,c
  6451  001BF2  501B               	movf	dec_to_bcd@dec,w,c
  6452  001BF4  EC2D  F00D         	call	___lbdiv
  6453  001BF8  0D10               	mullw	16
  6454  001BFA  50F3               	movf	prodl,w,c
  6455  001BFC  241A               	addwf	??_dec_to_bcd,w,c
  6456  001BFE  0012               	return	
  6457  001C00                     __end_of_dec_to_bcd:
  6458                           	opt stack 0
  6459                           tblptru	equ	0xFF8
  6460                           tblptrh	equ	0xFF7
  6461                           tblptrl	equ	0xFF6
  6462                           tablat	equ	0xFF5
  6463                           prodh	equ	0xFF4
  6464                           prodl	equ	0xFF3
  6465                           intcon	equ	0xFF2
  6466                           intcon2	equ	0xFF1
  6467                           postinc0	equ	0xFEE
  6468                           wreg	equ	0xFE8
  6469                           indf1	equ	0xFE7
  6470                           fsr1h	equ	0xFE2
  6471                           fsr1l	equ	0xFE1
  6472                           indf2	equ	0xFDF
  6473                           postinc2	equ	0xFDE
  6474                           postdec2	equ	0xFDD
  6475                           plusw2	equ	0xFDB
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function _InputTime *****************
  6481 ;; Defined at:
  6482 ;;		line 43 in file "input.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;		None
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  daysInMonth     1    8[BANK0 ] unsigned char 
  6487 ;; Return value:  Size  Location     Type
  6488 ;;		None               void
  6489 ;; Registers used:
  6490 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6491 ;; Tracked objects:
  6492 ;;		On entry : F/0
  6493 ;;		On exit  : F/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6496 ;;      Params:         0       0       0       0
  6497 ;;      Locals:         0       1       0       0
  6498 ;;      Temps:          1       0       0       0
  6499 ;;      Totals:         1       1       0       0
  6500 ;;Total ram usage:        2 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:   10
  6503 ;; This function calls:
  6504 ;;		_DelayMs
  6505 ;;		_DisplayText
  6506 ;;		_InputNumber
  6507 ;;		_InputString
  6508 ;;		_ScrollText
  6509 ;;		___awmod
  6510 ;;		___lbmod
  6511 ;; This function is called by:
  6512 ;;		_HandleButtons
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text31
  6517  000410                     __ptext31:
  6518                           	opt stack 0
  6519  000410                     _InputTime:
  6520                           	opt stack 19
  6521                           
  6522                           ; BSR set to: 0
  6523                           ;input.c: 44: uint8_t daysInMonth;
  6524                           ;input.c: 48: ScrollText(string_SETTIME);
  6525                           
  6526                           ;incstack = 0
  6527  000410  0E3F               	movlw	high _string_SETTIME
  6528  000412  6E25               	movwf	ScrollText@gString+1,c
  6529  000414  0E4B               	movlw	low _string_SETTIME
  6530  000416  6E24               	movwf	ScrollText@gString,c
  6531  000418  EC69  F001         	call	_ScrollText	;wreg free
  6532                           
  6533                           ;input.c: 49: DelayMs(100);
  6534  00041C  6A17               	clrf	DelayMs@ms+1,c
  6535  00041E  0E64               	movlw	100
  6536  000420  6E16               	movwf	DelayMs@ms,c
  6537  000422  EC63  F00B         	call	_DelayMs	;wreg free
  6538                           
  6539                           ;input.c: 51: dateTime.hour = InputNumber("HOUR", 1, 12);
  6540  000426  0E3F               	movlw	high STR_28
  6541  000428  6E2D               	movwf	InputNumber@istring+1,c
  6542  00042A  0E8A               	movlw	low STR_28
  6543  00042C  6E2C               	movwf	InputNumber@istring,c
  6544  00042E  0E01               	movlw	1
  6545  000430  6E2E               	movwf	InputNumber@min,c
  6546  000432  0E0C               	movlw	12
  6547  000434  6E2F               	movwf	InputNumber@max,c
  6548  000436  EC3B  F006         	call	_InputNumber	;wreg free
  6549  00043A  6F6F               	movwf	(_dateTime+2)& (0+255),b
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;input.c: 53: dateTime.min = InputNumber("MIN", 0, 59);
  6553  00043C  0E3F               	movlw	high STR_29
  6554  00043E  6E2D               	movwf	InputNumber@istring+1,c
  6555  000440  0EDF               	movlw	low STR_29
  6556  000442  6E2C               	movwf	InputNumber@istring,c
  6557  000444  6A2E               	clrf	InputNumber@min,c
  6558  000446  0E3B               	movlw	59
  6559  000448  6E2F               	movwf	InputNumber@max,c
  6560  00044A  EC3B  F006         	call	_InputNumber	;wreg free
  6561  00044E  6F6E               	movwf	(_dateTime+1)& (0+255),b
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;input.c: 55: dateTime.sec = 0;
  6565  000450  6B6D               	clrf	_dateTime& (0+255),b
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;input.c: 57: dateTime.year = InputNumber("YEAR", 0, 99);
  6569  000452  0E3F               	movlw	high STR_30
  6570  000454  6E2D               	movwf	InputNumber@istring+1,c
  6571  000456  0E85               	movlw	low STR_30
  6572  000458  6E2C               	movwf	InputNumber@istring,c
  6573  00045A  6A2E               	clrf	InputNumber@min,c
  6574  00045C  0E63               	movlw	99
  6575  00045E  6E2F               	movwf	InputNumber@max,c
  6576  000460  EC3B  F006         	call	_InputNumber	;wreg free
  6577  000464  6F73               	movwf	(_dateTime+6)& (0+255),b
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;input.c: 59: dateTime.mon = InputString("MON", 1, 12, month_str);
  6581  000466  0E3F               	movlw	high STR_31
  6582  000468  6E26               	movwf	InputString@istring+1,c
  6583  00046A  0EE3               	movlw	low STR_31
  6584  00046C  6E25               	movwf	InputString@istring,c
  6585  00046E  0E01               	movlw	1
  6586  000470  6E27               	movwf	InputString@min,c
  6587  000472  0E0C               	movlw	12
  6588  000474  6E28               	movwf	InputString@max,c
  6589  000476  0E3E               	movlw	high _month_str
  6590  000478  6E2A               	movwf	InputString@stringArray+1,c
  6591  00047A  0EF7               	movlw	low _month_str
  6592  00047C  6E29               	movwf	InputString@stringArray,c
  6593  00047E  ECC9  F007         	call	_InputString	;wreg free
  6594  000482  0100               	movlb	0	; () banked
  6595  000484  6F72               	movwf	(_dateTime+5)& (0+255),b
  6596                           
  6597                           ;input.c: 60: switch (dateTime.mon) {
  6598  000486  D007               	goto	l5804
  6599  000488                     l5778:
  6600                           
  6601                           ; BSR set to: 0
  6602  000488  0E1F               	movlw	31
  6603  00048A  D003               	goto	L10
  6604  00048C                     l5780:
  6605                           
  6606                           ; BSR set to: 0
  6607  00048C  0E1C               	movlw	28
  6608  00048E  D001               	goto	L10
  6609  000490                     l5784:
  6610                           
  6611                           ; BSR set to: 0
  6612  000490  0E1E               	movlw	30
  6613  000492                     L10:
  6614  000492  6FB8               	movwf	InputTime@daysInMonth& (0+255),b
  6615                           
  6616                           ;input.c: 68: break;
  6617  000494  D019               	goto	l5806
  6618  000496                     l5804:
  6619                           
  6620                           ; BSR set to: 0
  6621  000496  5172               	movf	(_dateTime+5)& (0+255),w,b
  6622                           
  6623                           ; Switch size 1, requested type "space"
  6624                           ; Number of cases is 12, Range of values is 1 to 12
  6625                           ; switch strategies available:
  6626                           ; Name         Instructions Cycles
  6627                           ; simple_byte           37    19 (average)
  6628                           ;	Chosen strategy is simple_byte
  6629  000498  0A01               	xorlw	1	; case 1
  6630  00049A  E0F6               	bz	l5778
  6631  00049C  0A03               	xorlw	3	; case 2
  6632  00049E  E0F6               	bz	l5780
  6633  0004A0  0A01               	xorlw	1	; case 3
  6634  0004A2  E0F2               	bz	l5778
  6635  0004A4  0A07               	xorlw	7	; case 4
  6636  0004A6  E0F4               	bz	l5784
  6637  0004A8  0A01               	xorlw	1	; case 5
  6638  0004AA  E0EE               	bz	l5778
  6639  0004AC  0A03               	xorlw	3	; case 6
  6640  0004AE  E0F0               	bz	l5784
  6641  0004B0  0A01               	xorlw	1	; case 7
  6642  0004B2  E0EA               	bz	l5778
  6643  0004B4  0A0F               	xorlw	15	; case 8
  6644  0004B6  E0E8               	bz	l5778
  6645  0004B8  0A01               	xorlw	1	; case 9
  6646  0004BA  E0EA               	bz	l5784
  6647  0004BC  0A03               	xorlw	3	; case 10
  6648  0004BE  E0E4               	bz	l5778
  6649  0004C0  0A01               	xorlw	1	; case 11
  6650  0004C2  E0E6               	bz	l5784
  6651  0004C4  0A07               	xorlw	7	; case 12
  6652  0004C6  E0E0               	bz	l5778
  6653  0004C8                     l5806:
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;input.c: 88: if (dateTime.mon == 2 && (dateTime.year % 400 == 0 ||
  6657                           ;input.c: 89: (dateTime.year % 4 == 0 && dateTime.year % 100 != 0))) {
  6658  0004C8  5172               	movf	(_dateTime+5)& (0+255),w,b
  6659  0004CA  0A02               	xorlw	2
  6660  0004CC  E11B               	bnz	l5816
  6661                           
  6662                           ; BSR set to: 0
  6663  0004CE  C073  F016         	movff	_dateTime+6,___awmod@dividend
  6664  0004D2  6A17               	clrf	___awmod@dividend+1,c
  6665  0004D4  0E01               	movlw	1
  6666  0004D6  6E19               	movwf	___awmod@divisor+1,c
  6667  0004D8  0E90               	movlw	144
  6668  0004DA  6E18               	movwf	___awmod@divisor,c
  6669  0004DC  ECDA  F009         	call	___awmod	;wreg free
  6670  0004E0  5017               	movf	?___awmod+1,w,c
  6671  0004E2  1016               	iorwf	?___awmod,w,c
  6672  0004E4  E00C               	bz	l5814
  6673                           
  6674                           ; BSR set to: 0
  6675  0004E6  C073  F033         	movff	_dateTime+6,??_InputTime
  6676  0004EA  0E03               	movlw	3
  6677  0004EC  1633               	andwf	??_InputTime,f,c
  6678  0004EE  E10A               	bnz	l5816
  6679                           
  6680                           ; BSR set to: 0
  6681  0004F0  0E64               	movlw	100
  6682  0004F2  6E16               	movwf	___lbmod@divisor,c
  6683  0004F4  5173               	movf	(_dateTime+6)& (0+255),w,b
  6684  0004F6  EC84  F00D         	call	___lbmod
  6685  0004FA  0900               	iorlw	0
  6686  0004FC  E003               	bz	l5816
  6687  0004FE                     l5814:
  6688                           
  6689                           ;input.c: 90: daysInMonth = 29;
  6690  0004FE  0E1D               	movlw	29
  6691  000500  0100               	movlb	0	; () banked
  6692  000502  6FB8               	movwf	InputTime@daysInMonth& (0+255),b
  6693  000504                     l5816:
  6694                           
  6695                           ;input.c: 91: }
  6696                           ;input.c: 93: dateTime.mday = InputNumber("DATE", 1, daysInMonth);
  6697  000504  0E3F               	movlw	high STR_32
  6698  000506  6E2D               	movwf	InputNumber@istring+1,c
  6699  000508  0E80               	movlw	low STR_32
  6700  00050A  6E2C               	movwf	InputNumber@istring,c
  6701  00050C  0E01               	movlw	1
  6702  00050E  6E2E               	movwf	InputNumber@min,c
  6703  000510  C0B8  F02F         	movff	InputTime@daysInMonth,InputNumber@max
  6704  000514  EC3B  F006         	call	_InputNumber	;wreg free
  6705  000518  6F71               	movwf	(_dateTime+4)& (0+255),b
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;input.c: 95: dateTime.wday = InputString("DAY", 1, 7, dow_str);
  6709  00051A  0E3F               	movlw	high STR_33
  6710  00051C  6E26               	movwf	InputString@istring+1,c
  6711  00051E  0EE7               	movlw	low STR_33
  6712  000520  6E25               	movwf	InputString@istring,c
  6713  000522  0E01               	movlw	1
  6714  000524  6E27               	movwf	InputString@min,c
  6715  000526  0E07               	movlw	7
  6716  000528  6E28               	movwf	InputString@max,c
  6717  00052A  0E3F               	movlw	high _dow_str
  6718  00052C  6E2A               	movwf	InputString@stringArray+1,c
  6719  00052E  0E2B               	movlw	low _dow_str
  6720  000530  6E29               	movwf	InputString@stringArray,c
  6721  000532  ECC9  F007         	call	_InputString	;wreg free
  6722  000536  0100               	movlb	0	; () banked
  6723  000538  6F70               	movwf	(_dateTime+3)& (0+255),b
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;input.c: 97: DisplayText(0,1,string_DONE);
  6727  00053A  0E01               	movlw	1
  6728  00053C  6E17               	movwf	DisplayText@yStart,c
  6729  00053E  0E3F               	movlw	high _string_DONE
  6730  000540  6E19               	movwf	DisplayText@gString+1,c
  6731  000542  0E64               	movlw	low _string_DONE
  6732  000544  6E18               	movwf	DisplayText@gString,c
  6733  000546  0E00               	movlw	0
  6734  000548  EFAE  F003         	goto	_DisplayText
  6735  00054C                     __end_of_InputTime:
  6736                           	opt stack 0
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           intcon	equ	0xFF2
  6744                           intcon2	equ	0xFF1
  6745                           postinc0	equ	0xFEE
  6746                           wreg	equ	0xFE8
  6747                           indf1	equ	0xFE7
  6748                           fsr1h	equ	0xFE2
  6749                           fsr1l	equ	0xFE1
  6750                           indf2	equ	0xFDF
  6751                           postinc2	equ	0xFDE
  6752                           postdec2	equ	0xFDD
  6753                           plusw2	equ	0xFDB
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function ___awmod *****************
  6759 ;; Defined at:
  6760 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  dividend        2   21[COMRAM] int 
  6763 ;;  divisor         2   23[COMRAM] int 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  sign            1   26[COMRAM] unsigned char 
  6766 ;;  counter         1   25[COMRAM] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  2   21[COMRAM] int 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0, prodl
  6771 ;; Tracked objects:
  6772 ;;		On entry : F/0
  6773 ;;		On exit  : F/0
  6774 ;;		Unchanged: F/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6776 ;;      Params:         4       0       0       0
  6777 ;;      Locals:         2       0       0       0
  6778 ;;      Temps:          0       0       0       0
  6779 ;;      Totals:         6       0       0       0
  6780 ;;Total ram usage:        6 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    7
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		_InputTime
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text32
  6791  0013B4                     __ptext32:
  6792                           	opt stack 0
  6793  0013B4                     ___awmod:
  6794                           	opt stack 21
  6795                           
  6796                           ; BSR set to: 0
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;incstack = 0
  6800  0013B4  6A1B               	clrf	___awmod@sign,c
  6801                           
  6802                           ; BSR set to: 0
  6803  0013B6  5017               	movf	___awmod@dividend+1,w,c
  6804  0013B8  EC55  F008         	call	PL10	;call to abstracted procedure
  6805  0013BC  B4D8               	btfsc	status,2,c
  6806  0013BE  5C16               	subwf	___awmod@dividend,w,c
  6807  0013C0  E206               	bc	l5574
  6808                           
  6809                           ; BSR set to: 0
  6810  0013C2  6C16               	negf	___awmod@dividend,c
  6811  0013C4  1E17               	comf	___awmod@dividend+1,f,c
  6812  0013C6  B0D8               	btfsc	status,0,c
  6813  0013C8  2A17               	incf	___awmod@dividend+1,f,c
  6814                           
  6815                           ; BSR set to: 0
  6816  0013CA  0E01               	movlw	1
  6817  0013CC  6E1B               	movwf	___awmod@sign,c
  6818  0013CE                     l5574:
  6819                           
  6820                           ; BSR set to: 0
  6821  0013CE  5019               	movf	___awmod@divisor+1,w,c
  6822  0013D0  EC55  F008         	call	PL10	;call to abstracted procedure
  6823  0013D4  B4D8               	btfsc	status,2,c
  6824  0013D6  5C18               	subwf	___awmod@divisor,w,c
  6825  0013D8  E204               	bc	l5578
  6826                           
  6827                           ; BSR set to: 0
  6828  0013DA  6C18               	negf	___awmod@divisor,c
  6829  0013DC  1E19               	comf	___awmod@divisor+1,f,c
  6830  0013DE  B0D8               	btfsc	status,0,c
  6831  0013E0  2A19               	incf	___awmod@divisor+1,f,c
  6832  0013E2                     l5578:
  6833                           
  6834                           ; BSR set to: 0
  6835  0013E2  5019               	movf	___awmod@divisor+1,w,c
  6836  0013E4  1018               	iorwf	___awmod@divisor,w,c
  6837  0013E6  E017               	bz	l5594
  6838                           
  6839                           ; BSR set to: 0
  6840  0013E8  0E01               	movlw	1
  6841  0013EA  6E1A               	movwf	___awmod@counter,c
  6842  0013EC  D004               	goto	l5584
  6843  0013EE                     l5582:
  6844                           
  6845                           ; BSR set to: 0
  6846  0013EE  90D8               	bcf	status,0,c
  6847  0013F0  3618               	rlcf	___awmod@divisor,f,c
  6848  0013F2  3619               	rlcf	___awmod@divisor+1,f,c
  6849  0013F4  2A1A               	incf	___awmod@counter,f,c
  6850  0013F6                     l5584:
  6851                           
  6852                           ; BSR set to: 0
  6853  0013F6  AE19               	btfss	___awmod@divisor+1,7,c
  6854  0013F8  D7FA               	goto	l5582
  6855  0013FA                     l5586:
  6856                           
  6857                           ; BSR set to: 0
  6858  0013FA  5018               	movf	___awmod@divisor,w,c
  6859  0013FC  5C16               	subwf	___awmod@dividend,w,c
  6860  0013FE  5019               	movf	___awmod@divisor+1,w,c
  6861  001400  5817               	subwfb	___awmod@dividend+1,w,c
  6862  001402  E304               	bnc	l5590
  6863                           
  6864                           ; BSR set to: 0
  6865  001404  5018               	movf	___awmod@divisor,w,c
  6866  001406  5E16               	subwf	___awmod@dividend,f,c
  6867  001408  5019               	movf	___awmod@divisor+1,w,c
  6868  00140A  5A17               	subwfb	___awmod@dividend+1,f,c
  6869  00140C                     l5590:
  6870                           
  6871                           ; BSR set to: 0
  6872  00140C  90D8               	bcf	status,0,c
  6873  00140E  3219               	rrcf	___awmod@divisor+1,f,c
  6874  001410  3218               	rrcf	___awmod@divisor,f,c
  6875                           
  6876                           ; BSR set to: 0
  6877  001412  2E1A               	decfsz	___awmod@counter,f,c
  6878  001414  D7F2               	goto	l5586
  6879  001416                     l5594:
  6880                           
  6881                           ; BSR set to: 0
  6882  001416  501B               	movf	___awmod@sign,w,c
  6883  001418  E004               	bz	l5598
  6884                           
  6885                           ; BSR set to: 0
  6886  00141A  6C16               	negf	___awmod@dividend,c
  6887  00141C  1E17               	comf	___awmod@dividend+1,f,c
  6888  00141E  B0D8               	btfsc	status,0,c
  6889  001420  2A17               	incf	___awmod@dividend+1,f,c
  6890  001422                     l5598:
  6891                           
  6892                           ; BSR set to: 0
  6893  001422  C016  F016         	movff	___awmod@dividend,?___awmod
  6894  001426  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
  6895                           
  6896                           ; BSR set to: 0
  6897  00142A  0012               	return	
  6898  00142C                     __end_of___awmod:
  6899                           	opt stack 0
  6900                           tblptru	equ	0xFF8
  6901                           tblptrh	equ	0xFF7
  6902                           tblptrl	equ	0xFF6
  6903                           tablat	equ	0xFF5
  6904                           prodh	equ	0xFF4
  6905                           prodl	equ	0xFF3
  6906                           intcon	equ	0xFF2
  6907                           intcon2	equ	0xFF1
  6908                           postinc0	equ	0xFEE
  6909                           wreg	equ	0xFE8
  6910                           indf1	equ	0xFE7
  6911                           fsr1h	equ	0xFE2
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           plusw2	equ	0xFDB
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _ScrollText *****************
  6922 ;; Defined at:
  6923 ;;		line 196 in file "display.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;  gString         2   35[COMRAM] PTR const unsigned char 
  6926 ;;		 -> string_SETTIME(13), string_ON(5), string_AT(5), string_IT_IS(7), 
  6927 ;;		 -> tempString(4), DateStringLong@tstring(16), dateTime.tstring(6), dateTime(20), 
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;  i               1   49[COMRAM] unsigned char 
  6930 ;;  currentChar     2   47[COMRAM] int 
  6931 ;;  char_index      2   45[COMRAM] unsigned int 
  6932 ;;  char_width      1   44[COMRAM] unsigned char 
  6933 ;;  string_index    1   43[COMRAM] unsigned char 
  6934 ;;  length          1   42[COMRAM] unsigned char 
  6935 ;; Return value:  Size  Location     Type
  6936 ;;		None               void
  6937 ;; Registers used:
  6938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6944 ;;      Params:         2       0       0       0
  6945 ;;      Locals:         8       0       0       0
  6946 ;;      Temps:          5       0       0       0
  6947 ;;      Totals:        15       0       0       0
  6948 ;;Total ram usage:       15 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    8
  6951 ;; This function calls:
  6952 ;;		_ClearButtons
  6953 ;;		_DelayMs
  6954 ;;		_ReadButtonState
  6955 ;;		_strlen
  6956 ;; This function is called by:
  6957 ;;		_DateStringLong
  6958 ;;		_ScrollTime
  6959 ;;		_InputTime
  6960 ;; This function uses a non-reentrant model
  6961 ;;
  6962                           
  6963                           	psect	text33
  6964  0002D2                     __ptext33:
  6965                           	opt stack 0
  6966  0002D2                     _ScrollText:
  6967                           	opt stack 21
  6968                           
  6969                           ;display.c: 197: int currentChar = 0;
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;incstack = 0
  6973  0002D2  6A30               	clrf	ScrollText@currentChar,c
  6974  0002D4  6A31               	clrf	ScrollText@currentChar+1,c
  6975                           
  6976                           ;display.c: 198: uint8_t string_index = 0;
  6977  0002D6  6A2C               	clrf	ScrollText@string_index,c
  6978                           
  6979                           ;display.c: 199: uint16_t char_index = 0;
  6980  0002D8  6A2E               	clrf	ScrollText@char_index,c
  6981  0002DA  6A2F               	clrf	ScrollText@char_index+1,c
  6982                           
  6983                           ;display.c: 200: uint8_t char_width = 0;
  6984  0002DC  6A2D               	clrf	ScrollText@char_width,c
  6985                           
  6986                           ;display.c: 201: uint8_t length;
  6987                           ;display.c: 203: length = (strlen(gString));
  6988  0002DE  C025  F017         	movff	ScrollText@gString+1,strlen@s+1
  6989  0002E2  C024  F016         	movff	ScrollText@gString,strlen@s
  6990  0002E6  EC47  F00C         	call	_strlen	;wreg free
  6991  0002EA  5016               	movf	?_strlen,w,c
  6992  0002EC  6E2B               	movwf	ScrollText@length,c
  6993                           
  6994                           ;display.c: 205: buttonState[0] = 0x00; buttonState[2] = 0x00; buttonState[1] = 0x00;
  6995  0002EE  6A3C               	clrf	_buttonState,c	;volatile
  6996  0002F0  6A3E               	clrf	_buttonState+2,c	;volatile
  6997  0002F2  6A3D               	clrf	_buttonState+1,c	;volatile
  6998                           
  6999                           ;display.c: 206: while(string_index < (length +1)) {
  7000  0002F4  D079               	goto	l5404
  7001  0002F6                     l277:
  7002                           
  7003                           ;display.c: 208: if (char_width == 0) {
  7004  0002F6  662D               	tstfsz	ScrollText@char_width,c
  7005  0002F8  D042               	goto	l5372
  7006                           
  7007                           ;display.c: 209: currentChar = gString[string_index++];
  7008  0002FA  502C               	movf	ScrollText@string_index,w,c
  7009  0002FC  2424               	addwf	ScrollText@gString,w,c
  7010  0002FE  6E26               	movwf	??_ScrollText& (0+255),c
  7011  000300  0E00               	movlw	0
  7012  000302  2025               	addwfc	ScrollText@gString+1,w,c
  7013  000304  6E27               	movwf	(??_ScrollText+1)& (0+255),c
  7014  000306  C026  FFF6         	movff	??_ScrollText,tblptrl
  7015  00030A  C027  FFF7         	movff	??_ScrollText+1,tblptrh
  7016  00030E  6AF8               	clrf	tblptru,c
  7017  000310  0E02               	movlw	(high __ramtop+-1)
  7018  000312  64F7               	cpfsgt	tblptrh,c
  7019  000314  D003               	bra	u5097
  7020  000316  0008               	tblrd		*
  7021  000318  50F5               	movf	tablat,w,c
  7022  00031A  D005               	bra	u5090
  7023  00031C                     u5097:
  7024  00031C  CFF6 FFE1          	movff	tblptrl,fsr1l
  7025  000320  CFF7 FFE2          	movff	tblptrh,fsr1h
  7026  000324  50E7               	movf	indf1,w,c
  7027  000326                     u5090:
  7028  000326  6E30               	movwf	ScrollText@currentChar,c
  7029  000328  6A31               	clrf	ScrollText@currentChar+1,c
  7030  00032A  2A2C               	incf	ScrollText@string_index,f,c
  7031                           
  7032                           ;display.c: 210: if (currentChar == '\0') {
  7033  00032C  5031               	movf	ScrollText@currentChar+1,w,c
  7034  00032E  1030               	iorwf	ScrollText@currentChar,w,c
  7035  000330  E105               	bnz	l5368
  7036                           
  7037                           ;display.c: 211: char_width = 14;
  7038  000332  0E0E               	movlw	14
  7039  000334  6E2D               	movwf	ScrollText@char_width,c
  7040                           
  7041                           ;display.c: 212: char_index = 0;
  7042  000336  6A2E               	clrf	ScrollText@char_index,c
  7043  000338  6A2F               	clrf	ScrollText@char_index+1,c
  7044                           
  7045                           ;display.c: 213: } else {
  7046  00033A  D021               	goto	l5372
  7047  00033C                     l5368:
  7048                           
  7049                           ;display.c: 214: char_index = (currentChar - 32)*4;
  7050  00033C  C030  F026         	movff	ScrollText@currentChar,??_ScrollText
  7051  000340  C031  F027         	movff	ScrollText@currentChar+1,??_ScrollText+1
  7052  000344  90D8               	bcf	status,0,c
  7053  000346  3626               	rlcf	??_ScrollText,f,c
  7054  000348  3627               	rlcf	??_ScrollText+1,f,c
  7055  00034A  90D8               	bcf	status,0,c
  7056  00034C  3626               	rlcf	??_ScrollText,f,c
  7057  00034E  3627               	rlcf	??_ScrollText+1,f,c
  7058  000350  0E80               	movlw	128
  7059  000352  2426               	addwf	??_ScrollText,w,c
  7060  000354  6E2E               	movwf	ScrollText@char_index,c
  7061  000356  0EFF               	movlw	255
  7062  000358  2027               	addwfc	??_ScrollText+1,w,c
  7063  00035A  6E2F               	movwf	ScrollText@char_index+1,c
  7064                           
  7065                           ;display.c: 215: char_width = font3_1[ char_index + 3] + 1;
  7066  00035C  0E03               	movlw	3
  7067  00035E  242E               	addwf	ScrollText@char_index,w,c
  7068  000360  6E26               	movwf	??_ScrollText& (0+255),c
  7069  000362  0E00               	movlw	0
  7070  000364  202F               	addwfc	ScrollText@char_index+1,w,c
  7071  000366  6E27               	movwf	(??_ScrollText+1)& (0+255),c
  7072  000368  0EED               	movlw	low _font3_1
  7073  00036A  2426               	addwf	??_ScrollText,w,c
  7074  00036C  6EF6               	movwf	tblptrl,c
  7075  00036E  0E3D               	movlw	high _font3_1
  7076  000370  2027               	addwfc	??_ScrollText+1,w,c
  7077  000372  6EF7               	movwf	tblptrh,c
  7078  000374                     	if	0	;There are less than 3 active tblptr bytes
  7079  000374                     	endif
  7080  000374  0008               	tblrd		*
  7081  000376  CFF5 F028          	movff	tablat,??_ScrollText+2
  7082  00037A  2828               	incf	??_ScrollText+2,w,c
  7083  00037C  6E2D               	movwf	ScrollText@char_width,c
  7084  00037E                     l5372:
  7085                           
  7086                           ;display.c: 216: }
  7087                           ;display.c: 217: }
  7088                           ;display.c: 219: for (uint8_t i = 0; i < 14; i++) {
  7089  00037E  6A32               	clrf	ScrollText@i,c
  7090  000380                     l5378:
  7091                           
  7092                           ;display.c: 220: display.cols[i] = display.cols[i + 1];
  7093  000380  5032               	movf	ScrollText@i,w,c
  7094  000382  0100               	movlb	0	; () banked
  7095  000384  0F82               	addlw	low (_display+1)	;volatile
  7096  000386  6ED9               	movwf	fsr2l,c
  7097  000388  6ADA               	clrf	fsr2h,c
  7098  00038A  5032               	movf	ScrollText@i,w,c
  7099  00038C  0F81               	addlw	low _display	;volatile
  7100  00038E  6EE1               	movwf	fsr1l,c
  7101  000390  6AE2               	clrf	fsr1h,c
  7102  000392  CFDF FFE7          	movff	indf2,indf1
  7103                           
  7104                           ; BSR set to: 0
  7105  000396  2A32               	incf	ScrollText@i,f,c
  7106                           
  7107                           ; BSR set to: 0
  7108  000398  0E0D               	movlw	13
  7109  00039A  6432               	cpfsgt	ScrollText@i,c
  7110  00039C  D7F1               	goto	l5378
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;display.c: 221: }
  7114                           ;display.c: 223: display.cols[14] = font3_1[ char_index ] << 1;
  7115  00039E  0EED               	movlw	low _font3_1
  7116  0003A0  242E               	addwf	ScrollText@char_index,w,c
  7117  0003A2  6EF6               	movwf	tblptrl,c
  7118  0003A4  0E3D               	movlw	high _font3_1
  7119  0003A6  202F               	addwfc	ScrollText@char_index+1,w,c
  7120  0003A8  6EF7               	movwf	tblptrh,c
  7121  0003AA                     	if	0	;There are less than 3 active tblptr bytes
  7122  0003AA                     	endif
  7123  0003AA  0008               	tblrd		*
  7124  0003AC  CFF5 F026          	movff	tablat,??_ScrollText
  7125  0003B0  90D8               	bcf	status,0,c
  7126  0003B2  3426               	rlcf	??_ScrollText,w,c
  7127  0003B4  6F8F               	movwf	(_display+14)& (0+255),b	;volatile
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;display.c: 225: if (currentChar != '\0') {
  7131  0003B6  5031               	movf	ScrollText@currentChar+1,w,c
  7132  0003B8  1030               	iorwf	ScrollText@currentChar,w,c
  7133  0003BA  E008               	bz	l5392
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;display.c: 226: if (char_width > 2) {
  7137  0003BC  0E02               	movlw	2
  7138  0003BE  642D               	cpfsgt	ScrollText@char_width,c
  7139  0003C0  D003               	goto	l284
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;display.c: 227: ++char_index;
  7143  0003C2  4A2E               	infsnz	ScrollText@char_index,f,c
  7144  0003C4  2A2F               	incf	ScrollText@char_index+1,f,c
  7145                           
  7146                           ;display.c: 228: } else {
  7147  0003C6  D002               	goto	l5392
  7148  0003C8                     l284:
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;display.c: 229: char_index = 0;
  7152  0003C8  6A2E               	clrf	ScrollText@char_index,c
  7153  0003CA  6A2F               	clrf	ScrollText@char_index+1,c
  7154  0003CC                     l5392:
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;display.c: 230: }
  7158                           ;display.c: 231: }
  7159                           ;display.c: 232: --char_width;
  7160  0003CC  062D               	decf	ScrollText@char_width,f,c
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;display.c: 234: DelayMs(100);
  7164  0003CE  6A17               	clrf	DelayMs@ms+1,c
  7165  0003D0  0E64               	movlw	100
  7166  0003D2  6E16               	movwf	DelayMs@ms,c
  7167  0003D4  EC63  F00B         	call	_DelayMs	;wreg free
  7168                           
  7169                           ;display.c: 236: ReadButtonState();
  7170  0003D8  EC2F  F003         	call	_ReadButtonState	;wreg free
  7171                           
  7172                           ;display.c: 238: if(button_1.pressed){
  7173  0003DC  A442               	btfss	_button_1,2,c	;volatile
  7174  0003DE  D004               	goto	l5404
  7175                           
  7176                           ;display.c: 239: ClearButtons();
  7177  0003E0  ECBC  F00D         	call	_ClearButtons	;wreg free
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;display.c: 240: currentState++;
  7181  0003E4  2A49               	incf	_currentState,f,c	;volatile
  7182                           
  7183                           ;display.c: 241: break;
  7184  0003E6  0012               	return	
  7185  0003E8                     l5404:
  7186  0003E8  502B               	movf	ScrollText@length,w,c
  7187  0003EA  6E26               	movwf	??_ScrollText& (0+255),c
  7188  0003EC  6A27               	clrf	(??_ScrollText+1)& (0+255),c
  7189  0003EE  2A26               	incf	??_ScrollText,f,c
  7190  0003F0  0E00               	movlw	0
  7191  0003F2  2227               	addwfc	??_ScrollText+1,f,c
  7192  0003F4  502C               	movf	ScrollText@string_index,w,c
  7193  0003F6  6E28               	movwf	(??_ScrollText+2)& (0+255),c
  7194  0003F8  6A29               	clrf	(??_ScrollText+3)& (0+255),c
  7195  0003FA  5029               	movf	??_ScrollText+3,w,c
  7196  0003FC  0A80               	xorlw	128
  7197  0003FE  6E2A               	movwf	(??_ScrollText+4)& (0+255),c
  7198  000400  5026               	movf	??_ScrollText,w,c
  7199  000402  5C28               	subwf	??_ScrollText+2,w,c
  7200  000404  5027               	movf	??_ScrollText+1,w,c
  7201  000406  0A80               	xorlw	128
  7202  000408  582A               	subwfb	(??_ScrollText+4)& (0+255),w,c
  7203  00040A  B0D8               	btfsc	status,0,c
  7204  00040C  0012               	return	
  7205  00040E  D773               	goto	l277
  7206  000410                     __end_of_ScrollText:
  7207                           	opt stack 0
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           intcon	equ	0xFF2
  7215                           intcon2	equ	0xFF1
  7216                           postinc0	equ	0xFEE
  7217                           wreg	equ	0xFE8
  7218                           indf1	equ	0xFE7
  7219                           fsr1h	equ	0xFE2
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           plusw2	equ	0xFDB
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _strlen *****************
  7230 ;; Defined at:
  7231 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\strlen.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  s               2   21[COMRAM] PTR const unsigned char 
  7234 ;;		 -> string_SETTIME(13), string_ON(5), string_AT(5), string_IT_IS(7), 
  7235 ;;		 -> tempString(4), DateStringLong@tstring(16), dateTime.tstring(6), dateTime(20), 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  cp              2   23[COMRAM] PTR const unsigned char 
  7238 ;;		 -> string_SETTIME(13), string_ON(5), string_AT(5), string_IT_IS(7), 
  7239 ;;		 -> tempString(4), DateStringLong@tstring(16), dateTime.tstring(6), dateTime(20), 
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  2   21[COMRAM] unsigned int 
  7242 ;; Registers used:
  7243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7249 ;;      Params:         2       0       0       0
  7250 ;;      Locals:         2       0       0       0
  7251 ;;      Temps:          0       0       0       0
  7252 ;;      Totals:         4       0       0       0
  7253 ;;Total ram usage:        4 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    7
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_DateStringLong
  7260 ;;		_ScrollText
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           	psect	text34
  7265  00188E                     __ptext34:
  7266                           	opt stack 0
  7267  00188E                     _strlen:
  7268                           	opt stack 21
  7269                           
  7270                           ;incstack = 0
  7271  00188E  C017  F019         	movff	strlen@s+1,strlen@cp+1
  7272  001892  C016  F018         	movff	strlen@s,strlen@cp
  7273  001896  D002               	goto	l5072
  7274  001898                     l5070:
  7275  001898  4A18               	infsnz	strlen@cp,f,c
  7276  00189A  2A19               	incf	strlen@cp+1,f,c
  7277  00189C                     l5072:
  7278  00189C  C018  FFF6         	movff	strlen@cp,tblptrl
  7279  0018A0  C019  FFF7         	movff	strlen@cp+1,tblptrh
  7280  0018A4  6AF8               	clrf	tblptru,c
  7281  0018A6  0E02               	movlw	(high __ramtop+-1)
  7282  0018A8  64F7               	cpfsgt	tblptrh,c
  7283  0018AA  D003               	bra	u4517
  7284  0018AC  0008               	tblrd		*
  7285  0018AE  50F5               	movf	tablat,w,c
  7286  0018B0  D005               	bra	u4510
  7287  0018B2                     u4517:
  7288  0018B2  CFF6 FFE1          	movff	tblptrl,fsr1l
  7289  0018B6  CFF7 FFE2          	movff	tblptrh,fsr1h
  7290  0018BA  50E7               	movf	indf1,w,c
  7291  0018BC                     u4510:
  7292  0018BC  0900               	iorlw	0
  7293  0018BE  E1EC               	bnz	l5070
  7294  0018C0  5016               	movf	strlen@s,w,c
  7295  0018C2  5C18               	subwf	strlen@cp,w,c
  7296  0018C4  6E16               	movwf	?_strlen,c
  7297  0018C6  5017               	movf	strlen@s+1,w,c
  7298  0018C8  5819               	subwfb	strlen@cp+1,w,c
  7299  0018CA  6E17               	movwf	?_strlen+1,c
  7300  0018CC  0012               	return	
  7301  0018CE                     __end_of_strlen:
  7302                           	opt stack 0
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           intcon2	equ	0xFF1
  7311                           postinc0	equ	0xFEE
  7312                           wreg	equ	0xFE8
  7313                           indf1	equ	0xFE7
  7314                           fsr1h	equ	0xFE2
  7315                           fsr1l	equ	0xFE1
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           plusw2	equ	0xFDB
  7320                           fsr2h	equ	0xFDA
  7321                           fsr2l	equ	0xFD9
  7322                           status	equ	0xFD8
  7323                           
  7324 ;; *************** function _ClearButtons *****************
  7325 ;; Defined at:
  7326 ;;		line 54 in file "globals.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  i               1   21[COMRAM] unsigned char 
  7331 ;; Return value:  Size  Location     Type
  7332 ;;		None               void
  7333 ;; Registers used:
  7334 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : F/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7340 ;;      Params:         0       0       0       0
  7341 ;;      Locals:         1       0       0       0
  7342 ;;      Temps:          0       0       0       0
  7343 ;;      Totals:         1       0       0       0
  7344 ;;Total ram usage:        1 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    7
  7347 ;; This function calls:
  7348 ;;		Nothing
  7349 ;; This function is called by:
  7350 ;;		_ScrollText
  7351 ;;		_HandleButtons
  7352 ;; This function uses a non-reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text35
  7356  001B78                     __ptext35:
  7357                           	opt stack 0
  7358  001B78                     _ClearButtons:
  7359                           	opt stack 21
  7360                           
  7361                           ;globals.c: 56: for (uint8_t i = 0; i < 3; i++) {
  7362                           
  7363                           ;incstack = 0
  7364  001B78  6A16               	clrf	ClearButtons@i,c
  7365  001B7A                     l5198:
  7366                           
  7367                           ;globals.c: 57: buttons[i]->pressed = 0;
  7368  001B7A  5016               	movf	ClearButtons@i,w,c
  7369  001B7C  0100               	movlb	0	; () banked
  7370  001B7E  EC63  F005         	call	PL4	;call to abstracted procedure
  7371  001B82  94DF               	bcf	indf2,2,c
  7372                           
  7373                           ;globals.c: 58: buttons[i]->debounce = 0;
  7374  001B84  5016               	movf	ClearButtons@i,w,c
  7375  001B86  EC63  F005         	call	PL4	;call to abstracted procedure
  7376  001B8A  0E04               	movlw	4
  7377  001B8C  26D9               	addwf	fsr2l,f,c
  7378  001B8E  6ADE               	clrf	postinc2,c
  7379  001B90  6ADD               	clrf	postdec2,c
  7380                           
  7381                           ; BSR set to: 0
  7382  001B92  2A16               	incf	ClearButtons@i,f,c
  7383                           
  7384                           ; BSR set to: 0
  7385  001B94  0E02               	movlw	2
  7386  001B96  6416               	cpfsgt	ClearButtons@i,c
  7387  001B98  D7F0               	goto	l5198
  7388  001B9A  0C02               	retlw	2
  7389  001B9C                     __end_of_ClearButtons:
  7390                           	opt stack 0
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           prodh	equ	0xFF4
  7396                           prodl	equ	0xFF3
  7397                           intcon	equ	0xFF2
  7398                           intcon2	equ	0xFF1
  7399                           postinc0	equ	0xFEE
  7400                           wreg	equ	0xFE8
  7401                           indf1	equ	0xFE7
  7402                           fsr1h	equ	0xFE2
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           plusw2	equ	0xFDB
  7408                           fsr2h	equ	0xFDA
  7409                           fsr2l	equ	0xFD9
  7410                           status	equ	0xFD8
  7411                           
  7412 ;; *************** function _InputString *****************
  7413 ;; Defined at:
  7414 ;;		line 140 in file "input.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  istring         2   36[COMRAM] PTR const unsigned char 
  7417 ;;		 -> STR_33(4), STR_31(4), 
  7418 ;;  min             1   38[COMRAM] unsigned char 
  7419 ;;  max             1   39[COMRAM] unsigned char 
  7420 ;;  stringArray     2   40[COMRAM] PTR const unsigned char 
  7421 ;;		 -> dow_str(32), month_str(52), 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  result          1   44[COMRAM] unsigned char 
  7424 ;;  done            1   43[COMRAM] unsigned char 
  7425 ;;  currentNumbe    1   42[COMRAM] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      unsigned char 
  7428 ;; Registers used:
  7429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : F/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7435 ;;      Params:         6       0       0       0
  7436 ;;      Locals:         3       0       0       0
  7437 ;;      Temps:          0       0       0       0
  7438 ;;      Totals:         9       0       0       0
  7439 ;;Total ram usage:        9 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    9
  7442 ;; This function calls:
  7443 ;;		_DelayMs
  7444 ;;		_DisplayText
  7445 ;;		_ReadButtonState
  7446 ;; This function is called by:
  7447 ;;		_InputTime
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           	psect	text36
  7452  000F92                     __ptext36:
  7453                           	opt stack 0
  7454  000F92                     _InputString:
  7455                           	opt stack 19
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;input.c: 141: uint8_t result = min;
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;incstack = 0
  7462  000F92  C027  F02D         	movff	InputString@min,InputString@result
  7463                           
  7464                           ;input.c: 142: uint8_t currentNumber = 0xFF;
  7465  000F96  682B               	setf	InputString@currentNumber,c
  7466                           
  7467                           ;input.c: 143: unsigned char done = 0x00;
  7468  000F98  6A2C               	clrf	InputString@done,c
  7469                           
  7470                           ;input.c: 145: buttonState[0] = 0x00; buttonState[2] = 0x00; buttonState[1] = 0x00;
  7471  000F9A  6A3C               	clrf	_buttonState,c	;volatile
  7472  000F9C  6A3E               	clrf	_buttonState+2,c	;volatile
  7473  000F9E  6A3D               	clrf	_buttonState+1,c	;volatile
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;input.c: 150: DisplayText(0,1,istring);
  7477  000FA0  0E01               	movlw	1
  7478  000FA2  6E17               	movwf	DisplayText@yStart,c
  7479  000FA4  C026  F019         	movff	InputString@istring+1,DisplayText@gString+1
  7480  000FA8  C025  F018         	movff	InputString@istring,DisplayText@gString
  7481  000FAC  0E00               	movlw	0
  7482  000FAE  ECAE  F003         	call	_DisplayText
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;input.c: 151: DelayMs(500);
  7486  000FB2  0E01               	movlw	1
  7487  000FB4  6E17               	movwf	DelayMs@ms+1,c
  7488  000FB6  0EF4               	movlw	244
  7489  000FB8  6E16               	movwf	DelayMs@ms,c
  7490  000FBA  EC63  F00B         	call	_DelayMs	;wreg free
  7491                           
  7492                           ;input.c: 152: while(!done) {
  7493  000FBE  D02F               	goto	l5484
  7494  000FC0                     l5458:
  7495                           
  7496                           ;input.c: 155: ReadButtonState();
  7497  000FC0  EC2F  F003         	call	_ReadButtonState	;wreg free
  7498                           
  7499                           ;input.c: 157: if (buttonState[0] == 0x01) {
  7500  000FC4  043C               	decf	_buttonState,w,c	;volatile
  7501  000FC6  E106               	bnz	l5468
  7502                           
  7503                           ;input.c: 158: result++;
  7504  000FC8  2A2D               	incf	InputString@result,f,c
  7505                           
  7506                           ;input.c: 159: if (result > max) result = min;
  7507  000FCA  502D               	movf	InputString@result,w,c
  7508  000FCC  5C28               	subwf	InputString@max,w,c
  7509  000FCE  A0D8               	btfss	status,0,c
  7510  000FD0  C027  F02D         	movff	InputString@min,InputString@result
  7511  000FD4                     l5468:
  7512                           
  7513                           ;input.c: 160: }
  7514                           ;input.c: 161: if (buttonState[2] == 0x01) {
  7515  000FD4  043E               	decf	_buttonState+2,w,c	;volatile
  7516  000FD6  E107               	bnz	l5474
  7517                           
  7518                           ;input.c: 162: if (result > min) result--;
  7519  000FD8  502D               	movf	InputString@result,w,c
  7520  000FDA  5C27               	subwf	InputString@min,w,c
  7521  000FDC  E202               	bc	l789
  7522  000FDE  062D               	decf	InputString@result,f,c
  7523  000FE0  D002               	goto	l5474
  7524  000FE2                     l789:
  7525                           
  7526                           ;input.c: 163: else result = max;
  7527  000FE2  C028  F02D         	movff	InputString@max,InputString@result
  7528  000FE6                     l5474:
  7529                           
  7530                           ;input.c: 164: }
  7531                           ;input.c: 165: if (buttonState[1] == 0x01) done = 0x01;
  7532  000FE6  043D               	decf	_buttonState+1,w,c	;volatile
  7533  000FE8  E102               	bnz	l791
  7534  000FEA  0E01               	movlw	1
  7535  000FEC  6E2C               	movwf	InputString@done,c
  7536  000FEE                     l791:
  7537                           
  7538                           ;input.c: 168: if (currentNumber != result) {
  7539  000FEE  502B               	movf	InputString@currentNumber,w,c
  7540  000FF0  182D               	xorwf	InputString@result,w,c
  7541  000FF2  E015               	bz	l5484
  7542                           
  7543                           ;input.c: 169: DisplayText(2,1,stringArray[result]);
  7544  000FF4  0E01               	movlw	1
  7545  000FF6  6E17               	movwf	DisplayText@yStart,c
  7546  000FF8  502D               	movf	InputString@result,w,c
  7547  000FFA  0D04               	mullw	4
  7548  000FFC  50F3               	movf	prodl,w,c
  7549  000FFE  2429               	addwf	InputString@stringArray,w,c
  7550  001000  6E18               	movwf	DisplayText@gString,c
  7551  001002  50F4               	movf	prodh,w,c
  7552  001004  202A               	addwfc	InputString@stringArray+1,w,c
  7553  001006  6E19               	movwf	DisplayText@gString+1,c
  7554  001008  0E02               	movlw	2
  7555  00100A  ECAE  F003         	call	_DisplayText
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;input.c: 170: DelayMs(500);
  7559  00100E  0E01               	movlw	1
  7560  001010  6E17               	movwf	DelayMs@ms+1,c
  7561  001012  0EF4               	movlw	244
  7562  001014  6E16               	movwf	DelayMs@ms,c
  7563  001016  EC63  F00B         	call	_DelayMs	;wreg free
  7564                           
  7565                           ;input.c: 171: currentNumber = result;
  7566  00101A  C02D  F02B         	movff	InputString@result,InputString@currentNumber
  7567  00101E                     l5484:
  7568  00101E  502C               	movf	InputString@done,w,c
  7569  001020  E0CF               	bz	l5458
  7570                           
  7571                           ;input.c: 172: }
  7572                           ;input.c: 173: }
  7573                           ;input.c: 174: return result;
  7574  001022  502D               	movf	InputString@result,w,c
  7575  001024  0012               	return	
  7576  001026                     __end_of_InputString:
  7577                           	opt stack 0
  7578                           tblptru	equ	0xFF8
  7579                           tblptrh	equ	0xFF7
  7580                           tblptrl	equ	0xFF6
  7581                           tablat	equ	0xFF5
  7582                           prodh	equ	0xFF4
  7583                           prodl	equ	0xFF3
  7584                           intcon	equ	0xFF2
  7585                           intcon2	equ	0xFF1
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           indf1	equ	0xFE7
  7589                           fsr1h	equ	0xFE2
  7590                           fsr1l	equ	0xFE1
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           plusw2	equ	0xFDB
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _InputNumber *****************
  7600 ;; Defined at:
  7601 ;;		line 100 in file "input.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  istring         2   43[COMRAM] PTR const unsigned char 
  7604 ;;		 -> STR_32(5), STR_30(5), STR_29(4), STR_28(5), 
  7605 ;;  min             1   45[COMRAM] unsigned char 
  7606 ;;  max             1   46[COMRAM] unsigned char 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;  numberString    5    0[BANK0 ] unsigned char [5]
  7609 ;;  result          1    7[BANK0 ] unsigned char 
  7610 ;;  currentNumbe    1    6[BANK0 ] unsigned char 
  7611 ;;  done            1    5[BANK0 ] unsigned char 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      unsigned char 
  7614 ;; Registers used:
  7615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : F/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7621 ;;      Params:         4       0       0       0
  7622 ;;      Locals:         0       8       0       0
  7623 ;;      Temps:          0       0       0       0
  7624 ;;      Totals:         4       8       0       0
  7625 ;;Total ram usage:       12 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    9
  7628 ;; This function calls:
  7629 ;;		_DelayMs
  7630 ;;		_DisplayText
  7631 ;;		_NumberToString
  7632 ;;		_ReadButtonState
  7633 ;; This function is called by:
  7634 ;;		_InputTime
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text37
  7639  000C76                     __ptext37:
  7640                           	opt stack 0
  7641  000C76                     _InputNumber:
  7642                           	opt stack 19
  7643                           
  7644                           ;input.c: 101: unsigned char done = 0x00;
  7645                           
  7646                           ;incstack = 0
  7647  000C76  0100               	movlb	0	; () banked
  7648  000C78  6BB5               	clrf	InputNumber@done& (0+255),b
  7649                           
  7650                           ;input.c: 102: uint8_t numberString[5];
  7651                           ;input.c: 103: uint8_t result = min;
  7652  000C7A  C02E  F0B7         	movff	InputNumber@min,InputNumber@result
  7653                           
  7654                           ;input.c: 104: uint8_t currentNumber = 0xFF;
  7655  000C7E  69B6               	setf	InputNumber@currentNumber& (0+255),b
  7656                           
  7657                           ;input.c: 106: buttonState[0] = 0x00; buttonState[2] = 0x00; buttonState[1] = 0x00;
  7658  000C80  6A3C               	clrf	_buttonState,c	;volatile
  7659  000C82  6A3E               	clrf	_buttonState+2,c	;volatile
  7660  000C84  6A3D               	clrf	_buttonState+1,c	;volatile
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;input.c: 112: DisplayText(0,1,istring);
  7664  000C86  0E01               	movlw	1
  7665  000C88  6E17               	movwf	DisplayText@yStart,c
  7666  000C8A  C02D  F019         	movff	InputNumber@istring+1,DisplayText@gString+1
  7667  000C8E  C02C  F018         	movff	InputNumber@istring,DisplayText@gString
  7668  000C92  0E00               	movlw	0
  7669  000C94  ECAE  F003         	call	_DisplayText
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;input.c: 113: DelayMs(500);
  7673  000C98  0E01               	movlw	1
  7674  000C9A  6E17               	movwf	DelayMs@ms+1,c
  7675  000C9C  0EF4               	movlw	244
  7676  000C9E  6E16               	movwf	DelayMs@ms,c
  7677  000CA0  EC63  F00B         	call	_DelayMs	;wreg free
  7678                           
  7679                           ;input.c: 114: while(!done) {
  7680  000CA4  D036               	goto	l5446
  7681  000CA6                     l5418:
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;input.c: 117: ReadButtonState();
  7685  000CA6  EC2F  F003         	call	_ReadButtonState	;wreg free
  7686                           
  7687                           ;input.c: 119: if (buttonState[0] == 0x01) {
  7688  000CAA  043C               	decf	_buttonState,w,c	;volatile
  7689  000CAC  E107               	bnz	l5428
  7690                           
  7691                           ;input.c: 120: result++;
  7692  000CAE  0100               	movlb	0	; () banked
  7693  000CB0  2BB7               	incf	InputNumber@result& (0+255),f,b
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;input.c: 121: if (result > max) result = min;
  7697  000CB2  51B7               	movf	InputNumber@result& (0+255),w,b
  7698  000CB4  5C2F               	subwf	InputNumber@max,w,c
  7699  000CB6  A0D8               	btfss	status,0,c
  7700                           
  7701                           ; BSR set to: 0
  7702  000CB8  C02E  F0B7         	movff	InputNumber@min,InputNumber@result
  7703  000CBC                     l5428:
  7704                           
  7705                           ;input.c: 122: }
  7706                           ;input.c: 123: if (buttonState[2] == 0x01) {
  7707  000CBC  043E               	decf	_buttonState+2,w,c	;volatile
  7708  000CBE  E108               	bnz	l5434
  7709                           
  7710                           ;input.c: 124: if (result > min) result--;
  7711  000CC0  0100               	movlb	0	; () banked
  7712  000CC2  51B7               	movf	InputNumber@result& (0+255),w,b
  7713  000CC4  5C2E               	subwf	InputNumber@min,w,c
  7714  000CC6  E202               	bc	l776
  7715                           
  7716                           ; BSR set to: 0
  7717  000CC8  07B7               	decf	InputNumber@result& (0+255),f,b
  7718  000CCA  D002               	goto	l5434
  7719  000CCC                     l776:
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;input.c: 125: else result = max;
  7723  000CCC  C02F  F0B7         	movff	InputNumber@max,InputNumber@result
  7724  000CD0                     l5434:
  7725                           
  7726                           ;input.c: 126: }
  7727                           ;input.c: 127: if (buttonState[1] == 0x01) done = 0x01;
  7728  000CD0  043D               	decf	_buttonState+1,w,c	;volatile
  7729  000CD2  E103               	bnz	l778
  7730  000CD4  0E01               	movlw	1
  7731  000CD6  0100               	movlb	0	; () banked
  7732  000CD8  6FB5               	movwf	InputNumber@done& (0+255),b
  7733  000CDA                     l778:
  7734                           
  7735                           ;input.c: 130: if (currentNumber != result) {
  7736  000CDA  0100               	movlb	0	; () banked
  7737  000CDC  51B6               	movf	InputNumber@currentNumber& (0+255),w,b
  7738  000CDE  19B7               	xorwf	InputNumber@result& (0+255),w,b
  7739  000CE0  E018               	bz	l5446
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;input.c: 131: NumberToString(result, numberString);
  7743  000CE2  C0B7  F028         	movff	InputNumber@result,NumberToString@number
  7744  000CE6  6A29               	clrf	NumberToString@number+1,c
  7745  000CE8  0EB0               	movlw	low InputNumber@numberString
  7746  000CEA  6E2A               	movwf	NumberToString@strPtr,c
  7747  000CEC  ECA6  F002         	call	_NumberToString	;wreg free
  7748                           
  7749                           ;input.c: 132: DisplayText(4,1,numberString);
  7750  000CF0  0E01               	movlw	1
  7751  000CF2  6E17               	movwf	DisplayText@yStart,c
  7752  000CF4  6A19               	clrf	DisplayText@gString+1,c
  7753  000CF6  0100               	movlb	0	; () banked
  7754  000CF8  0EB0               	movlw	low InputNumber@numberString
  7755  000CFA  6E18               	movwf	DisplayText@gString,c
  7756  000CFC  0E04               	movlw	4
  7757  000CFE  ECAE  F003         	call	_DisplayText
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;input.c: 133: DelayMs(500);
  7761  000D02  0E01               	movlw	1
  7762  000D04  6E17               	movwf	DelayMs@ms+1,c
  7763  000D06  0EF4               	movlw	244
  7764  000D08  6E16               	movwf	DelayMs@ms,c
  7765  000D0A  EC63  F00B         	call	_DelayMs	;wreg free
  7766                           
  7767                           ;input.c: 134: currentNumber = result;
  7768  000D0E  C0B7  F0B6         	movff	InputNumber@result,InputNumber@currentNumber
  7769  000D12                     l5446:
  7770  000D12  0100               	movlb	0	; () banked
  7771  000D14  51B5               	movf	InputNumber@done& (0+255),w,b
  7772  000D16  E0C7               	bz	l5418
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;input.c: 135: }
  7776                           ;input.c: 136: }
  7777                           ;input.c: 137: return result;
  7778  000D18  51B7               	movf	InputNumber@result& (0+255),w,b
  7779                           
  7780                           ; BSR set to: 0
  7781  000D1A  0012               	return	
  7782  000D1C                     __end_of_InputNumber:
  7783                           	opt stack 0
  7784                           tblptru	equ	0xFF8
  7785                           tblptrh	equ	0xFF7
  7786                           tblptrl	equ	0xFF6
  7787                           tablat	equ	0xFF5
  7788                           prodh	equ	0xFF4
  7789                           prodl	equ	0xFF3
  7790                           intcon	equ	0xFF2
  7791                           intcon2	equ	0xFF1
  7792                           postinc0	equ	0xFEE
  7793                           wreg	equ	0xFE8
  7794                           indf1	equ	0xFE7
  7795                           fsr1h	equ	0xFE2
  7796                           fsr1l	equ	0xFE1
  7797                           indf2	equ	0xFDF
  7798                           postinc2	equ	0xFDE
  7799                           postdec2	equ	0xFDD
  7800                           plusw2	equ	0xFDB
  7801                           fsr2h	equ	0xFDA
  7802                           fsr2l	equ	0xFD9
  7803                           status	equ	0xFD8
  7804                           
  7805 ;; *************** function _ReadButtonState *****************
  7806 ;; Defined at:
  7807 ;;		line 177 in file "input.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;		None
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;		None
  7812 ;; Return value:  Size  Location     Type
  7813 ;;		None               void
  7814 ;; Registers used:
  7815 ;;		wreg, status,2, status,0
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7821 ;;      Params:         0       0       0       0
  7822 ;;      Locals:         0       0       0       0
  7823 ;;      Temps:          0       0       0       0
  7824 ;;      Totals:         0       0       0       0
  7825 ;;Total ram usage:        0 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    7
  7828 ;; This function calls:
  7829 ;;		Nothing
  7830 ;; This function is called by:
  7831 ;;		_ScrollText
  7832 ;;		_InputNumber
  7833 ;;		_InputString
  7834 ;;		_game_loop
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           	psect	text38
  7839  00065E                     __ptext38:
  7840                           	opt stack 0
  7841  00065E                     _ReadButtonState:
  7842                           	opt stack 22
  7843                           
  7844                           ;input.c: 178: if (buttonState[0] == 0x00 && PORTCbits.RC2 == 0x00) {
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;incstack = 0
  7848  00065E  663C               	tstfsz	_buttonState,c	;volatile
  7849  000660  D019               	goto	l5134
  7850  000662  B482               	btfsc	3970,2,c	;volatile
  7851  000664  D017               	goto	l5134
  7852  000666                     l5122:
  7853                           
  7854                           ;input.c: 179: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC2 == 1) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  7855  000666  6ACF               	clrf	4047,c	;volatile
  7856  000668  6ACE               	clrf	4046,c	;volatile
  7857  00066A  D002               	goto	l5126
  7858  00066C                     l799:
  7859  00066C  B482               	btfsc	3970,2,c	;volatile
  7860  00066E  D7FB               	goto	l5122
  7861  000670                     l5126:
  7862  000670  0EE8               	movlw	232
  7863  000672  5CCE               	subwf	4046,w,c	;volatile
  7864  000674  0E03               	movlw	3
  7865  000676  58CF               	subwfb	4047,w,c	;volatile
  7866  000678  E3F9               	bnc	l799
  7867  00067A                     l801:
  7868                           
  7869                           ;input.c: 180: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC2 == 0) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  7870  00067A  6ACF               	clrf	4047,c	;volatile
  7871  00067C  6ACE               	clrf	4046,c	;volatile
  7872  00067E  D002               	goto	l5130
  7873  000680                     l803:
  7874  000680  A482               	btfss	3970,2,c	;volatile
  7875  000682  D7FB               	goto	l801
  7876  000684                     l5130:
  7877  000684  0EE8               	movlw	232
  7878  000686  5CCE               	subwf	4046,w,c	;volatile
  7879  000688  0E03               	movlw	3
  7880  00068A  58CF               	subwfb	4047,w,c	;volatile
  7881  00068C  E3F9               	bnc	l803
  7882                           
  7883                           ;input.c: 181: buttonState[0] = 0x01;
  7884  00068E  0E01               	movlw	1
  7885  000690  6E3C               	movwf	_buttonState,c	;volatile
  7886                           
  7887                           ;input.c: 182: } else if (buttonState[0] == 0x01 && PORTCbits.RC2 == 0x01) {
  7888  000692  D00F               	goto	l806
  7889  000694                     l5134:
  7890  000694  043C               	decf	_buttonState,w,c	;volatile
  7891  000696  B4D8               	btfsc	status,2,c
  7892  000698  A482               	btfss	3970,2,c	;volatile
  7893  00069A  D00B               	goto	l806
  7894  00069C                     l5138:
  7895                           
  7896                           ;input.c: 183: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC2 == 0) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  7897  00069C  6ACF               	clrf	4047,c	;volatile
  7898  00069E  6ACE               	clrf	4046,c	;volatile
  7899  0006A0  D002               	goto	l5142
  7900  0006A2                     l809:
  7901  0006A2  A482               	btfss	3970,2,c	;volatile
  7902  0006A4  D7FB               	goto	l5138
  7903  0006A6                     l5142:
  7904  0006A6  0EE8               	movlw	232
  7905  0006A8  5CCE               	subwf	4046,w,c	;volatile
  7906  0006AA  0E03               	movlw	3
  7907  0006AC  58CF               	subwfb	4047,w,c	;volatile
  7908  0006AE  E3F9               	bnc	l809
  7909                           
  7910                           ;input.c: 184: buttonState[0] = 0x00;
  7911  0006B0  6A3C               	clrf	_buttonState,c	;volatile
  7912  0006B2                     l806:
  7913                           
  7914                           ;input.c: 185: }
  7915                           ;input.c: 186: if (buttonState[2] == 0x00 && PORTCbits.RC0 == 0x00) {
  7916  0006B2  663E               	tstfsz	_buttonState+2,c	;volatile
  7917  0006B4  D019               	goto	l5158
  7918  0006B6  B082               	btfsc	3970,0,c	;volatile
  7919  0006B8  D017               	goto	l5158
  7920  0006BA                     l5146:
  7921                           
  7922                           ;input.c: 187: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC0 == 1) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  7923  0006BA  6ACF               	clrf	4047,c	;volatile
  7924  0006BC  6ACE               	clrf	4046,c	;volatile
  7925  0006BE  D002               	goto	l5150
  7926  0006C0                     l814:
  7927  0006C0  B082               	btfsc	3970,0,c	;volatile
  7928  0006C2  D7FB               	goto	l5146
  7929  0006C4                     l5150:
  7930  0006C4  0EE8               	movlw	232
  7931  0006C6  5CCE               	subwf	4046,w,c	;volatile
  7932  0006C8  0E03               	movlw	3
  7933  0006CA  58CF               	subwfb	4047,w,c	;volatile
  7934  0006CC  E3F9               	bnc	l814
  7935  0006CE                     l816:
  7936                           
  7937                           ;input.c: 188: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC0 == 0) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  7938  0006CE  6ACF               	clrf	4047,c	;volatile
  7939  0006D0  6ACE               	clrf	4046,c	;volatile
  7940  0006D2  D002               	goto	l5154
  7941  0006D4                     l818:
  7942  0006D4  A082               	btfss	3970,0,c	;volatile
  7943  0006D6  D7FB               	goto	l816
  7944  0006D8                     l5154:
  7945  0006D8  0EE8               	movlw	232
  7946  0006DA  5CCE               	subwf	4046,w,c	;volatile
  7947  0006DC  0E03               	movlw	3
  7948  0006DE  58CF               	subwfb	4047,w,c	;volatile
  7949  0006E0  E3F9               	bnc	l818
  7950                           
  7951                           ;input.c: 189: buttonState[2] = 0x01;
  7952  0006E2  0E01               	movlw	1
  7953  0006E4  6E3E               	movwf	_buttonState+2,c	;volatile
  7954                           
  7955                           ;input.c: 190: } else if (buttonState[2] == 0x01 && PORTCbits.RC0 == 0x01) {
  7956  0006E6  D00F               	goto	l821
  7957  0006E8                     l5158:
  7958  0006E8  043E               	decf	_buttonState+2,w,c	;volatile
  7959  0006EA  B4D8               	btfsc	status,2,c
  7960  0006EC  A082               	btfss	3970,0,c	;volatile
  7961  0006EE  D00B               	goto	l821
  7962  0006F0                     l5162:
  7963                           
  7964                           ;input.c: 191: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC0 == 0) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  7965  0006F0  6ACF               	clrf	4047,c	;volatile
  7966  0006F2  6ACE               	clrf	4046,c	;volatile
  7967  0006F4  D002               	goto	l5166
  7968  0006F6                     l824:
  7969  0006F6  A082               	btfss	3970,0,c	;volatile
  7970  0006F8  D7FB               	goto	l5162
  7971  0006FA                     l5166:
  7972  0006FA  0EE8               	movlw	232
  7973  0006FC  5CCE               	subwf	4046,w,c	;volatile
  7974  0006FE  0E03               	movlw	3
  7975  000700  58CF               	subwfb	4047,w,c	;volatile
  7976  000702  E3F9               	bnc	l824
  7977                           
  7978                           ;input.c: 192: buttonState[2] = 0x00;
  7979  000704  6A3E               	clrf	_buttonState+2,c	;volatile
  7980  000706                     l821:
  7981                           
  7982                           ;input.c: 193: }
  7983                           ;input.c: 194: if (buttonState[1] == 0x00 && PORTCbits.RC1 == 0x00) {
  7984  000706  663D               	tstfsz	_buttonState+1,c	;volatile
  7985  000708  D019               	goto	l5182
  7986  00070A  B282               	btfsc	3970,1,c	;volatile
  7987  00070C  D017               	goto	l5182
  7988  00070E                     l5170:
  7989                           
  7990                           ;input.c: 195: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC1 == 1) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  7991  00070E  6ACF               	clrf	4047,c	;volatile
  7992  000710  6ACE               	clrf	4046,c	;volatile
  7993  000712  D002               	goto	l5174
  7994  000714                     l829:
  7995  000714  B282               	btfsc	3970,1,c	;volatile
  7996  000716  D7FB               	goto	l5170
  7997  000718                     l5174:
  7998  000718  0EE8               	movlw	232
  7999  00071A  5CCE               	subwf	4046,w,c	;volatile
  8000  00071C  0E03               	movlw	3
  8001  00071E  58CF               	subwfb	4047,w,c	;volatile
  8002  000720  E3F9               	bnc	l829
  8003  000722                     l831:
  8004                           
  8005                           ;input.c: 196: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC1 == 0) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  8006  000722  6ACF               	clrf	4047,c	;volatile
  8007  000724  6ACE               	clrf	4046,c	;volatile
  8008  000726  D002               	goto	l5178
  8009  000728                     l833:
  8010  000728  A282               	btfss	3970,1,c	;volatile
  8011  00072A  D7FB               	goto	l831
  8012  00072C                     l5178:
  8013  00072C  0EE8               	movlw	232
  8014  00072E  5CCE               	subwf	4046,w,c	;volatile
  8015  000730  0E03               	movlw	3
  8016  000732  58CF               	subwfb	4047,w,c	;volatile
  8017  000734  E3F9               	bnc	l833
  8018                           
  8019                           ;input.c: 197: buttonState[1] = 0x01;
  8020  000736  0E01               	movlw	1
  8021  000738  6E3D               	movwf	_buttonState+1,c	;volatile
  8022                           
  8023                           ;input.c: 198: } else if (buttonState[1] == 0x01 && PORTCbits.RC1 == 0x01) {
  8024  00073A  0C01               	retlw	1
  8025  00073C                     l5182:
  8026  00073C  043D               	decf	_buttonState+1,w,c	;volatile
  8027  00073E  B4D8               	btfsc	status,2,c
  8028  000740  A282               	btfss	3970,1,c	;volatile
  8029  000742  0012               	return	
  8030  000744                     l5186:
  8031                           
  8032                           ;input.c: 199: ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF))); while (TMR1 < 1000) if (PORTCb
      +                          its.RC1 == 0) ((void)(TMR1H=((0)>>8),TMR1L=((0)&0xFF)));
  8033  000744  6ACF               	clrf	4047,c	;volatile
  8034  000746  6ACE               	clrf	4046,c	;volatile
  8035  000748  D002               	goto	l5190
  8036  00074A                     l839:
  8037  00074A  A282               	btfss	3970,1,c	;volatile
  8038  00074C  D7FB               	goto	l5186
  8039  00074E                     l5190:
  8040  00074E  0EE8               	movlw	232
  8041  000750  5CCE               	subwf	4046,w,c	;volatile
  8042  000752  0E03               	movlw	3
  8043  000754  58CF               	subwfb	4047,w,c	;volatile
  8044  000756  E3F9               	bnc	l839
  8045                           
  8046                           ;input.c: 200: buttonState[1] = 0x00;
  8047  000758  6A3D               	clrf	_buttonState+1,c	;volatile
  8048  00075A  0012               	return	
  8049  00075C                     __end_of_ReadButtonState:
  8050                           	opt stack 0
  8051                           tblptru	equ	0xFF8
  8052                           tblptrh	equ	0xFF7
  8053                           tblptrl	equ	0xFF6
  8054                           tablat	equ	0xFF5
  8055                           prodh	equ	0xFF4
  8056                           prodl	equ	0xFF3
  8057                           intcon	equ	0xFF2
  8058                           intcon2	equ	0xFF1
  8059                           postinc0	equ	0xFEE
  8060                           wreg	equ	0xFE8
  8061                           indf1	equ	0xFE7
  8062                           fsr1h	equ	0xFE2
  8063                           fsr1l	equ	0xFE1
  8064                           indf2	equ	0xFDF
  8065                           postinc2	equ	0xFDE
  8066                           postdec2	equ	0xFDD
  8067                           plusw2	equ	0xFDB
  8068                           fsr2h	equ	0xFDA
  8069                           fsr2l	equ	0xFD9
  8070                           status	equ	0xFD8
  8071                           
  8072 ;; *************** function _NumberToString *****************
  8073 ;; Defined at:
  8074 ;;		line 247 in file "display.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  number          2   39[COMRAM] unsigned int 
  8077 ;;  strPtr          1   41[COMRAM] PTR unsigned char 
  8078 ;;		 -> InputNumber@numberString(5), tempString(4), 
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;  i               1   42[COMRAM] unsigned char 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;		None               void
  8083 ;; Registers used:
  8084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8085 ;; Tracked objects:
  8086 ;;		On entry : F/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8090 ;;      Params:         3       0       0       0
  8091 ;;      Locals:         1       0       0       0
  8092 ;;      Temps:          0       0       0       0
  8093 ;;      Totals:         4       0       0       0
  8094 ;;Total ram usage:        4 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    8
  8097 ;; This function calls:
  8098 ;;		___lwdiv
  8099 ;;		___lwmod
  8100 ;; This function is called by:
  8101 ;;		_TemperatureDisplay
  8102 ;;		_ScrollTime
  8103 ;;		_SecondsTime
  8104 ;;		_InputNumber
  8105 ;; This function uses a non-reentrant model
  8106 ;;
  8107                           
  8108                           	psect	text39
  8109  00054C                     __ptext39:
  8110                           	opt stack 0
  8111  00054C                     _NumberToString:
  8112                           	opt stack 21
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;display.c: 249: uint8_t i = 0;
  8116                           
  8117                           ;incstack = 0
  8118  00054C  6A2B               	clrf	NumberToString@i,c
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;display.c: 254: if (number / 1000) {
  8122  00054E  C028  F01C         	movff	NumberToString@number,___lwdiv@dividend
  8123  000552  C029  F01D         	movff	NumberToString@number+1,___lwdiv@dividend+1
  8124  000556  0E03               	movlw	3
  8125  000558  6E1F               	movwf	___lwdiv@divisor+1,c
  8126  00055A  0EE8               	movlw	232
  8127  00055C  6E1E               	movwf	___lwdiv@divisor,c
  8128  00055E  ECFE  F00B         	call	___lwdiv	;wreg free
  8129  000562  501D               	movf	?___lwdiv+1,w,c
  8130  000564  101C               	iorwf	?___lwdiv,w,c
  8131  000566  E017               	bz	l5212
  8132                           
  8133                           ;display.c: 255: strPtr[i] = (number / 1000) % 10 + '0';
  8134  000568  502A               	movf	NumberToString@strPtr,w,c
  8135  00056A  6ED9               	movwf	fsr2l,c
  8136  00056C  6ADA               	clrf	fsr2h,c
  8137  00056E  0E03               	movlw	3
  8138  000570  6E1F               	movwf	___lwdiv@divisor+1,c
  8139  000572  0EE8               	movlw	232
  8140  000574  6E1E               	movwf	___lwdiv@divisor,c
  8141  000576  C028  F01C         	movff	NumberToString@number,___lwdiv@dividend
  8142  00057A  C029  F01D         	movff	NumberToString@number+1,___lwdiv@dividend+1
  8143  00057E  ECFE  F00B         	call	___lwdiv	;wreg free
  8144  000582  C01C  F023         	movff	?___lwdiv,___lwmod@dividend
  8145  000586  C01D  F024         	movff	?___lwdiv+1,___lwmod@dividend+1
  8146  00058A  6A26               	clrf	___lwmod@divisor+1,c
  8147  00058C  0E0A               	movlw	10
  8148  00058E  6E25               	movwf	___lwmod@divisor,c
  8149  000590  EC67  F00C         	call	___lwmod	;wreg free
  8150                           
  8151                           ;display.c: 256: i++;
  8152  000594  D85F               	call	PL16	;call to abstracted procedure
  8153  000596                     l5212:
  8154                           
  8155                           ;display.c: 257: }
  8156                           ;display.c: 258: if ((number / 100) || (i != 0)) {
  8157  000596  C028  F01C         	movff	NumberToString@number,___lwdiv@dividend
  8158  00059A  C029  F01D         	movff	NumberToString@number+1,___lwdiv@dividend+1
  8159  00059E  6A1F               	clrf	___lwdiv@divisor+1,c
  8160  0005A0  0E64               	movlw	100
  8161  0005A2  6E1E               	movwf	___lwdiv@divisor,c
  8162  0005A4  ECFE  F00B         	call	___lwdiv	;wreg free
  8163  0005A8  501D               	movf	?___lwdiv+1,w,c
  8164  0005AA  101C               	iorwf	?___lwdiv,w,c
  8165  0005AC  E102               	bnz	l5216
  8166  0005AE  502B               	movf	NumberToString@i,w,c
  8167  0005B0  E017               	bz	l5220
  8168  0005B2                     l5216:
  8169                           
  8170                           ;display.c: 259: strPtr[i] = (number / 100) % 10 + '0';
  8171  0005B2  502A               	movf	NumberToString@strPtr,w,c
  8172  0005B4  242B               	addwf	NumberToString@i,w,c
  8173  0005B6  6ED9               	movwf	fsr2l,c
  8174  0005B8  6ADA               	clrf	fsr2h,c
  8175  0005BA  6A1F               	clrf	___lwdiv@divisor+1,c
  8176  0005BC  0E64               	movlw	100
  8177  0005BE  6E1E               	movwf	___lwdiv@divisor,c
  8178  0005C0  C028  F01C         	movff	NumberToString@number,___lwdiv@dividend
  8179  0005C4  C029  F01D         	movff	NumberToString@number+1,___lwdiv@dividend+1
  8180  0005C8  ECFE  F00B         	call	___lwdiv	;wreg free
  8181  0005CC  C01C  F023         	movff	?___lwdiv,___lwmod@dividend
  8182  0005D0  C01D  F024         	movff	?___lwdiv+1,___lwmod@dividend+1
  8183  0005D4  6A26               	clrf	___lwmod@divisor+1,c
  8184  0005D6  0E0A               	movlw	10
  8185  0005D8  6E25               	movwf	___lwmod@divisor,c
  8186  0005DA  EC67  F00C         	call	___lwmod	;wreg free
  8187                           
  8188                           ;display.c: 260: i++;
  8189  0005DE  D83A               	call	PL16	;call to abstracted procedure
  8190  0005E0                     l5220:
  8191                           
  8192                           ;display.c: 261: }
  8193                           ;display.c: 262: if ((number / 10) || (i != 0)) {
  8194  0005E0  C028  F01C         	movff	NumberToString@number,___lwdiv@dividend
  8195  0005E4  C029  F01D         	movff	NumberToString@number+1,___lwdiv@dividend+1
  8196  0005E8  6A1F               	clrf	___lwdiv@divisor+1,c
  8197  0005EA  0E0A               	movlw	10
  8198  0005EC  6E1E               	movwf	___lwdiv@divisor,c
  8199  0005EE  ECFE  F00B         	call	___lwdiv	;wreg free
  8200  0005F2  501D               	movf	?___lwdiv+1,w,c
  8201  0005F4  101C               	iorwf	?___lwdiv,w,c
  8202  0005F6  E102               	bnz	l5224
  8203  0005F8  502B               	movf	NumberToString@i,w,c
  8204  0005FA  E017               	bz	l5228
  8205  0005FC                     l5224:
  8206                           
  8207                           ;display.c: 263: strPtr[i] = (number / 10) % 10 + '0';
  8208  0005FC  502A               	movf	NumberToString@strPtr,w,c
  8209  0005FE  242B               	addwf	NumberToString@i,w,c
  8210  000600  6ED9               	movwf	fsr2l,c
  8211  000602  6ADA               	clrf	fsr2h,c
  8212  000604  6A1F               	clrf	___lwdiv@divisor+1,c
  8213  000606  0E0A               	movlw	10
  8214  000608  6E1E               	movwf	___lwdiv@divisor,c
  8215  00060A  C028  F01C         	movff	NumberToString@number,___lwdiv@dividend
  8216  00060E  C029  F01D         	movff	NumberToString@number+1,___lwdiv@dividend+1
  8217  000612  ECFE  F00B         	call	___lwdiv	;wreg free
  8218  000616  C01C  F023         	movff	?___lwdiv,___lwmod@dividend
  8219  00061A  C01D  F024         	movff	?___lwdiv+1,___lwmod@dividend+1
  8220  00061E  6A26               	clrf	___lwmod@divisor+1,c
  8221  000620  0E0A               	movlw	10
  8222  000622  6E25               	movwf	___lwmod@divisor,c
  8223  000624  EC67  F00C         	call	___lwmod	;wreg free
  8224                           
  8225                           ;display.c: 264: i++;
  8226  000628  D815               	call	PL16	;call to abstracted procedure
  8227  00062A                     l5228:
  8228                           
  8229                           ;display.c: 265: }
  8230                           ;display.c: 267: strPtr[i] = number % 10 + '0';
  8231  00062A  502A               	movf	NumberToString@strPtr,w,c
  8232  00062C  242B               	addwf	NumberToString@i,w,c
  8233  00062E  6ED9               	movwf	fsr2l,c
  8234  000630  6ADA               	clrf	fsr2h,c
  8235  000632  C028  F023         	movff	NumberToString@number,___lwmod@dividend
  8236  000636  C029  F024         	movff	NumberToString@number+1,___lwmod@dividend+1
  8237  00063A  6A26               	clrf	___lwmod@divisor+1,c
  8238  00063C  0E0A               	movlw	10
  8239  00063E  6E25               	movwf	___lwmod@divisor,c
  8240  000640  EC67  F00C         	call	___lwmod	;wreg free
  8241                           
  8242                           ;display.c: 268: i++;
  8243  000644  D807               	call	PL16	;call to abstracted procedure
  8244                           
  8245                           ;display.c: 269: strPtr[i] = '\0';
  8246  000646  502A               	movf	NumberToString@strPtr,w,c
  8247  000648  242B               	addwf	NumberToString@i,w,c
  8248  00064A  6ED9               	movwf	fsr2l,c
  8249  00064C  6ADA               	clrf	fsr2h,c
  8250  00064E  0E00               	movlw	0
  8251  000650  6EDF               	movwf	indf2,c
  8252  000652  0C00               	retlw	0
  8253  000654                     __end_of_NumberToString:
  8254                           	opt stack 0
  8255  000654                     PL16:
  8256                           	opt stack 21
  8257  000654  5023               	movf	?___lwmod,w,c
  8258  000656  0F30               	addlw	48
  8259  000658  6EDF               	movwf	indf2,c
  8260  00065A  2A2B               	incf	NumberToString@i,f,c
  8261  00065C  0012               	return	
  8262  00065E                     __end_ofPL16:
  8263                           	opt stack 0
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           intcon	equ	0xFF2
  8271                           intcon2	equ	0xFF1
  8272                           postinc0	equ	0xFEE
  8273                           wreg	equ	0xFE8
  8274                           indf1	equ	0xFE7
  8275                           fsr1h	equ	0xFE2
  8276                           fsr1l	equ	0xFE1
  8277                           indf2	equ	0xFDF
  8278                           postinc2	equ	0xFDE
  8279                           postdec2	equ	0xFDD
  8280                           plusw2	equ	0xFDB
  8281                           fsr2h	equ	0xFDA
  8282                           fsr2l	equ	0xFD9
  8283                           status	equ	0xFD8
  8284                           
  8285 ;; *************** function ___lwmod *****************
  8286 ;; Defined at:
  8287 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;  dividend        2   34[COMRAM] unsigned int 
  8290 ;;  divisor         2   36[COMRAM] unsigned int 
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;  counter         1   38[COMRAM] unsigned char 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  2   34[COMRAM] unsigned int 
  8295 ;; Registers used:
  8296 ;;		wreg, status,2, status,0
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8302 ;;      Params:         4       0       0       0
  8303 ;;      Locals:         1       0       0       0
  8304 ;;      Temps:          0       0       0       0
  8305 ;;      Totals:         5       0       0       0
  8306 ;;Total ram usage:        5 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    7
  8309 ;; This function calls:
  8310 ;;		Nothing
  8311 ;; This function is called by:
  8312 ;;		_NumberToString
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           	psect	text40
  8317  0018CE                     __ptext40:
  8318                           	opt stack 0
  8319  0018CE                     ___lwmod:
  8320                           	opt stack 21
  8321                           
  8322                           ;incstack = 0
  8323  0018CE  5026               	movf	___lwmod@divisor+1,w,c
  8324  0018D0  1025               	iorwf	___lwmod@divisor,w,c
  8325  0018D2  E017               	bz	l1572
  8326  0018D4  0E01               	movlw	1
  8327  0018D6  6E27               	movwf	___lwmod@counter,c
  8328  0018D8  D004               	goto	l4964
  8329  0018DA                     l4962:
  8330  0018DA  90D8               	bcf	status,0,c
  8331  0018DC  3625               	rlcf	___lwmod@divisor,f,c
  8332  0018DE  3626               	rlcf	___lwmod@divisor+1,f,c
  8333  0018E0  2A27               	incf	___lwmod@counter,f,c
  8334  0018E2                     l4964:
  8335  0018E2  AE26               	btfss	___lwmod@divisor+1,7,c
  8336  0018E4  D7FA               	goto	l4962
  8337  0018E6                     l4966:
  8338  0018E6  5025               	movf	___lwmod@divisor,w,c
  8339  0018E8  5C23               	subwf	___lwmod@dividend,w,c
  8340  0018EA  5026               	movf	___lwmod@divisor+1,w,c
  8341  0018EC  5824               	subwfb	___lwmod@dividend+1,w,c
  8342  0018EE  E304               	bnc	l4970
  8343  0018F0  5025               	movf	___lwmod@divisor,w,c
  8344  0018F2  5E23               	subwf	___lwmod@dividend,f,c
  8345  0018F4  5026               	movf	___lwmod@divisor+1,w,c
  8346  0018F6  5A24               	subwfb	___lwmod@dividend+1,f,c
  8347  0018F8                     l4970:
  8348  0018F8  90D8               	bcf	status,0,c
  8349  0018FA  3226               	rrcf	___lwmod@divisor+1,f,c
  8350  0018FC  3225               	rrcf	___lwmod@divisor,f,c
  8351  0018FE  2E27               	decfsz	___lwmod@counter,f,c
  8352  001900  D7F2               	goto	l4966
  8353  001902                     l1572:
  8354  001902  C023  F023         	movff	___lwmod@dividend,?___lwmod
  8355  001906  C024  F024         	movff	___lwmod@dividend+1,?___lwmod+1
  8356  00190A  0012               	return	
  8357  00190C                     __end_of___lwmod:
  8358                           	opt stack 0
  8359                           tblptru	equ	0xFF8
  8360                           tblptrh	equ	0xFF7
  8361                           tblptrl	equ	0xFF6
  8362                           tablat	equ	0xFF5
  8363                           prodh	equ	0xFF4
  8364                           prodl	equ	0xFF3
  8365                           intcon	equ	0xFF2
  8366                           intcon2	equ	0xFF1
  8367                           postinc0	equ	0xFEE
  8368                           wreg	equ	0xFE8
  8369                           indf1	equ	0xFE7
  8370                           fsr1h	equ	0xFE2
  8371                           fsr1l	equ	0xFE1
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           plusw2	equ	0xFDB
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function _DisplayText *****************
  8381 ;; Defined at:
  8382 ;;		line 114 in file "display.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  xStart          1    wreg     unsigned char 
  8385 ;;  yStart          1   22[COMRAM] unsigned char 
  8386 ;;  gString         2   23[COMRAM] PTR const unsigned char 
  8387 ;;		 -> InputNumber@numberString(5), string_DONE(5), STR_33(4), dow_str(32), 
  8388 ;;		 -> STR_32(5), STR_31(4), month_str(52), STR_30(5), 
  8389 ;;		 -> STR_29(4), STR_28(5), tempString(4), dateTime.dstring(6), 
  8390 ;;		 -> dateTime.tstring(6), dateTime(20), 
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;  xStart          1   28[COMRAM] unsigned char 
  8393 ;;  currentChar     2   33[COMRAM] int 
  8394 ;;  char_index      2   31[COMRAM] unsigned int 
  8395 ;;  x               1   35[COMRAM] unsigned char 
  8396 ;;  char_width      1   30[COMRAM] unsigned char 
  8397 ;;  string_index    1   29[COMRAM] unsigned char 
  8398 ;; Return value:  Size  Location     Type
  8399 ;;		None               void
  8400 ;; Registers used:
  8401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : F/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8407 ;;      Params:         3       0       0       0
  8408 ;;      Locals:         8       0       0       0
  8409 ;;      Temps:          3       0       0       0
  8410 ;;      Totals:        14       0       0       0
  8411 ;;Total ram usage:       14 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    8
  8414 ;; This function calls:
  8415 ;;		_ClearDisplay
  8416 ;; This function is called by:
  8417 ;;		_TimeNumerical
  8418 ;;		_TemperatureDisplay
  8419 ;;		_SecondsTime
  8420 ;;		_InputTime
  8421 ;;		_InputNumber
  8422 ;;		_InputString
  8423 ;; This function uses a non-reentrant model
  8424 ;;
  8425                           
  8426                           	psect	text41
  8427  00075C                     __ptext41:
  8428                           	opt stack 0
  8429  00075C                     _DisplayText:
  8430                           	opt stack 21
  8431                           
  8432                           ;incstack = 0
  8433                           ;DisplayText@xStart stored from wreg
  8434  00075C  6E1D               	movwf	DisplayText@xStart,c
  8435                           
  8436                           ;display.c: 115: int currentChar = 0;
  8437  00075E  6A22               	clrf	DisplayText@currentChar,c
  8438  000760  6A23               	clrf	DisplayText@currentChar+1,c
  8439                           
  8440                           ;display.c: 116: uint8_t string_index = 0;
  8441  000762  6A1E               	clrf	DisplayText@string_index,c
  8442                           
  8443                           ;display.c: 117: uint16_t char_index = 0;
  8444  000764  6A20               	clrf	DisplayText@char_index,c
  8445  000766  6A21               	clrf	DisplayText@char_index+1,c
  8446                           
  8447                           ;display.c: 118: uint8_t char_width = 0;
  8448  000768  6A1F               	clrf	DisplayText@char_width,c
  8449                           
  8450                           ;display.c: 121: ClearDisplay();
  8451  00076A  EC33  F00E         	call	_ClearDisplay	;wreg free
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;display.c: 123: for (x = xStart; x < 15; x++) {
  8455  00076E  C01D  F024         	movff	DisplayText@xStart,DisplayText@x
  8456  000772                     l5084:
  8457                           
  8458                           ; BSR set to: 0
  8459  000772  0E0E               	movlw	14
  8460  000774  6424               	cpfsgt	DisplayText@x,c
  8461  000776  D001               	goto	l265
  8462  000778  0C0E               	retlw	14
  8463  00077A                     l265:
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;display.c: 124: if (char_width == 0) {
  8467  00077A  661F               	tstfsz	DisplayText@char_width,c
  8468  00077C  D042               	goto	l5102
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;display.c: 125: currentChar = gString[string_index++];
  8472  00077E  501E               	movf	DisplayText@string_index,w,c
  8473  000780  2418               	addwf	DisplayText@gString,w,c
  8474  000782  6E1A               	movwf	??_DisplayText& (0+255),c
  8475  000784  0E00               	movlw	0
  8476  000786  2019               	addwfc	DisplayText@gString+1,w,c
  8477  000788  6E1B               	movwf	(??_DisplayText+1)& (0+255),c
  8478  00078A  C01A  FFF6         	movff	??_DisplayText,tblptrl
  8479  00078E  C01B  FFF7         	movff	??_DisplayText+1,tblptrh
  8480  000792  6AF8               	clrf	tblptru,c
  8481  000794  0E02               	movlw	(high __ramtop+-1)
  8482  000796  64F7               	cpfsgt	tblptrh,c
  8483  000798  D003               	bra	u4557
  8484  00079A  0008               	tblrd		*
  8485  00079C  50F5               	movf	tablat,w,c
  8486  00079E  D005               	bra	u4550
  8487  0007A0                     u4557:
  8488  0007A0  CFF6 FFE1          	movff	tblptrl,fsr1l
  8489  0007A4  CFF7 FFE2          	movff	tblptrh,fsr1h
  8490  0007A8  50E7               	movf	indf1,w,c
  8491  0007AA                     u4550:
  8492  0007AA  6E22               	movwf	DisplayText@currentChar,c
  8493  0007AC  6A23               	clrf	DisplayText@currentChar+1,c
  8494  0007AE  2A1E               	incf	DisplayText@string_index,f,c
  8495                           
  8496                           ;display.c: 126: if (currentChar == '\0') {
  8497  0007B0  5023               	movf	DisplayText@currentChar+1,w,c
  8498  0007B2  1022               	iorwf	DisplayText@currentChar,w,c
  8499  0007B4  E105               	bnz	l5098
  8500                           
  8501                           ;display.c: 127: char_width = 14;
  8502  0007B6  0E0E               	movlw	14
  8503  0007B8  6E1F               	movwf	DisplayText@char_width,c
  8504                           
  8505                           ;display.c: 128: char_index = 0;
  8506  0007BA  6A20               	clrf	DisplayText@char_index,c
  8507  0007BC  6A21               	clrf	DisplayText@char_index+1,c
  8508                           
  8509                           ;display.c: 129: } else {
  8510  0007BE  D021               	goto	l5102
  8511  0007C0                     l5098:
  8512                           
  8513                           ;display.c: 130: char_index = (currentChar - 32)*4;
  8514  0007C0  C022  F01A         	movff	DisplayText@currentChar,??_DisplayText
  8515  0007C4  C023  F01B         	movff	DisplayText@currentChar+1,??_DisplayText+1
  8516  0007C8  90D8               	bcf	status,0,c
  8517  0007CA  361A               	rlcf	??_DisplayText,f,c
  8518  0007CC  361B               	rlcf	??_DisplayText+1,f,c
  8519  0007CE  90D8               	bcf	status,0,c
  8520  0007D0  361A               	rlcf	??_DisplayText,f,c
  8521  0007D2  361B               	rlcf	??_DisplayText+1,f,c
  8522  0007D4  0E80               	movlw	128
  8523  0007D6  241A               	addwf	??_DisplayText,w,c
  8524  0007D8  6E20               	movwf	DisplayText@char_index,c
  8525  0007DA  0EFF               	movlw	255
  8526  0007DC  201B               	addwfc	??_DisplayText+1,w,c
  8527  0007DE  6E21               	movwf	DisplayText@char_index+1,c
  8528                           
  8529                           ;display.c: 131: char_width = font3_1[ char_index + 3] + 1;
  8530  0007E0  0E03               	movlw	3
  8531  0007E2  2420               	addwf	DisplayText@char_index,w,c
  8532  0007E4  6E1A               	movwf	??_DisplayText& (0+255),c
  8533  0007E6  0E00               	movlw	0
  8534  0007E8  2021               	addwfc	DisplayText@char_index+1,w,c
  8535  0007EA  6E1B               	movwf	(??_DisplayText+1)& (0+255),c
  8536  0007EC  0EED               	movlw	low _font3_1
  8537  0007EE  241A               	addwf	??_DisplayText,w,c
  8538  0007F0  6EF6               	movwf	tblptrl,c
  8539  0007F2  0E3D               	movlw	high _font3_1
  8540  0007F4  201B               	addwfc	??_DisplayText+1,w,c
  8541  0007F6  6EF7               	movwf	tblptrh,c
  8542  0007F8                     	if	0	;There are less than 3 active tblptr bytes
  8543  0007F8                     	endif
  8544  0007F8  0008               	tblrd		*
  8545  0007FA  CFF5 F01C          	movff	tablat,??_DisplayText+2
  8546  0007FE  281C               	incf	??_DisplayText+2,w,c
  8547  000800  6E1F               	movwf	DisplayText@char_width,c
  8548  000802                     l5102:
  8549                           
  8550                           ;display.c: 132: }
  8551                           ;display.c: 133: }
  8552                           ;display.c: 134: display.cols[x] = (font3_1[ char_index ] << yStart) & 0xFF;
  8553  000802  5024               	movf	DisplayText@x,w,c
  8554  000804  0100               	movlb	0	; () banked
  8555  000806  0F81               	addlw	low _display	;volatile
  8556  000808  6ED9               	movwf	fsr2l,c
  8557  00080A  6ADA               	clrf	fsr2h,c
  8558  00080C  C017  F01A         	movff	DisplayText@yStart,??_DisplayText
  8559  000810  0EED               	movlw	low _font3_1
  8560  000812  2420               	addwf	DisplayText@char_index,w,c
  8561  000814  6EF6               	movwf	tblptrl,c
  8562  000816  0E3D               	movlw	high _font3_1
  8563  000818  2021               	addwfc	DisplayText@char_index+1,w,c
  8564  00081A  6EF7               	movwf	tblptrh,c
  8565  00081C                     	if	0	;There are less than 3 active tblptr bytes
  8566  00081C                     	endif
  8567  00081C  0008               	tblrd		*
  8568  00081E  CFF5 F01B          	movff	tablat,??_DisplayText+1
  8569  000822  2A1A               	incf	??_DisplayText,f,c
  8570  000824  D002               	goto	u4574
  8571  000826                     u4575:
  8572  000826  90D8               	bcf	status,0,c
  8573  000828  361B               	rlcf	??_DisplayText+1,f,c
  8574  00082A                     u4574:
  8575  00082A  2E1A               	decfsz	??_DisplayText,f,c
  8576  00082C  D7FC               	goto	u4575
  8577  00082E  501B               	movf	??_DisplayText+1,w,c
  8578  000830  6EDF               	movwf	indf2,c
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;display.c: 136: if (currentChar != '\0') {
  8582  000832  5023               	movf	DisplayText@currentChar+1,w,c
  8583  000834  1022               	iorwf	DisplayText@currentChar,w,c
  8584  000836  E008               	bz	l5110
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;display.c: 137: if (char_width > 2) {
  8588  000838  0E02               	movlw	2
  8589  00083A  641F               	cpfsgt	DisplayText@char_width,c
  8590  00083C  D003               	goto	l271
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;display.c: 138: ++char_index;
  8594  00083E  4A20               	infsnz	DisplayText@char_index,f,c
  8595  000840  2A21               	incf	DisplayText@char_index+1,f,c
  8596                           
  8597                           ;display.c: 139: } else {
  8598  000842  D002               	goto	l5110
  8599  000844                     l271:
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;display.c: 140: char_index = 0;
  8603  000844  6A20               	clrf	DisplayText@char_index,c
  8604  000846  6A21               	clrf	DisplayText@char_index+1,c
  8605  000848                     l5110:
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;display.c: 141: }
  8609                           ;display.c: 142: }
  8610                           ;display.c: 143: --char_width;
  8611  000848  061F               	decf	DisplayText@char_width,f,c
  8612  00084A  2A24               	incf	DisplayText@x,f,c
  8613  00084C  D792               	goto	l5084
  8614  00084E                     __end_of_DisplayText:
  8615                           	opt stack 0
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           intcon	equ	0xFF2
  8623                           intcon2	equ	0xFF1
  8624                           postinc0	equ	0xFEE
  8625                           wreg	equ	0xFE8
  8626                           indf1	equ	0xFE7
  8627                           fsr1h	equ	0xFE2
  8628                           fsr1l	equ	0xFE1
  8629                           indf2	equ	0xFDF
  8630                           postinc2	equ	0xFDE
  8631                           postdec2	equ	0xFDD
  8632                           plusw2	equ	0xFDB
  8633                           fsr2h	equ	0xFDA
  8634                           fsr2l	equ	0xFD9
  8635                           status	equ	0xFD8
  8636                           
  8637 ;; *************** function _DelayMs *****************
  8638 ;; Defined at:
  8639 ;;		line 62 in file "delay.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  ms              2   21[COMRAM] int 
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;  time            4   31[COMRAM] unsigned long 
  8644 ;; Return value:  Size  Location     Type
  8645 ;;		None               void
  8646 ;; Registers used:
  8647 ;;		wreg, status,2, status,0
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8653 ;;      Params:         2       0       0       0
  8654 ;;      Locals:         4       0       0       0
  8655 ;;      Temps:          8       0       0       0
  8656 ;;      Totals:        14       0       0       0
  8657 ;;Total ram usage:       14 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    7
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_ScrollText
  8664 ;;		_InputTime
  8665 ;;		_InputNumber
  8666 ;;		_InputString
  8667 ;;		_game_loop
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           	psect	text42
  8672  0016C6                     __ptext42:
  8673                           	opt stack 0
  8674  0016C6                     _DelayMs:
  8675                           	opt stack 22
  8676                           
  8677                           ;delay.c: 63: unsigned long time = milliseconds;
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;incstack = 0
  8681  0016C6  C034  F020         	movff	_milliseconds,DelayMs@time	;volatile
  8682  0016CA  C035  F021         	movff	_milliseconds+1,DelayMs@time+1	;volatile
  8683  0016CE  C036  F022         	movff	_milliseconds+2,DelayMs@time+2	;volatile
  8684  0016D2  C037  F023         	movff	_milliseconds+3,DelayMs@time+3	;volatile
  8685  0016D6                     l5116:
  8686  0016D6  C016  F018         	movff	DelayMs@ms,??_DelayMs
  8687  0016DA  C017  F019         	movff	DelayMs@ms+1,??_DelayMs+1
  8688  0016DE  0E00               	movlw	0
  8689  0016E0  BE19               	btfsc	(??_DelayMs+1)& (0+255),7,c
  8690  0016E2  0EFF               	movlw	255
  8691  0016E4  6E1A               	movwf	(??_DelayMs+2)& (0+255),c
  8692  0016E6  6E1B               	movwf	(??_DelayMs+3)& (0+255),c
  8693  0016E8  5020               	movf	DelayMs@time,w,c
  8694  0016EA  5C34               	subwf	_milliseconds,w,c	;volatile
  8695  0016EC  6E1C               	movwf	(??_DelayMs+4)& (0+255),c
  8696  0016EE  5021               	movf	DelayMs@time+1,w,c
  8697  0016F0  5835               	subwfb	_milliseconds+1,w,c	;volatile
  8698  0016F2  6E1D               	movwf	(??_DelayMs+5)& (0+255),c
  8699  0016F4  5022               	movf	DelayMs@time+2,w,c
  8700  0016F6  5836               	subwfb	_milliseconds+2,w,c	;volatile
  8701  0016F8  6E1E               	movwf	(??_DelayMs+6)& (0+255),c
  8702  0016FA  5023               	movf	DelayMs@time+3,w,c
  8703  0016FC  5837               	subwfb	_milliseconds+3,w,c	;volatile
  8704  0016FE  6E1F               	movwf	(??_DelayMs+7)& (0+255),c
  8705  001700  5018               	movf	??_DelayMs,w,c
  8706  001702  5C1C               	subwf	??_DelayMs+4,w,c
  8707  001704  5019               	movf	??_DelayMs+1,w,c
  8708  001706  581D               	subwfb	??_DelayMs+5,w,c
  8709  001708  501A               	movf	??_DelayMs+2,w,c
  8710  00170A  581E               	subwfb	??_DelayMs+6,w,c
  8711  00170C  501B               	movf	??_DelayMs+3,w,c
  8712  00170E  581F               	subwfb	??_DelayMs+7,w,c
  8713  001710  B0D8               	btfsc	status,0,c
  8714  001712  0012               	return	
  8715  001714  D7E0               	goto	l5116
  8716  001716                     __end_of_DelayMs:
  8717                           	opt stack 0
  8718                           tblptru	equ	0xFF8
  8719                           tblptrh	equ	0xFF7
  8720                           tblptrl	equ	0xFF6
  8721                           tablat	equ	0xFF5
  8722                           prodh	equ	0xFF4
  8723                           prodl	equ	0xFF3
  8724                           intcon	equ	0xFF2
  8725                           intcon2	equ	0xFF1
  8726                           postinc0	equ	0xFEE
  8727                           wreg	equ	0xFE8
  8728                           indf1	equ	0xFE7
  8729                           fsr1h	equ	0xFE2
  8730                           fsr1l	equ	0xFE1
  8731                           indf2	equ	0xFDF
  8732                           postinc2	equ	0xFDE
  8733                           postdec2	equ	0xFDD
  8734                           plusw2	equ	0xFDB
  8735                           fsr2h	equ	0xFDA
  8736                           fsr2l	equ	0xFD9
  8737                           status	equ	0xFD8
  8738                           
  8739 ;; *************** function _ExternalHardware *****************
  8740 ;; Defined at:
  8741 ;;		line 63 in file "system.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;		None
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;		None
  8746 ;; Return value:  Size  Location     Type
  8747 ;;		None               void
  8748 ;; Registers used:
  8749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8755 ;;      Params:         0       0       0       0
  8756 ;;      Locals:         0       0       0       0
  8757 ;;      Temps:          0       0       0       0
  8758 ;;      Totals:         0       0       0       0
  8759 ;;Total ram usage:        0 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:   13
  8762 ;; This function calls:
  8763 ;;		_DisplayInit
  8764 ;;		_InitI2C
  8765 ;;		_LM75Init
  8766 ;;		_RTCInit
  8767 ;; This function is called by:
  8768 ;;		_main
  8769 ;; This function uses a non-reentrant model
  8770 ;;
  8771                           
  8772                           	psect	text43
  8773  001D26                     __ptext43:
  8774                           	opt stack 0
  8775  001D26                     _ExternalHardware:
  8776                           	opt stack 17
  8777                           
  8778                           ;system.c: 65: DisplayInit();
  8779                           
  8780                           ;incstack = 0
  8781  001D26  EC76  F00E         	call	_DisplayInit	;wreg free
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;system.c: 66: InitI2C();
  8785  001D2A  ECA9  F00E         	call	_InitI2C	;wreg free
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;system.c: 67: RTCInit();
  8789  001D2E  EC27  F00E         	call	_RTCInit	;wreg free
  8790                           
  8791                           ;system.c: 68: LM75Init();
  8792  001D32  EFCE  F00D         	goto	_LM75Init	;wreg free
  8793  001D36                     __end_of_ExternalHardware:
  8794                           	opt stack 0
  8795                           tblptru	equ	0xFF8
  8796                           tblptrh	equ	0xFF7
  8797                           tblptrl	equ	0xFF6
  8798                           tablat	equ	0xFF5
  8799                           prodh	equ	0xFF4
  8800                           prodl	equ	0xFF3
  8801                           intcon	equ	0xFF2
  8802                           intcon2	equ	0xFF1
  8803                           postinc0	equ	0xFEE
  8804                           wreg	equ	0xFE8
  8805                           indf1	equ	0xFE7
  8806                           fsr1h	equ	0xFE2
  8807                           fsr1l	equ	0xFE1
  8808                           indf2	equ	0xFDF
  8809                           postinc2	equ	0xFDE
  8810                           postdec2	equ	0xFDD
  8811                           plusw2	equ	0xFDB
  8812                           fsr2h	equ	0xFDA
  8813                           fsr2l	equ	0xFD9
  8814                           status	equ	0xFD8
  8815                           
  8816 ;; *************** function _RTCInit *****************
  8817 ;; Defined at:
  8818 ;;		line 38 in file "DS1307.c"
  8819 ;; Parameters:    Size  Location     Type
  8820 ;;		None
  8821 ;; Auto vars:     Size  Location     Type
  8822 ;;		None
  8823 ;; Return value:  Size  Location     Type
  8824 ;;                  1    wreg      unsigned char 
  8825 ;; Registers used:
  8826 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8827 ;; Tracked objects:
  8828 ;;		On entry : F/0
  8829 ;;		On exit  : 0/0
  8830 ;;		Unchanged: 0/0
  8831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8832 ;;      Params:         0       0       0       0
  8833 ;;      Locals:         0       0       0       0
  8834 ;;      Temps:          0       0       0       0
  8835 ;;      Totals:         0       0       0       0
  8836 ;;Total ram usage:        0 bytes
  8837 ;; Hardware stack levels used:    1
  8838 ;; Hardware stack levels required when called:   12
  8839 ;; This function calls:
  8840 ;;		_AckPolling
  8841 ;;		_RTCGetDateTime
  8842 ;; This function is called by:
  8843 ;;		_ExternalHardware
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           	psect	text44
  8848  001C4E                     __ptext44:
  8849                           	opt stack 0
  8850  001C4E                     _RTCInit:
  8851                           	opt stack 17
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;DS1307.c: 40: dateTime.tstring[2] = 58;
  8855                           
  8856                           ;incstack = 0
  8857  001C4E  0E3A               	movlw	58
  8858  001C50  6F77               	movwf	(_dateTime+10)& (0+255),b
  8859                           
  8860                           ;DS1307.c: 41: dateTime.dstring[2] = 47;
  8861  001C52  0E2F               	movlw	47
  8862  001C54  6F7D               	movwf	(_dateTime+16)& (0+255),b
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;DS1307.c: 43: if (AckPolling(0xD0)) {
  8866  001C56  0ED0               	movlw	208
  8867  001C58  EC47  F00D         	call	_AckPolling
  8868  001C5C  0900               	iorlw	0
  8869  001C5E  B4D8               	btfsc	status,2,c
  8870                           
  8871                           ;DS1307.c: 45: }
  8872                           ;DS1307.c: 47: RTCGetDateTime();
  8873  001C60  EC2D  F007         	call	_RTCGetDateTime	;wreg free
  8874  001C64  0012               	return	
  8875  001C66                     __end_of_RTCInit:
  8876                           	opt stack 0
  8877                           tblptru	equ	0xFF8
  8878                           tblptrh	equ	0xFF7
  8879                           tblptrl	equ	0xFF6
  8880                           tablat	equ	0xFF5
  8881                           prodh	equ	0xFF4
  8882                           prodl	equ	0xFF3
  8883                           intcon	equ	0xFF2
  8884                           intcon2	equ	0xFF1
  8885                           postinc0	equ	0xFEE
  8886                           wreg	equ	0xFE8
  8887                           indf1	equ	0xFE7
  8888                           fsr1h	equ	0xFE2
  8889                           fsr1l	equ	0xFE1
  8890                           indf2	equ	0xFDF
  8891                           postinc2	equ	0xFDE
  8892                           postdec2	equ	0xFDD
  8893                           plusw2	equ	0xFDB
  8894                           fsr2h	equ	0xFDA
  8895                           fsr2l	equ	0xFD9
  8896                           status	equ	0xFD8
  8897                           
  8898 ;; *************** function _LM75Init *****************
  8899 ;; Defined at:
  8900 ;;		line 44 in file "tmp75.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;		None
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      unsigned char 
  8907 ;; Registers used:
  8908 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8914 ;;      Params:         0       0       0       0
  8915 ;;      Locals:         0       0       0       0
  8916 ;;      Temps:          0       0       0       0
  8917 ;;      Totals:         0       0       0       0
  8918 ;;Total ram usage:        0 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:   12
  8921 ;; This function calls:
  8922 ;;		_AckPolling
  8923 ;;		_LM75GetTemp
  8924 ;;		_StartI2C
  8925 ;;		_StopI2C
  8926 ;;		_TransmitI2C
  8927 ;; This function is called by:
  8928 ;;		_ExternalHardware
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text45
  8933  001B9C                     __ptext45:
  8934                           	opt stack 0
  8935  001B9C                     _LM75Init:
  8936                           	opt stack 17
  8937                           
  8938                           ;tmp75.c: 46: if(AckPolling(0x90)){
  8939                           
  8940                           ;incstack = 0
  8941  001B9C  0E90               	movlw	144
  8942  001B9E  EC47  F00D         	call	_AckPolling
  8943  001BA2  0900               	iorlw	0
  8944  001BA4  A4D8               	btfss	status,2,c
  8945  001BA6  0012               	return	
  8946                           
  8947                           ;tmp75.c: 48: }
  8948                           ;tmp75.c: 50: StartI2C();
  8949  001BA8  EC80  F00E         	call	_StartI2C	;wreg free
  8950                           
  8951                           ;tmp75.c: 51: TransmitI2C(0x90);
  8952  001BAC  0E90               	movlw	144
  8953  001BAE  EC11  F00B         	call	_TransmitI2C
  8954                           
  8955                           ;tmp75.c: 52: TransmitI2C(0x00);
  8956  001BB2  0E00               	movlw	0
  8957  001BB4  EC11  F00B         	call	_TransmitI2C
  8958                           
  8959                           ;tmp75.c: 53: StopI2C();
  8960  001BB8  EC9B  F00E         	call	_StopI2C	;wreg free
  8961                           
  8962                           ;tmp75.c: 55: LM75GetTemp();
  8963  001BBC  EFDE  F006         	goto	_LM75GetTemp	;wreg free
  8964  001BC0                     __end_of_LM75Init:
  8965                           	opt stack 0
  8966                           tblptru	equ	0xFF8
  8967                           tblptrh	equ	0xFF7
  8968                           tblptrl	equ	0xFF6
  8969                           tablat	equ	0xFF5
  8970                           prodh	equ	0xFF4
  8971                           prodl	equ	0xFF3
  8972                           intcon	equ	0xFF2
  8973                           intcon2	equ	0xFF1
  8974                           postinc0	equ	0xFEE
  8975                           wreg	equ	0xFE8
  8976                           indf1	equ	0xFE7
  8977                           fsr1h	equ	0xFE2
  8978                           fsr1l	equ	0xFE1
  8979                           indf2	equ	0xFDF
  8980                           postinc2	equ	0xFDE
  8981                           postdec2	equ	0xFDD
  8982                           plusw2	equ	0xFDB
  8983                           fsr2h	equ	0xFDA
  8984                           fsr2l	equ	0xFD9
  8985                           status	equ	0xFD8
  8986                           
  8987 ;; *************** function _LM75GetTemp *****************
  8988 ;; Defined at:
  8989 ;;		line 59 in file "tmp75.c"
  8990 ;; Parameters:    Size  Location     Type
  8991 ;;		None
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;  tempLo          2   41[COMRAM] unsigned int 
  8994 ;;  tempHi          2   39[COMRAM] unsigned int 
  8995 ;; Return value:  Size  Location     Type
  8996 ;;		None               void
  8997 ;; Registers used:
  8998 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8999 ;; Tracked objects:
  9000 ;;		On entry : 0/0
  9001 ;;		On exit  : 0/0
  9002 ;;		Unchanged: 0/0
  9003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9004 ;;      Params:         0       0       0       0
  9005 ;;      Locals:         4       0       0       0
  9006 ;;      Temps:          5       0       0       0
  9007 ;;      Totals:         9       0       0       0
  9008 ;;Total ram usage:        9 bytes
  9009 ;; Hardware stack levels used:    1
  9010 ;; Hardware stack levels required when called:   11
  9011 ;; This function calls:
  9012 ;;		_RecieveI2C
  9013 ;;		_StartI2C
  9014 ;;		_StopI2C
  9015 ;;		_TransmitI2C
  9016 ;;		___awdiv
  9017 ;;		___lwdiv
  9018 ;;		___wmul
  9019 ;; This function is called by:
  9020 ;;		_LM75Init
  9021 ;;		_TemperatureDisplay
  9022 ;;		_ScrollTime
  9023 ;; This function uses a non-reentrant model
  9024 ;;
  9025                           
  9026                           	psect	text46
  9027  000DBC                     __ptext46:
  9028                           	opt stack 0
  9029  000DBC                     _LM75GetTemp:
  9030                           	opt stack 18
  9031                           
  9032                           ;tmp75.c: 61: uint16_t tempHi,tempLo;
  9033                           ;tmp75.c: 65: StartI2C();
  9034                           
  9035                           ;incstack = 0
  9036  000DBC  EC80  F00E         	call	_StartI2C	;wreg free
  9037                           
  9038                           ;tmp75.c: 66: TransmitI2C(0x91);
  9039  000DC0  0E91               	movlw	145
  9040  000DC2  EC11  F00B         	call	_TransmitI2C
  9041                           
  9042                           ;tmp75.c: 67: tempHi = RecieveI2C(1);
  9043  000DC6  0E01               	movlw	1
  9044  000DC8  EC4C  F00A         	call	_RecieveI2C
  9045  000DCC  6E28               	movwf	LM75GetTemp@tempHi,c
  9046  000DCE  6A29               	clrf	LM75GetTemp@tempHi+1,c
  9047                           
  9048                           ;tmp75.c: 68: tempLo = RecieveI2C(0);
  9049  000DD0  0E00               	movlw	0
  9050  000DD2  EC4C  F00A         	call	_RecieveI2C
  9051  000DD6  6E2A               	movwf	LM75GetTemp@tempLo,c
  9052  000DD8  6A2B               	clrf	LM75GetTemp@tempLo+1,c
  9053                           
  9054                           ;tmp75.c: 69: StopI2C();
  9055  000DDA  EC9B  F00E         	call	_StopI2C	;wreg free
  9056                           
  9057                           ;tmp75.c: 71: temperature.celcsius = ((tempHi << 3)+(tempLo >> 5))*125/1000;
  9058  000DDE  C02A  F023         	movff	LM75GetTemp@tempLo,??_LM75GetTemp
  9059  000DE2  C02B  F024         	movff	LM75GetTemp@tempLo+1,??_LM75GetTemp+1
  9060  000DE6  0E05               	movlw	5
  9061  000DE8  6E25               	movwf	(??_LM75GetTemp+2)& (0+255),c
  9062  000DEA                     u5165:
  9063  000DEA  90D8               	bcf	status,0,c
  9064  000DEC  3224               	rrcf	??_LM75GetTemp+1,f,c
  9065  000DEE  3223               	rrcf	??_LM75GetTemp,f,c
  9066  000DF0  2E25               	decfsz	(??_LM75GetTemp+2)& (0+255),f,c
  9067  000DF2  D7FB               	goto	u5165
  9068  000DF4  C028  F026         	movff	LM75GetTemp@tempHi,??_LM75GetTemp+3
  9069  000DF8  C029  F027         	movff	LM75GetTemp@tempHi+1,??_LM75GetTemp+4
  9070  000DFC  90D8               	bcf	status,0,c
  9071  000DFE  3626               	rlcf	??_LM75GetTemp+3,f,c
  9072  000E00  3627               	rlcf	??_LM75GetTemp+4,f,c
  9073  000E02  90D8               	bcf	status,0,c
  9074  000E04  3626               	rlcf	??_LM75GetTemp+3,f,c
  9075  000E06  3627               	rlcf	??_LM75GetTemp+4,f,c
  9076  000E08  90D8               	bcf	status,0,c
  9077  000E0A  3626               	rlcf	??_LM75GetTemp+3,f,c
  9078  000E0C  3627               	rlcf	??_LM75GetTemp+4,f,c
  9079  000E0E  5023               	movf	??_LM75GetTemp,w,c
  9080  000E10  2426               	addwf	??_LM75GetTemp+3,w,c
  9081  000E12  6E16               	movwf	___wmul@multiplier,c
  9082  000E14  5024               	movf	??_LM75GetTemp+1,w,c
  9083  000E16  2027               	addwfc	??_LM75GetTemp+4,w,c
  9084  000E18  6E17               	movwf	___wmul@multiplier+1,c
  9085  000E1A  6A19               	clrf	___wmul@multiplicand+1,c
  9086  000E1C  0E7D               	movlw	125
  9087  000E1E  6E18               	movwf	___wmul@multiplicand,c
  9088  000E20  EC71  F00D         	call	___wmul	;wreg free
  9089  000E24  C016  F01C         	movff	?___wmul,___lwdiv@dividend
  9090  000E28  C017  F01D         	movff	?___wmul+1,___lwdiv@dividend+1
  9091  000E2C  0E03               	movlw	3
  9092  000E2E  6E1F               	movwf	___lwdiv@divisor+1,c
  9093  000E30  0EE8               	movlw	232
  9094  000E32  6E1E               	movwf	___lwdiv@divisor,c
  9095  000E34  ECFE  F00B         	call	___lwdiv	;wreg free
  9096  000E38  501C               	movf	?___lwdiv,w,c
  9097  000E3A  6E3F               	movwf	_temperature,c	;volatile
  9098                           
  9099                           ;tmp75.c: 72: temperature.fahrenheit = (temperature.celcsius * 180/100)+32;
  9100  000E3C  503F               	movf	_temperature,w,c	;volatile
  9101  000E3E  0DB4               	mullw	180
  9102  000E40  CFF3 F016          	movff	prodl,___awdiv@dividend
  9103  000E44  CFF4 F017          	movff	prodh,___awdiv@dividend+1
  9104  000E48  6A19               	clrf	___awdiv@divisor+1,c
  9105  000E4A  0E64               	movlw	100
  9106  000E4C  6E18               	movwf	___awdiv@divisor,c
  9107  000E4E  EC13  F008         	call	___awdiv	;wreg free
  9108  000E52  5016               	movf	?___awdiv,w,c
  9109  000E54  0F20               	addlw	32
  9110  000E56  6E40               	movwf	_temperature+1,c	;volatile
  9111  000E58  0012               	return	
  9112  000E5A                     __end_of_LM75GetTemp:
  9113                           	opt stack 0
  9114                           tblptru	equ	0xFF8
  9115                           tblptrh	equ	0xFF7
  9116                           tblptrl	equ	0xFF6
  9117                           tablat	equ	0xFF5
  9118                           prodh	equ	0xFF4
  9119                           prodl	equ	0xFF3
  9120                           intcon	equ	0xFF2
  9121                           intcon2	equ	0xFF1
  9122                           postinc0	equ	0xFEE
  9123                           wreg	equ	0xFE8
  9124                           indf1	equ	0xFE7
  9125                           fsr1h	equ	0xFE2
  9126                           fsr1l	equ	0xFE1
  9127                           indf2	equ	0xFDF
  9128                           postinc2	equ	0xFDE
  9129                           postdec2	equ	0xFDD
  9130                           plusw2	equ	0xFDB
  9131                           fsr2h	equ	0xFDA
  9132                           fsr2l	equ	0xFD9
  9133                           status	equ	0xFD8
  9134                           
  9135 ;; *************** function ___wmul *****************
  9136 ;; Defined at:
  9137 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;  multiplier      2   21[COMRAM] unsigned int 
  9140 ;;  multiplicand    2   23[COMRAM] unsigned int 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;  product         2   25[COMRAM] unsigned int 
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  2   21[COMRAM] unsigned int 
  9145 ;; Registers used:
  9146 ;;		wreg, status,2, status,0, prodl, prodh
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9152 ;;      Params:         4       0       0       0
  9153 ;;      Locals:         2       0       0       0
  9154 ;;      Temps:          0       0       0       0
  9155 ;;      Totals:         6       0       0       0
  9156 ;;Total ram usage:        6 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    7
  9159 ;; This function calls:
  9160 ;;		Nothing
  9161 ;; This function is called by:
  9162 ;;		_LM75GetTemp
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           	psect	text47
  9167  001AE2                     __ptext47:
  9168                           	opt stack 0
  9169  001AE2                     ___wmul:
  9170                           	opt stack 21
  9171                           
  9172                           ;incstack = 0
  9173  001AE2  5016               	movf	___wmul@multiplier,w,c
  9174  001AE4  0218               	mulwf	___wmul@multiplicand,c
  9175  001AE6  CFF3 F01A          	movff	prodl,___wmul@product
  9176  001AEA  CFF4 F01B          	movff	prodh,___wmul@product+1
  9177  001AEE  5016               	movf	___wmul@multiplier,w,c
  9178  001AF0  0219               	mulwf	___wmul@multiplicand+1,c
  9179  001AF2  50F3               	movf	prodl,w,c
  9180  001AF4  261B               	addwf	___wmul@product+1,f,c
  9181  001AF6  5017               	movf	___wmul@multiplier+1,w,c
  9182  001AF8  0218               	mulwf	___wmul@multiplicand,c
  9183  001AFA  50F3               	movf	prodl,w,c
  9184  001AFC  261B               	addwf	___wmul@product+1,f,c
  9185  001AFE  C01A  F016         	movff	___wmul@product,?___wmul
  9186  001B02  C01B  F017         	movff	___wmul@product+1,?___wmul+1
  9187  001B06  0012               	return	
  9188  001B08                     __end_of___wmul:
  9189                           	opt stack 0
  9190                           tblptru	equ	0xFF8
  9191                           tblptrh	equ	0xFF7
  9192                           tblptrl	equ	0xFF6
  9193                           tablat	equ	0xFF5
  9194                           prodh	equ	0xFF4
  9195                           prodl	equ	0xFF3
  9196                           intcon	equ	0xFF2
  9197                           intcon2	equ	0xFF1
  9198                           postinc0	equ	0xFEE
  9199                           wreg	equ	0xFE8
  9200                           indf1	equ	0xFE7
  9201                           fsr1h	equ	0xFE2
  9202                           fsr1l	equ	0xFE1
  9203                           indf2	equ	0xFDF
  9204                           postinc2	equ	0xFDE
  9205                           postdec2	equ	0xFDD
  9206                           plusw2	equ	0xFDB
  9207                           fsr2h	equ	0xFDA
  9208                           fsr2l	equ	0xFD9
  9209                           status	equ	0xFD8
  9210                           
  9211 ;; *************** function ___lwdiv *****************
  9212 ;; Defined at:
  9213 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;  dividend        2   27[COMRAM] unsigned int 
  9216 ;;  divisor         2   29[COMRAM] unsigned int 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;  quotient        2   32[COMRAM] unsigned int 
  9219 ;;  counter         1   31[COMRAM] unsigned char 
  9220 ;; Return value:  Size  Location     Type
  9221 ;;                  2   27[COMRAM] unsigned int 
  9222 ;; Registers used:
  9223 ;;		wreg, status,2, status,0
  9224 ;; Tracked objects:
  9225 ;;		On entry : 0/0
  9226 ;;		On exit  : 0/0
  9227 ;;		Unchanged: 0/0
  9228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9229 ;;      Params:         4       0       0       0
  9230 ;;      Locals:         3       0       0       0
  9231 ;;      Temps:          0       0       0       0
  9232 ;;      Totals:         7       0       0       0
  9233 ;;Total ram usage:        7 bytes
  9234 ;; Hardware stack levels used:    1
  9235 ;; Hardware stack levels required when called:    7
  9236 ;; This function calls:
  9237 ;;		Nothing
  9238 ;; This function is called by:
  9239 ;;		_LM75GetTemp
  9240 ;;		_NumberToString
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text48
  9245  0017FC                     __ptext48:
  9246                           	opt stack 0
  9247  0017FC                     ___lwdiv:
  9248                           	opt stack 21
  9249                           
  9250                           ;incstack = 0
  9251  0017FC  6A21               	clrf	___lwdiv@quotient,c
  9252  0017FE  6A22               	clrf	___lwdiv@quotient+1,c
  9253  001800  501F               	movf	___lwdiv@divisor+1,w,c
  9254  001802  101E               	iorwf	___lwdiv@divisor,w,c
  9255  001804  E01B               	bz	l1562
  9256  001806  0E01               	movlw	1
  9257  001808  6E20               	movwf	___lwdiv@counter,c
  9258  00180A  D004               	goto	l4944
  9259  00180C                     l4942:
  9260  00180C  90D8               	bcf	status,0,c
  9261  00180E  361E               	rlcf	___lwdiv@divisor,f,c
  9262  001810  361F               	rlcf	___lwdiv@divisor+1,f,c
  9263  001812  2A20               	incf	___lwdiv@counter,f,c
  9264  001814                     l4944:
  9265  001814  AE1F               	btfss	___lwdiv@divisor+1,7,c
  9266  001816  D7FA               	goto	l4942
  9267  001818                     l4946:
  9268  001818  90D8               	bcf	status,0,c
  9269  00181A  3621               	rlcf	___lwdiv@quotient,f,c
  9270  00181C  3622               	rlcf	___lwdiv@quotient+1,f,c
  9271  00181E  501E               	movf	___lwdiv@divisor,w,c
  9272  001820  5C1C               	subwf	___lwdiv@dividend,w,c
  9273  001822  501F               	movf	___lwdiv@divisor+1,w,c
  9274  001824  581D               	subwfb	___lwdiv@dividend+1,w,c
  9275  001826  E305               	bnc	l4954
  9276  001828  501E               	movf	___lwdiv@divisor,w,c
  9277  00182A  5E1C               	subwf	___lwdiv@dividend,f,c
  9278  00182C  501F               	movf	___lwdiv@divisor+1,w,c
  9279  00182E  5A1D               	subwfb	___lwdiv@dividend+1,f,c
  9280  001830  8021               	bsf	___lwdiv@quotient,0,c
  9281  001832                     l4954:
  9282  001832  90D8               	bcf	status,0,c
  9283  001834  321F               	rrcf	___lwdiv@divisor+1,f,c
  9284  001836  321E               	rrcf	___lwdiv@divisor,f,c
  9285  001838  2E20               	decfsz	___lwdiv@counter,f,c
  9286  00183A  D7EE               	goto	l4946
  9287  00183C                     l1562:
  9288  00183C  C021  F01C         	movff	___lwdiv@quotient,?___lwdiv
  9289  001840  C022  F01D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9290  001844  0012               	return	
  9291  001846                     __end_of___lwdiv:
  9292                           	opt stack 0
  9293                           tblptru	equ	0xFF8
  9294                           tblptrh	equ	0xFF7
  9295                           tblptrl	equ	0xFF6
  9296                           tablat	equ	0xFF5
  9297                           prodh	equ	0xFF4
  9298                           prodl	equ	0xFF3
  9299                           intcon	equ	0xFF2
  9300                           intcon2	equ	0xFF1
  9301                           postinc0	equ	0xFEE
  9302                           wreg	equ	0xFE8
  9303                           indf1	equ	0xFE7
  9304                           fsr1h	equ	0xFE2
  9305                           fsr1l	equ	0xFE1
  9306                           indf2	equ	0xFDF
  9307                           postinc2	equ	0xFDE
  9308                           postdec2	equ	0xFDD
  9309                           plusw2	equ	0xFDB
  9310                           fsr2h	equ	0xFDA
  9311                           fsr2l	equ	0xFD9
  9312                           status	equ	0xFD8
  9313                           
  9314 ;; *************** function ___awdiv *****************
  9315 ;; Defined at:
  9316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  9317 ;; Parameters:    Size  Location     Type
  9318 ;;  dividend        2   21[COMRAM] int 
  9319 ;;  divisor         2   23[COMRAM] int 
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;  quotient        2   27[COMRAM] int 
  9322 ;;  sign            1   26[COMRAM] unsigned char 
  9323 ;;  counter         1   25[COMRAM] unsigned char 
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  2   21[COMRAM] int 
  9326 ;; Registers used:
  9327 ;;		wreg, status,2, status,0, prodl
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9333 ;;      Params:         4       0       0       0
  9334 ;;      Locals:         4       0       0       0
  9335 ;;      Temps:          0       0       0       0
  9336 ;;      Totals:         8       0       0       0
  9337 ;;Total ram usage:        8 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    7
  9340 ;; This function calls:
  9341 ;;		Nothing
  9342 ;; This function is called by:
  9343 ;;		_LM75GetTemp
  9344 ;;		_get_board_value
  9345 ;;		_clear_board_location
  9346 ;;		_set_board_location
  9347 ;; This function uses a non-reentrant model
  9348 ;;
  9349                           
  9350                           	psect	text49
  9351  001026                     __ptext49:
  9352                           	opt stack 0
  9353  001026                     ___awdiv:
  9354                           	opt stack 20
  9355                           
  9356                           ;incstack = 0
  9357  001026  6A1B               	clrf	___awdiv@sign,c
  9358  001028  5019               	movf	___awdiv@divisor+1,w,c
  9359  00102A  D83F               	call	PL10	;call to abstracted procedure
  9360  00102C  B4D8               	btfsc	status,2,c
  9361  00102E  5C18               	subwf	___awdiv@divisor,w,c
  9362  001030  E206               	bc	l4900
  9363  001032  6C18               	negf	___awdiv@divisor,c
  9364  001034  1E19               	comf	___awdiv@divisor+1,f,c
  9365  001036  B0D8               	btfsc	status,0,c
  9366  001038  2A19               	incf	___awdiv@divisor+1,f,c
  9367  00103A  0E01               	movlw	1
  9368  00103C  6E1B               	movwf	___awdiv@sign,c
  9369  00103E                     l4900:
  9370  00103E  5017               	movf	___awdiv@dividend+1,w,c
  9371  001040  D834               	call	PL10	;call to abstracted procedure
  9372  001042  B4D8               	btfsc	status,2,c
  9373  001044  5C16               	subwf	___awdiv@dividend,w,c
  9374  001046  E206               	bc	l4906
  9375  001048  6C16               	negf	___awdiv@dividend,c
  9376  00104A  1E17               	comf	___awdiv@dividend+1,f,c
  9377  00104C  B0D8               	btfsc	status,0,c
  9378  00104E  2A17               	incf	___awdiv@dividend+1,f,c
  9379  001050  0E01               	movlw	1
  9380  001052  1A1B               	xorwf	___awdiv@sign,f,c
  9381  001054                     l4906:
  9382  001054  6A1C               	clrf	___awdiv@quotient,c
  9383  001056  6A1D               	clrf	___awdiv@quotient+1,c
  9384  001058  5019               	movf	___awdiv@divisor+1,w,c
  9385  00105A  1018               	iorwf	___awdiv@divisor,w,c
  9386  00105C  E01B               	bz	l4928
  9387  00105E  0E01               	movlw	1
  9388  001060  6E1A               	movwf	___awdiv@counter,c
  9389  001062  D004               	goto	l4914
  9390  001064                     l4912:
  9391  001064  90D8               	bcf	status,0,c
  9392  001066  3618               	rlcf	___awdiv@divisor,f,c
  9393  001068  3619               	rlcf	___awdiv@divisor+1,f,c
  9394  00106A  2A1A               	incf	___awdiv@counter,f,c
  9395  00106C                     l4914:
  9396  00106C  AE19               	btfss	___awdiv@divisor+1,7,c
  9397  00106E  D7FA               	goto	l4912
  9398  001070                     l4916:
  9399  001070  90D8               	bcf	status,0,c
  9400  001072  361C               	rlcf	___awdiv@quotient,f,c
  9401  001074  361D               	rlcf	___awdiv@quotient+1,f,c
  9402  001076  5018               	movf	___awdiv@divisor,w,c
  9403  001078  5C16               	subwf	___awdiv@dividend,w,c
  9404  00107A  5019               	movf	___awdiv@divisor+1,w,c
  9405  00107C  5817               	subwfb	___awdiv@dividend+1,w,c
  9406  00107E  E305               	bnc	l4924
  9407  001080  5018               	movf	___awdiv@divisor,w,c
  9408  001082  5E16               	subwf	___awdiv@dividend,f,c
  9409  001084  5019               	movf	___awdiv@divisor+1,w,c
  9410  001086  5A17               	subwfb	___awdiv@dividend+1,f,c
  9411  001088  801C               	bsf	___awdiv@quotient,0,c
  9412  00108A                     l4924:
  9413  00108A  90D8               	bcf	status,0,c
  9414  00108C  3219               	rrcf	___awdiv@divisor+1,f,c
  9415  00108E  3218               	rrcf	___awdiv@divisor,f,c
  9416  001090  2E1A               	decfsz	___awdiv@counter,f,c
  9417  001092  D7EE               	goto	l4916
  9418  001094                     l4928:
  9419  001094  501B               	movf	___awdiv@sign,w,c
  9420  001096  E004               	bz	l4932
  9421  001098  6C1C               	negf	___awdiv@quotient,c
  9422  00109A  1E1D               	comf	___awdiv@quotient+1,f,c
  9423  00109C  B0D8               	btfsc	status,0,c
  9424  00109E  2A1D               	incf	___awdiv@quotient+1,f,c
  9425  0010A0                     l4932:
  9426  0010A0  C01C  F016         	movff	___awdiv@quotient,?___awdiv
  9427  0010A4  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
  9428  0010A8  0012               	return	
  9429  0010AA                     __end_of___awdiv:
  9430                           	opt stack 0
  9431  0010AA                     PL10:
  9432                           	opt stack 21
  9433  0010AA  0A80               	xorlw	128
  9434  0010AC  6EF3               	movwf	prodl,c
  9435  0010AE  0E80               	movlw	128
  9436  0010B0  5CF3               	subwf	prodl,w,c
  9437  0010B2  0C00               	retlw	0
  9438  0010B4                     __end_ofPL10:
  9439                           	opt stack 0
  9440                           tblptru	equ	0xFF8
  9441                           tblptrh	equ	0xFF7
  9442                           tblptrl	equ	0xFF6
  9443                           tablat	equ	0xFF5
  9444                           prodh	equ	0xFF4
  9445                           prodl	equ	0xFF3
  9446                           intcon	equ	0xFF2
  9447                           intcon2	equ	0xFF1
  9448                           postinc0	equ	0xFEE
  9449                           wreg	equ	0xFE8
  9450                           indf1	equ	0xFE7
  9451                           fsr1h	equ	0xFE2
  9452                           fsr1l	equ	0xFE1
  9453                           indf2	equ	0xFDF
  9454                           postinc2	equ	0xFDE
  9455                           postdec2	equ	0xFDD
  9456                           plusw2	equ	0xFDB
  9457                           fsr2h	equ	0xFDA
  9458                           fsr2l	equ	0xFD9
  9459                           status	equ	0xFD8
  9460                           
  9461 ;; *************** function _AckPolling *****************
  9462 ;; Defined at:
  9463 ;;		line 137 in file "swI2C.c"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;  device          1    wreg     unsigned char 
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;  device          1   27[COMRAM] unsigned char 
  9468 ;; Return value:  Size  Location     Type
  9469 ;;                  1    wreg      unsigned char 
  9470 ;; Registers used:
  9471 ;;		wreg, status,2, status,0, cstack
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9477 ;;      Params:         0       0       0       0
  9478 ;;      Locals:         1       0       0       0
  9479 ;;      Temps:          0       0       0       0
  9480 ;;      Totals:         1       0       0       0
  9481 ;;Total ram usage:        1 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:   11
  9484 ;; This function calls:
  9485 ;;		_StartI2C
  9486 ;;		_StopI2C
  9487 ;;		_TransmitI2C
  9488 ;; This function is called by:
  9489 ;;		_RTCInit
  9490 ;;		_LM75Init
  9491 ;; This function uses a non-reentrant model
  9492 ;;
  9493                           
  9494                           	psect	text50
  9495  001A8E                     __ptext50:
  9496                           	opt stack 0
  9497  001A8E                     _AckPolling:
  9498                           	opt stack 17
  9499                           
  9500                           ;incstack = 0
  9501                           ;AckPolling@device stored from wreg
  9502  001A8E  6E1C               	movwf	AckPolling@device,c
  9503                           
  9504                           ;swI2C.c: 139: StartI2C();
  9505  001A90  EC80  F00E         	call	_StartI2C	;wreg free
  9506                           
  9507                           ;swI2C.c: 141: if (TransmitI2C(device)){
  9508  001A94  501C               	movf	AckPolling@device,w,c
  9509  001A96  EC11  F00B         	call	_TransmitI2C
  9510  001A9A  0900               	iorlw	0
  9511  001A9C  E00C               	bz	l5300
  9512                           
  9513                           ;swI2C.c: 142: StopI2C();
  9514  001A9E  EC9B  F00E         	call	_StopI2C	;wreg free
  9515                           
  9516                           ;swI2C.c: 143: StartI2C();
  9517  001AA2  EC80  F00E         	call	_StartI2C	;wreg free
  9518                           
  9519                           ;swI2C.c: 145: if (TransmitI2C(device)){
  9520  001AA6  501C               	movf	AckPolling@device,w,c
  9521  001AA8  EC11  F00B         	call	_TransmitI2C
  9522  001AAC  0900               	iorlw	0
  9523  001AAE  E003               	bz	l5300
  9524                           
  9525                           ;swI2C.c: 146: StopI2C();
  9526  001AB0  EC9B  F00E         	call	_StopI2C	;wreg free
  9527                           
  9528                           ;swI2C.c: 147: return(1);
  9529  001AB4  0C01               	retlw	1
  9530  001AB6                     l5300:
  9531                           
  9532                           ;swI2C.c: 149: StopI2C();
  9533  001AB6  EC9B  F00E         	call	_StopI2C	;wreg free
  9534                           
  9535                           ;swI2C.c: 150: return(0);
  9536  001ABA  0C00               	retlw	0
  9537  001ABC                     __end_of_AckPolling:
  9538                           	opt stack 0
  9539                           tblptru	equ	0xFF8
  9540                           tblptrh	equ	0xFF7
  9541                           tblptrl	equ	0xFF6
  9542                           tablat	equ	0xFF5
  9543                           prodh	equ	0xFF4
  9544                           prodl	equ	0xFF3
  9545                           intcon	equ	0xFF2
  9546                           intcon2	equ	0xFF1
  9547                           postinc0	equ	0xFEE
  9548                           wreg	equ	0xFE8
  9549                           indf1	equ	0xFE7
  9550                           fsr1h	equ	0xFE2
  9551                           fsr1l	equ	0xFE1
  9552                           indf2	equ	0xFDF
  9553                           postinc2	equ	0xFDE
  9554                           postdec2	equ	0xFDD
  9555                           plusw2	equ	0xFDB
  9556                           fsr2h	equ	0xFDA
  9557                           fsr2l	equ	0xFD9
  9558                           status	equ	0xFD8
  9559                           
  9560 ;; *************** function _InitI2C *****************
  9561 ;; Defined at:
  9562 ;;		line 30 in file "swI2C.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;		None
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;		None
  9567 ;; Return value:  Size  Location     Type
  9568 ;;		None               void
  9569 ;; Registers used:
  9570 ;;		None
  9571 ;; Tracked objects:
  9572 ;;		On entry : F/0
  9573 ;;		On exit  : F/0
  9574 ;;		Unchanged: F/0
  9575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9576 ;;      Params:         0       0       0       0
  9577 ;;      Locals:         0       0       0       0
  9578 ;;      Temps:          0       0       0       0
  9579 ;;      Totals:         0       0       0       0
  9580 ;;Total ram usage:        0 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    7
  9583 ;; This function calls:
  9584 ;;		Nothing
  9585 ;; This function is called by:
  9586 ;;		_ExternalHardware
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           	psect	text51
  9591  001D52                     __ptext51:
  9592                           	opt stack 0
  9593  001D52                     _InitI2C:
  9594                           	opt stack 22
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;swI2C.c: 32: LATB6 = 0;
  9598                           
  9599                           ;incstack = 0
  9600  001D52  9C8A               	bcf	3978,6,c	;volatile
  9601                           
  9602                           ;swI2C.c: 33: LATB4 = 0;
  9603  001D54  988A               	bcf	3978,4,c	;volatile
  9604                           
  9605                           ;swI2C.c: 34: (TRISB4 = 0xFF);
  9606  001D56  8893               	bsf	3987,4,c	;volatile
  9607                           
  9608                           ;swI2C.c: 35: (TRISB6 = 0xFF);
  9609  001D58  8C93               	bsf	3987,6,c	;volatile
  9610                           
  9611                           ; BSR set to: 0
  9612  001D5A  0012               	return	
  9613  001D5C                     __end_of_InitI2C:
  9614                           	opt stack 0
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           intcon	equ	0xFF2
  9622                           intcon2	equ	0xFF1
  9623                           postinc0	equ	0xFEE
  9624                           wreg	equ	0xFE8
  9625                           indf1	equ	0xFE7
  9626                           fsr1h	equ	0xFE2
  9627                           fsr1l	equ	0xFE1
  9628                           indf2	equ	0xFDF
  9629                           postinc2	equ	0xFDE
  9630                           postdec2	equ	0xFDD
  9631                           plusw2	equ	0xFDB
  9632                           fsr2h	equ	0xFDA
  9633                           fsr2l	equ	0xFD9
  9634                           status	equ	0xFD8
  9635                           
  9636 ;; *************** function _DisplayInit *****************
  9637 ;; Defined at:
  9638 ;;		line 43 in file "display.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;		None
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;		None
  9643 ;; Return value:  Size  Location     Type
  9644 ;;		None               void
  9645 ;; Registers used:
  9646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : F/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9652 ;;      Params:         0       0       0       0
  9653 ;;      Locals:         0       0       0       0
  9654 ;;      Temps:          0       0       0       0
  9655 ;;      Totals:         0       0       0       0
  9656 ;;Total ram usage:        0 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; Hardware stack levels required when called:    8
  9659 ;; This function calls:
  9660 ;;		_ClearDisplay
  9661 ;; This function is called by:
  9662 ;;		_ExternalHardware
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           	psect	text52
  9667  001CEC                     __ptext52:
  9668                           	opt stack 0
  9669  001CEC                     _DisplayInit:
  9670                           	opt stack 21
  9671                           
  9672                           ;display.c: 45: (LATC3 = 0x00);
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;incstack = 0
  9676  001CEC  968B               	bcf	3979,3,c	;volatile
  9677                           
  9678                           ;display.c: 46: (LATC4 = 0x00);
  9679  001CEE  988B               	bcf	3979,4,c	;volatile
  9680                           
  9681                           ;display.c: 47: (LATC5 = 0x00);
  9682  001CF0  9A8B               	bcf	3979,5,c	;volatile
  9683                           
  9684                           ;display.c: 49: TRISC3 = 0x00;
  9685  001CF2  9694               	bcf	3988,3,c	;volatile
  9686                           
  9687                           ;display.c: 50: TRISC4 = 0x00;
  9688  001CF4  9894               	bcf	3988,4,c	;volatile
  9689                           
  9690                           ;display.c: 51: TRISC5 = 0x00;
  9691  001CF6  9A94               	bcf	3988,5,c	;volatile
  9692                           
  9693                           ;display.c: 53: ClearDisplay();
  9694  001CF8  EC33  F00E         	call	_ClearDisplay	;wreg free
  9695                           
  9696                           ; BSR set to: 0
  9697                           ;display.c: 54: display.activeRow = 0;
  9698  001CFC  6B90               	clrf	(_display+15)& (0+255),b	;volatile
  9699                           
  9700                           ; BSR set to: 0
  9701  001CFE  0012               	return	
  9702  001D00                     __end_of_DisplayInit:
  9703                           	opt stack 0
  9704                           tblptru	equ	0xFF8
  9705                           tblptrh	equ	0xFF7
  9706                           tblptrl	equ	0xFF6
  9707                           tablat	equ	0xFF5
  9708                           prodh	equ	0xFF4
  9709                           prodl	equ	0xFF3
  9710                           intcon	equ	0xFF2
  9711                           intcon2	equ	0xFF1
  9712                           postinc0	equ	0xFEE
  9713                           wreg	equ	0xFE8
  9714                           indf1	equ	0xFE7
  9715                           fsr1h	equ	0xFE2
  9716                           fsr1l	equ	0xFE1
  9717                           indf2	equ	0xFDF
  9718                           postinc2	equ	0xFDE
  9719                           postdec2	equ	0xFDD
  9720                           plusw2	equ	0xFDB
  9721                           fsr2h	equ	0xFDA
  9722                           fsr2l	equ	0xFD9
  9723                           status	equ	0xFD8
  9724                           
  9725 ;; *************** function _BinaryTime *****************
  9726 ;; Defined at:
  9727 ;;		line 316 in file "main.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;		None
  9732 ;; Return value:  Size  Location     Type
  9733 ;;		None               void
  9734 ;; Registers used:
  9735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : F/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9741 ;;      Params:         0       0       0       0
  9742 ;;      Locals:         0       0       0       0
  9743 ;;      Temps:          2       0       0       0
  9744 ;;      Totals:         2       0       0       0
  9745 ;;Total ram usage:        2 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; Hardware stack levels required when called:   12
  9748 ;; This function calls:
  9749 ;;		_ClearDisplay
  9750 ;;		_RTCGetDateTime
  9751 ;;		___lbdiv
  9752 ;;		___lbmod
  9753 ;; This function is called by:
  9754 ;;		_main
  9755 ;; This function uses a non-reentrant model
  9756 ;;
  9757                           
  9758                           	psect	text53
  9759  000932                     __ptext53:
  9760                           	opt stack 0
  9761  000932                     _BinaryTime:
  9762                           	opt stack 18
  9763                           
  9764                           ;main.c: 317: static uint8_t prevSec, prevMin, prevHr;
  9765                           ;main.c: 319: if (firstLoop) {
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;incstack = 0
  9769  000932  5041               	movf	_firstLoop,w,c
  9770  000934  E007               	bz	l6036
  9771                           
  9772                           ;main.c: 320: firstLoop = 0x00;
  9773  000936  6A41               	clrf	_firstLoop,c
  9774                           
  9775                           ;main.c: 321: prevSec = 0xFF;
  9776  000938  0100               	movlb	0	; () banked
  9777  00093A  6967               	setf	BinaryTime@prevSec& (0+255),b
  9778                           
  9779                           ;main.c: 322: prevMin = 0xFF;
  9780  00093C  6966               	setf	BinaryTime@prevMin& (0+255),b
  9781                           
  9782                           ;main.c: 323: prevHr = 0xFF;
  9783  00093E  6965               	setf	BinaryTime@prevHr& (0+255),b
  9784                           
  9785                           ; BSR set to: 0
  9786                           ;main.c: 324: ClearDisplay();
  9787  000940  EC33  F00E         	call	_ClearDisplay	;wreg free
  9788  000944                     l6036:
  9789                           
  9790                           ;main.c: 325: }
  9791                           ;main.c: 327: RTCGetDateTime();
  9792  000944  EC2D  F007         	call	_RTCGetDateTime	;wreg free
  9793                           
  9794                           ;main.c: 328: if ((prevSec != dateTime.sec) || firstLoop) {
  9795  000948  0100               	movlb	0	; () banked
  9796  00094A  5167               	movf	BinaryTime@prevSec& (0+255),w,b
  9797  00094C  636D               	cpfseq	_dateTime& (0+255),b
  9798  00094E  D003               	goto	l6042
  9799                           
  9800                           ; BSR set to: 0
  9801  000950  5041               	movf	_firstLoop,w,c
  9802  000952  B4D8               	btfsc	status,2,c
  9803  000954  0012               	return	
  9804  000956                     l6042:
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;main.c: 329: display.cols[10] = display.cols[11] = binFont[dateTime.sec / 10];
  9808  000956  0E0A               	movlw	10
  9809  000958  6E16               	movwf	___lbdiv@divisor,c
  9810  00095A  516D               	movf	_dateTime& (0+255),w,b
  9811  00095C  EC2D  F00D         	call	___lbdiv
  9812  000960  D84D               	call	PL2	;call to abstracted procedure
  9813  000962  CFF5 F08C          	movff	tablat,_display+11	;volatile
  9814  000966  C08C  F08B         	movff	_display+11,_display+10	;volatile
  9815                           
  9816                           ;main.c: 330: display.cols[13] = display.cols[14] = binFont[dateTime.sec % 10];
  9817  00096A  0E0A               	movlw	10
  9818  00096C  6E16               	movwf	___lbmod@divisor,c
  9819  00096E  516D               	movf	_dateTime& (0+255),w,b
  9820  000970  EC84  F00D         	call	___lbmod
  9821  000974  D843               	call	PL2	;call to abstracted procedure
  9822  000976  CFF5 F08F          	movff	tablat,_display+14	;volatile
  9823  00097A  C08F  F08E         	movff	_display+14,_display+13	;volatile
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;main.c: 331: prevSec = dateTime.sec;
  9827  00097E  C06D  F067         	movff	_dateTime,BinaryTime@prevSec
  9828                           
  9829                           ; BSR set to: 0
  9830                           ;main.c: 332: if ((prevMin != dateTime.min) || firstLoop) {
  9831  000982  5166               	movf	BinaryTime@prevMin& (0+255),w,b
  9832  000984  EE20  F06E         	lfsr	2,_dateTime+1
  9833  000988  62DF               	cpfseq	indf2,c
  9834  00098A  D003               	goto	l6050
  9835                           
  9836                           ; BSR set to: 0
  9837  00098C  5041               	movf	_firstLoop,w,c
  9838  00098E  B4D8               	btfsc	status,2,c
  9839  000990  0012               	return	
  9840  000992                     l6050:
  9841                           
  9842                           ; BSR set to: 0
  9843                           ;main.c: 333: display.cols[5] = display.cols[6] = binFont[dateTime.min / 10];
  9844  000992  0E0A               	movlw	10
  9845  000994  6E16               	movwf	___lbdiv@divisor,c
  9846  000996  516E               	movf	(_dateTime+1)& (0+255),w,b
  9847  000998  EC2D  F00D         	call	___lbdiv
  9848  00099C  D82F               	call	PL2	;call to abstracted procedure
  9849  00099E  CFF5 F087          	movff	tablat,_display+6	;volatile
  9850  0009A2  C087  F086         	movff	_display+6,_display+5	;volatile
  9851                           
  9852                           ;main.c: 334: display.cols[8] = display.cols[9] = binFont[dateTime.min % 10];
  9853  0009A6  0E0A               	movlw	10
  9854  0009A8  6E16               	movwf	___lbmod@divisor,c
  9855  0009AA  516E               	movf	(_dateTime+1)& (0+255),w,b
  9856  0009AC  EC84  F00D         	call	___lbmod
  9857  0009B0  D825               	call	PL2	;call to abstracted procedure
  9858  0009B2  CFF5 F08A          	movff	tablat,_display+9	;volatile
  9859  0009B6  C08A  F089         	movff	_display+9,_display+8	;volatile
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;main.c: 335: prevMin = dateTime.min;
  9863  0009BA  C06E  F066         	movff	_dateTime+1,BinaryTime@prevMin
  9864                           
  9865                           ; BSR set to: 0
  9866                           ;main.c: 336: if ((prevHr != dateTime.hour) || firstLoop) {
  9867  0009BE  5165               	movf	BinaryTime@prevHr& (0+255),w,b
  9868  0009C0  EE20  F06F         	lfsr	2,_dateTime+2
  9869  0009C4  62DF               	cpfseq	indf2,c
  9870  0009C6  D003               	goto	l6058
  9871                           
  9872                           ; BSR set to: 0
  9873  0009C8  5041               	movf	_firstLoop,w,c
  9874  0009CA  B4D8               	btfsc	status,2,c
  9875  0009CC  0012               	return	
  9876  0009CE                     l6058:
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;main.c: 337: display.cols[0] = display.cols[1] = binFont[dateTime.hour / 10];
  9880  0009CE  0E0A               	movlw	10
  9881  0009D0  6E16               	movwf	___lbdiv@divisor,c
  9882  0009D2  516F               	movf	(_dateTime+2)& (0+255),w,b
  9883  0009D4  EC2D  F00D         	call	___lbdiv
  9884  0009D8  D811               	call	PL2	;call to abstracted procedure
  9885  0009DA  CFF5 F082          	movff	tablat,_display+1	;volatile
  9886  0009DE  C082  F081         	movff	_display+1,_display	;volatile
  9887                           
  9888                           ;main.c: 338: display.cols[3] = display.cols[4] = binFont[dateTime.hour % 10];
  9889  0009E2  0E0A               	movlw	10
  9890  0009E4  6E16               	movwf	___lbmod@divisor,c
  9891  0009E6  516F               	movf	(_dateTime+2)& (0+255),w,b
  9892  0009E8  EC84  F00D         	call	___lbmod
  9893  0009EC  D807               	call	PL2	;call to abstracted procedure
  9894  0009EE  CFF5 F085          	movff	tablat,_display+4	;volatile
  9895  0009F2  C085  F084         	movff	_display+4,_display+3	;volatile
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;main.c: 339: prevHr = dateTime.hour;
  9899  0009F6  C06F  F065         	movff	_dateTime+2,BinaryTime@prevHr
  9900                           
  9901                           ; BSR set to: 0
  9902  0009FA  0012               	return	
  9903  0009FC                     __end_of_BinaryTime:
  9904                           	opt stack 0
  9905  0009FC                     PL2:
  9906                           	opt stack 18
  9907  0009FC  6E1D               	movwf	??_BinaryTime& (0+255),c
  9908  0009FE  6A1E               	clrf	(??_BinaryTime+1)& (0+255),c
  9909  000A00  0EED               	movlw	low _binFont
  9910  000A02  241D               	addwf	??_BinaryTime,w,c
  9911  000A04  6EF6               	movwf	tblptrl,c
  9912  000A06  0E3E               	movlw	high _binFont
  9913  000A08  201E               	addwfc	??_BinaryTime+1,w,c
  9914  000A0A  6EF7               	movwf	tblptrh,c
  9915  000A0C                     	if	0	;There are less than 3 active tblptr bytes
  9916  000A0C                     	endif
  9917  000A0C  0008               	tblrd		*
  9918  000A0E  0100               	movlb	0	; () banked
  9919  000A10  0012               	return	
  9920  000A12                     __end_ofPL2:
  9921                           	opt stack 0
  9922                           tblptru	equ	0xFF8
  9923                           tblptrh	equ	0xFF7
  9924                           tblptrl	equ	0xFF6
  9925                           tablat	equ	0xFF5
  9926                           prodh	equ	0xFF4
  9927                           prodl	equ	0xFF3
  9928                           intcon	equ	0xFF2
  9929                           intcon2	equ	0xFF1
  9930                           postinc0	equ	0xFEE
  9931                           wreg	equ	0xFE8
  9932                           indf1	equ	0xFE7
  9933                           fsr1h	equ	0xFE2
  9934                           fsr1l	equ	0xFE1
  9935                           indf2	equ	0xFDF
  9936                           postinc2	equ	0xFDE
  9937                           postdec2	equ	0xFDD
  9938                           plusw2	equ	0xFDB
  9939                           fsr2h	equ	0xFDA
  9940                           fsr2l	equ	0xFD9
  9941                           status	equ	0xFD8
  9942                           
  9943 ;; *************** function ___lbmod *****************
  9944 ;; Defined at:
  9945 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lbmod.c"
  9946 ;; Parameters:    Size  Location     Type
  9947 ;;  dividend        1    wreg     unsigned char 
  9948 ;;  divisor         1   21[COMRAM] unsigned char 
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  dividend        1   22[COMRAM] unsigned char 
  9951 ;;  rem             1   24[COMRAM] unsigned char 
  9952 ;;  counter         1   23[COMRAM] unsigned char 
  9953 ;; Return value:  Size  Location     Type
  9954 ;;                  1    wreg      unsigned char 
  9955 ;; Registers used:
  9956 ;;		wreg, status,2, status,0
  9957 ;; Tracked objects:
  9958 ;;		On entry : 0/0
  9959 ;;		On exit  : 0/0
  9960 ;;		Unchanged: 0/0
  9961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9962 ;;      Params:         1       0       0       0
  9963 ;;      Locals:         3       0       0       0
  9964 ;;      Temps:          0       0       0       0
  9965 ;;      Totals:         4       0       0       0
  9966 ;;Total ram usage:        4 bytes
  9967 ;; Hardware stack levels used:    1
  9968 ;; Hardware stack levels required when called:    7
  9969 ;; This function calls:
  9970 ;;		Nothing
  9971 ;; This function is called by:
  9972 ;;		_RtcNumberToString
  9973 ;;		_dec_to_bcd
  9974 ;;		_BinaryTime
  9975 ;;		_InputTime
  9976 ;;		_glider
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           	psect	text54
  9981  001B08                     __ptext54:
  9982                           	opt stack 0
  9983  001B08                     ___lbmod:
  9984                           	opt stack 20
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;incstack = 0
  9988                           ;___lbmod@dividend stored from wreg
  9989  001B08  6E17               	movwf	___lbmod@dividend,c
  9990  001B0A  0E08               	movlw	8
  9991  001B0C  6E18               	movwf	___lbmod@counter,c
  9992  001B0E  6A19               	clrf	___lbmod@rem,c
  9993  001B10                     l5274:
  9994  001B10  90D8               	bcf	status,0,c
  9995  001B12  3417               	rlcf	___lbmod@dividend,w,c
  9996  001B14  3419               	rlcf	___lbmod@rem,w,c
  9997  001B16  6E19               	movwf	___lbmod@rem,c
  9998  001B18  90D8               	bcf	status,0,c
  9999  001B1A  3617               	rlcf	___lbmod@dividend,f,c
 10000  001B1C  5016               	movf	___lbmod@divisor,w,c
 10001  001B1E  5C19               	subwf	___lbmod@rem,w,c
 10002  001B20  E302               	bnc	l5282
 10003  001B22  5016               	movf	___lbmod@divisor,w,c
 10004  001B24  5E19               	subwf	___lbmod@rem,f,c
 10005  001B26                     l5282:
 10006  001B26  2E18               	decfsz	___lbmod@counter,f,c
 10007  001B28  D7F3               	goto	l5274
 10008  001B2A  5019               	movf	___lbmod@rem,w,c
 10009  001B2C  0012               	return	
 10010  001B2E                     __end_of___lbmod:
 10011                           	opt stack 0
 10012                           tblptru	equ	0xFF8
 10013                           tblptrh	equ	0xFF7
 10014                           tblptrl	equ	0xFF6
 10015                           tablat	equ	0xFF5
 10016                           prodh	equ	0xFF4
 10017                           prodl	equ	0xFF3
 10018                           intcon	equ	0xFF2
 10019                           intcon2	equ	0xFF1
 10020                           postinc0	equ	0xFEE
 10021                           wreg	equ	0xFE8
 10022                           indf1	equ	0xFE7
 10023                           fsr1h	equ	0xFE2
 10024                           fsr1l	equ	0xFE1
 10025                           indf2	equ	0xFDF
 10026                           postinc2	equ	0xFDE
 10027                           postdec2	equ	0xFDD
 10028                           plusw2	equ	0xFDB
 10029                           fsr2h	equ	0xFDA
 10030                           fsr2l	equ	0xFD9
 10031                           status	equ	0xFD8
 10032                           
 10033 ;; *************** function ___lbdiv *****************
 10034 ;; Defined at:
 10035 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lbdiv.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;  dividend        1    wreg     unsigned char 
 10038 ;;  divisor         1   21[COMRAM] unsigned char 
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;  dividend        1   22[COMRAM] unsigned char 
 10041 ;;  quotient        1   24[COMRAM] unsigned char 
 10042 ;;  counter         1   23[COMRAM] unsigned char 
 10043 ;; Return value:  Size  Location     Type
 10044 ;;                  1    wreg      unsigned char 
 10045 ;; Registers used:
 10046 ;;		wreg, status,2, status,0
 10047 ;; Tracked objects:
 10048 ;;		On entry : 0/0
 10049 ;;		On exit  : 0/0
 10050 ;;		Unchanged: 0/0
 10051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10052 ;;      Params:         1       0       0       0
 10053 ;;      Locals:         3       0       0       0
 10054 ;;      Temps:          0       0       0       0
 10055 ;;      Totals:         4       0       0       0
 10056 ;;Total ram usage:        4 bytes
 10057 ;; Hardware stack levels used:    1
 10058 ;; Hardware stack levels required when called:    7
 10059 ;; This function calls:
 10060 ;;		Nothing
 10061 ;; This function is called by:
 10062 ;;		_RtcNumberToString
 10063 ;;		_DateStringLong
 10064 ;;		_dec_to_bcd
 10065 ;;		_BinaryTime
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           	psect	text55
 10070  001A5A                     __ptext55:
 10071                           	opt stack 0
 10072  001A5A                     ___lbdiv:
 10073                           	opt stack 21
 10074                           
 10075                           ;incstack = 0
 10076                           ;___lbdiv@dividend stored from wreg
 10077  001A5A  6E17               	movwf	___lbdiv@dividend,c
 10078  001A5C  6A19               	clrf	___lbdiv@quotient,c
 10079  001A5E  5016               	movf	___lbdiv@divisor,w,c
 10080  001A60  E014               	bz	l5266
 10081  001A62  0E01               	movlw	1
 10082  001A64  6E18               	movwf	___lbdiv@counter,c
 10083  001A66  D003               	goto	l5254
 10084  001A68                     l5250:
 10085  001A68  90D8               	bcf	status,0,c
 10086  001A6A  3616               	rlcf	___lbdiv@divisor,f,c
 10087  001A6C  2A18               	incf	___lbdiv@counter,f,c
 10088  001A6E                     l5254:
 10089  001A6E  AE16               	btfss	___lbdiv@divisor,7,c
 10090  001A70  D7FB               	goto	l5250
 10091  001A72                     l5256:
 10092  001A72  90D8               	bcf	status,0,c
 10093  001A74  3619               	rlcf	___lbdiv@quotient,f,c
 10094  001A76  5016               	movf	___lbdiv@divisor,w,c
 10095  001A78  5C17               	subwf	___lbdiv@dividend,w,c
 10096  001A7A  E303               	bnc	l5262
 10097  001A7C  5016               	movf	___lbdiv@divisor,w,c
 10098  001A7E  5E17               	subwf	___lbdiv@dividend,f,c
 10099  001A80  8019               	bsf	___lbdiv@quotient,0,c
 10100  001A82                     l5262:
 10101  001A82  90D8               	bcf	status,0,c
 10102  001A84  3216               	rrcf	___lbdiv@divisor,f,c
 10103  001A86  2E18               	decfsz	___lbdiv@counter,f,c
 10104  001A88  D7F4               	goto	l5256
 10105  001A8A                     l5266:
 10106  001A8A  5019               	movf	___lbdiv@quotient,w,c
 10107  001A8C  0012               	return	
 10108  001A8E                     __end_of___lbdiv:
 10109                           	opt stack 0
 10110                           tblptru	equ	0xFF8
 10111                           tblptrh	equ	0xFF7
 10112                           tblptrl	equ	0xFF6
 10113                           tablat	equ	0xFF5
 10114                           prodh	equ	0xFF4
 10115                           prodl	equ	0xFF3
 10116                           intcon	equ	0xFF2
 10117                           intcon2	equ	0xFF1
 10118                           postinc0	equ	0xFEE
 10119                           wreg	equ	0xFE8
 10120                           indf1	equ	0xFE7
 10121                           fsr1h	equ	0xFE2
 10122                           fsr1l	equ	0xFE1
 10123                           indf2	equ	0xFDF
 10124                           postinc2	equ	0xFDE
 10125                           postdec2	equ	0xFDD
 10126                           plusw2	equ	0xFDB
 10127                           fsr2h	equ	0xFDA
 10128                           fsr2l	equ	0xFD9
 10129                           status	equ	0xFD8
 10130                           
 10131 ;; *************** function _RTCGetDateTime *****************
 10132 ;; Defined at:
 10133 ;;		line 76 in file "DS1307.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;		None
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;  i2cBuffer       1   27[COMRAM] unsigned char 
 10138 ;; Return value:  Size  Location     Type
 10139 ;;		None               void
 10140 ;; Registers used:
 10141 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10142 ;; Tracked objects:
 10143 ;;		On entry : 0/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10147 ;;      Params:         0       0       0       0
 10148 ;;      Locals:         1       0       0       0
 10149 ;;      Temps:          0       0       0       0
 10150 ;;      Totals:         1       0       0       0
 10151 ;;Total ram usage:        1 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; Hardware stack levels required when called:   11
 10154 ;; This function calls:
 10155 ;;		_RecieveI2C
 10156 ;;		_StartI2C
 10157 ;;		_StopI2C
 10158 ;;		_TransmitI2C
 10159 ;;		_bcd_to_dec
 10160 ;; This function is called by:
 10161 ;;		_RTCInit
 10162 ;;		_TimeNumerical
 10163 ;;		_ScrollTime
 10164 ;;		_SecondsTime
 10165 ;;		_BinaryTime
 10166 ;; This function uses a non-reentrant model
 10167 ;;
 10168                           
 10169                           	psect	text56
 10170  000E5A                     __ptext56:
 10171                           	opt stack 0
 10172  000E5A                     _RTCGetDateTime:
 10173                           	opt stack 18
 10174                           
 10175                           ;DS1307.c: 78: uint8_t i2cBuffer;
 10176                           ;DS1307.c: 79: StartI2C();
 10177                           
 10178                           ;incstack = 0
 10179  000E5A  EC80  F00E         	call	_StartI2C	;wreg free
 10180                           
 10181                           ;DS1307.c: 80: TransmitI2C(0xD0);
 10182  000E5E  0ED0               	movlw	208
 10183  000E60  EC11  F00B         	call	_TransmitI2C
 10184                           
 10185                           ;DS1307.c: 81: TransmitI2C(0x00);
 10186  000E64  0E00               	movlw	0
 10187  000E66  EC11  F00B         	call	_TransmitI2C
 10188                           
 10189                           ;DS1307.c: 82: StartI2C();
 10190  000E6A  EC80  F00E         	call	_StartI2C	;wreg free
 10191                           
 10192                           ;DS1307.c: 83: TransmitI2C(0xD1);
 10193  000E6E  0ED1               	movlw	209
 10194  000E70  EC11  F00B         	call	_TransmitI2C
 10195                           
 10196                           ;DS1307.c: 84: i2cBuffer = RecieveI2C(1);
 10197  000E74  0E01               	movlw	1
 10198  000E76  EC4C  F00A         	call	_RecieveI2C
 10199  000E7A  6E1C               	movwf	RTCGetDateTime@i2cBuffer,c
 10200                           
 10201                           ;DS1307.c: 85: dateTime.sec = bcd_to_dec(i2cBuffer);
 10202  000E7C  501C               	movf	RTCGetDateTime@i2cBuffer,w,c
 10203  000E7E  EC4B  F00E         	call	_bcd_to_dec
 10204  000E82  0100               	movlb	0	; () banked
 10205  000E84  6F6D               	movwf	_dateTime& (0+255),b
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;DS1307.c: 86: i2cBuffer = RecieveI2C(1);
 10209  000E86  0E01               	movlw	1
 10210  000E88  EC4C  F00A         	call	_RecieveI2C
 10211  000E8C  6E1C               	movwf	RTCGetDateTime@i2cBuffer,c
 10212                           
 10213                           ;DS1307.c: 87: dateTime.min = bcd_to_dec(i2cBuffer);
 10214  000E8E  501C               	movf	RTCGetDateTime@i2cBuffer,w,c
 10215  000E90  EC4B  F00E         	call	_bcd_to_dec
 10216  000E94  0100               	movlb	0	; () banked
 10217  000E96  6F6E               	movwf	(_dateTime+1)& (0+255),b
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;DS1307.c: 88: i2cBuffer = RecieveI2C(1);
 10221  000E98  0E01               	movlw	1
 10222  000E9A  EC4C  F00A         	call	_RecieveI2C
 10223  000E9E  6E1C               	movwf	RTCGetDateTime@i2cBuffer,c
 10224                           
 10225                           ;DS1307.c: 89: dateTime.hour = bcd_to_dec(i2cBuffer & 0x1F);
 10226  000EA0  501C               	movf	RTCGetDateTime@i2cBuffer,w,c
 10227  000EA2  0B1F               	andlw	31
 10228  000EA4  EC4B  F00E         	call	_bcd_to_dec
 10229  000EA8  0100               	movlb	0	; () banked
 10230  000EAA  6F6F               	movwf	(_dateTime+2)& (0+255),b
 10231                           
 10232                           ;DS1307.c: 90: i2cBuffer = RecieveI2C(1);
 10233  000EAC  0E01               	movlw	1
 10234  000EAE  EC4C  F00A         	call	_RecieveI2C
 10235  000EB2  6E1C               	movwf	RTCGetDateTime@i2cBuffer,c
 10236                           
 10237                           ;DS1307.c: 91: dateTime.wday = bcd_to_dec(i2cBuffer);
 10238  000EB4  501C               	movf	RTCGetDateTime@i2cBuffer,w,c
 10239  000EB6  EC4B  F00E         	call	_bcd_to_dec
 10240  000EBA  0100               	movlb	0	; () banked
 10241  000EBC  6F70               	movwf	(_dateTime+3)& (0+255),b
 10242                           
 10243                           ; BSR set to: 0
 10244                           ;DS1307.c: 92: i2cBuffer = RecieveI2C(1);
 10245  000EBE  0E01               	movlw	1
 10246  000EC0  EC4C  F00A         	call	_RecieveI2C
 10247  000EC4  6E1C               	movwf	RTCGetDateTime@i2cBuffer,c
 10248                           
 10249                           ;DS1307.c: 93: dateTime.mday = bcd_to_dec(i2cBuffer);
 10250  000EC6  501C               	movf	RTCGetDateTime@i2cBuffer,w,c
 10251  000EC8  EC4B  F00E         	call	_bcd_to_dec
 10252  000ECC  0100               	movlb	0	; () banked
 10253  000ECE  6F71               	movwf	(_dateTime+4)& (0+255),b
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;DS1307.c: 94: i2cBuffer = RecieveI2C(1);
 10257  000ED0  0E01               	movlw	1
 10258  000ED2  EC4C  F00A         	call	_RecieveI2C
 10259  000ED6  6E1C               	movwf	RTCGetDateTime@i2cBuffer,c
 10260                           
 10261                           ;DS1307.c: 95: dateTime.mon = bcd_to_dec(i2cBuffer);
 10262  000ED8  501C               	movf	RTCGetDateTime@i2cBuffer,w,c
 10263  000EDA  EC4B  F00E         	call	_bcd_to_dec
 10264  000EDE  0100               	movlb	0	; () banked
 10265  000EE0  6F72               	movwf	(_dateTime+5)& (0+255),b
 10266                           
 10267                           ;DS1307.c: 96: i2cBuffer = RecieveI2C(0);
 10268  000EE2  0E00               	movlw	0
 10269  000EE4  EC4C  F00A         	call	_RecieveI2C
 10270  000EE8  6E1C               	movwf	RTCGetDateTime@i2cBuffer,c
 10271                           
 10272                           ;DS1307.c: 97: dateTime.year = bcd_to_dec(i2cBuffer);
 10273  000EEA  501C               	movf	RTCGetDateTime@i2cBuffer,w,c
 10274  000EEC  EC4B  F00E         	call	_bcd_to_dec
 10275  000EF0  0100               	movlb	0	; () banked
 10276  000EF2  6F73               	movwf	(_dateTime+6)& (0+255),b
 10277                           
 10278                           ; BSR set to: 0
 10279                           ;DS1307.c: 98: StopI2C();
 10280  000EF4  EF9B  F00E         	goto	_StopI2C	;wreg free
 10281  000EF8                     __end_of_RTCGetDateTime:
 10282                           	opt stack 0
 10283                           tblptru	equ	0xFF8
 10284                           tblptrh	equ	0xFF7
 10285                           tblptrl	equ	0xFF6
 10286                           tablat	equ	0xFF5
 10287                           prodh	equ	0xFF4
 10288                           prodl	equ	0xFF3
 10289                           intcon	equ	0xFF2
 10290                           intcon2	equ	0xFF1
 10291                           postinc0	equ	0xFEE
 10292                           wreg	equ	0xFE8
 10293                           indf1	equ	0xFE7
 10294                           fsr1h	equ	0xFE2
 10295                           fsr1l	equ	0xFE1
 10296                           indf2	equ	0xFDF
 10297                           postinc2	equ	0xFDE
 10298                           postdec2	equ	0xFDD
 10299                           plusw2	equ	0xFDB
 10300                           fsr2h	equ	0xFDA
 10301                           fsr2l	equ	0xFD9
 10302                           status	equ	0xFD8
 10303                           
 10304 ;; *************** function _bcd_to_dec *****************
 10305 ;; Defined at:
 10306 ;;		line 253 in file "DS1307.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;  bcd             1    wreg     unsigned char 
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;  bcd             1   22[COMRAM] unsigned char 
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  1    wreg      unsigned char 
 10313 ;; Registers used:
 10314 ;;		wreg, status,2, status,0, prodl, prodh
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10320 ;;      Params:         0       0       0       0
 10321 ;;      Locals:         1       0       0       0
 10322 ;;      Temps:          1       0       0       0
 10323 ;;      Totals:         2       0       0       0
 10324 ;;Total ram usage:        2 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    7
 10327 ;; This function calls:
 10328 ;;		Nothing
 10329 ;; This function is called by:
 10330 ;;		_RTCGetDateTime
 10331 ;; This function uses a non-reentrant model
 10332 ;;
 10333                           
 10334                           	psect	text57
 10335  001C96                     __ptext57:
 10336                           	opt stack 0
 10337  001C96                     _bcd_to_dec:
 10338                           	opt stack 21
 10339                           
 10340                           ;incstack = 0
 10341                           ;bcd_to_dec@bcd stored from wreg
 10342  001C96  6E17               	movwf	bcd_to_dec@bcd,c
 10343                           
 10344                           ;DS1307.c: 254: return(bcd & 0x0f) + ((bcd >> 4) * 10);
 10345  001C98  C017  F016         	movff	bcd_to_dec@bcd,??_bcd_to_dec
 10346  001C9C  0E0F               	movlw	15
 10347  001C9E  1616               	andwf	??_bcd_to_dec,f,c
 10348  001CA0  3817               	swapf	bcd_to_dec@bcd,w,c
 10349  001CA2  0B0F               	andlw	15
 10350  001CA4  0D0A               	mullw	10
 10351  001CA6  50F3               	movf	prodl,w,c
 10352  001CA8  2416               	addwf	??_bcd_to_dec,w,c
 10353  001CAA  0012               	return	
 10354  001CAC                     __end_of_bcd_to_dec:
 10355                           	opt stack 0
 10356                           tblptru	equ	0xFF8
 10357                           tblptrh	equ	0xFF7
 10358                           tblptrl	equ	0xFF6
 10359                           tablat	equ	0xFF5
 10360                           prodh	equ	0xFF4
 10361                           prodl	equ	0xFF3
 10362                           intcon	equ	0xFF2
 10363                           intcon2	equ	0xFF1
 10364                           postinc0	equ	0xFEE
 10365                           wreg	equ	0xFE8
 10366                           indf1	equ	0xFE7
 10367                           fsr1h	equ	0xFE2
 10368                           fsr1l	equ	0xFE1
 10369                           indf2	equ	0xFDF
 10370                           postinc2	equ	0xFDE
 10371                           postdec2	equ	0xFDD
 10372                           plusw2	equ	0xFDB
 10373                           fsr2h	equ	0xFDA
 10374                           fsr2l	equ	0xFD9
 10375                           status	equ	0xFD8
 10376                           
 10377 ;; *************** function _TransmitI2C *****************
 10378 ;; Defined at:
 10379 ;;		line 107 in file "swI2C.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;  byte            1    wreg     unsigned char 
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;  byte            1   24[COMRAM] unsigned char 
 10384 ;;  bitNo           1   26[COMRAM] unsigned char 
 10385 ;;  ack             1   25[COMRAM] unsigned char 
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      unsigned char 
 10388 ;; Registers used:
 10389 ;;		wreg, status,2, status,0, cstack
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10395 ;;      Params:         0       0       0       0
 10396 ;;      Locals:         3       0       0       0
 10397 ;;      Temps:          0       0       0       0
 10398 ;;      Totals:         3       0       0       0
 10399 ;;Total ram usage:        3 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:   10
 10402 ;; This function calls:
 10403 ;;		_DelayI2C
 10404 ;; This function is called by:
 10405 ;;		_RTCGetDateTime
 10406 ;;		_RTCSetTime
 10407 ;;		_AckPolling
 10408 ;;		_LM75Init
 10409 ;;		_LM75GetTemp
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           	psect	text58
 10414  001622                     __ptext58:
 10415                           	opt stack 0
 10416  001622                     _TransmitI2C:
 10417                           	opt stack 18
 10418                           
 10419                           ;incstack = 0
 10420                           ;TransmitI2C@byte stored from wreg
 10421  001622  6E19               	movwf	TransmitI2C@byte,c
 10422                           
 10423                           ;swI2C.c: 108: uint8_t bitNo;
 10424                           ;swI2C.c: 109: uint8_t ack;
 10425                           ;swI2C.c: 111: for (bitNo = 0; bitNo < 8; bitNo++) {
 10426  001624  6A1B               	clrf	TransmitI2C@bitNo,c
 10427  001626                     l143:
 10428                           
 10429                           ;swI2C.c: 112: if (byte & 0x80) {
 10430  001626  AE19               	btfss	TransmitI2C@byte,7,c
 10431  001628  D002               	goto	l145
 10432                           
 10433                           ;swI2C.c: 113: (TRISB4 = 0xFF);
 10434  00162A  8893               	bsf	3987,4,c	;volatile
 10435                           
 10436                           ;swI2C.c: 114: }
 10437  00162C  D001               	goto	l4988
 10438  00162E                     l145:
 10439                           
 10440                           ;swI2C.c: 115: else {
 10441                           ;swI2C.c: 116: (TRISB4 = 0x00);
 10442  00162E  9893               	bcf	3987,4,c	;volatile
 10443  001630                     l4988:
 10444                           
 10445                           ;swI2C.c: 117: }
 10446                           ;swI2C.c: 118: DelayI2C(10);
 10447  001630  0E0A               	movlw	10
 10448  001632  ECA3  F00E         	call	_DelayI2C
 10449                           
 10450                           ;swI2C.c: 120: (TRISB6 = 0xFF);
 10451  001636  8C93               	bsf	3987,6,c	;volatile
 10452                           
 10453                           ;swI2C.c: 121: DelayI2C(25);
 10454  001638  0E19               	movlw	25
 10455  00163A  ECA3  F00E         	call	_DelayI2C
 10456                           
 10457                           ;swI2C.c: 122: (TRISB6 = 0x00);
 10458  00163E  9C93               	bcf	3987,6,c	;volatile
 10459                           
 10460                           ;swI2C.c: 123: DelayI2C(25);
 10461  001640  0E19               	movlw	25
 10462  001642  ECA3  F00E         	call	_DelayI2C
 10463                           
 10464                           ;swI2C.c: 125: byte <<= 1;
 10465  001646  90D8               	bcf	status,0,c
 10466  001648  3619               	rlcf	TransmitI2C@byte,f,c
 10467  00164A  2A1B               	incf	TransmitI2C@bitNo,f,c
 10468  00164C  0E07               	movlw	7
 10469  00164E  641B               	cpfsgt	TransmitI2C@bitNo,c
 10470  001650  D7EA               	goto	l143
 10471                           
 10472                           ;swI2C.c: 126: }
 10473                           ;swI2C.c: 127: (TRISB4 = 0xFF);
 10474  001652  8893               	bsf	3987,4,c	;volatile
 10475                           
 10476                           ;swI2C.c: 128: (TRISB6 = 0xFF);
 10477  001654  8C93               	bsf	3987,6,c	;volatile
 10478                           
 10479                           ;swI2C.c: 129: DelayI2C(10);
 10480  001656  0E0A               	movlw	10
 10481  001658  ECA3  F00E         	call	_DelayI2C
 10482                           
 10483                           ;swI2C.c: 130: ack = PORTBbits.RB4;
 10484  00165C  0E00               	movlw	0
 10485  00165E  B881               	btfsc	3969,4,c	;volatile
 10486  001660  0E01               	movlw	1
 10487  001662  6E1A               	movwf	TransmitI2C@ack,c
 10488                           
 10489                           ;swI2C.c: 131: DelayI2C(10);
 10490  001664  0E0A               	movlw	10
 10491  001666  ECA3  F00E         	call	_DelayI2C
 10492                           
 10493                           ;swI2C.c: 132: (TRISB6 = 0x00);
 10494  00166A  9C93               	bcf	3987,6,c	;volatile
 10495                           
 10496                           ;swI2C.c: 133: DelayI2C(25);
 10497  00166C  0E19               	movlw	25
 10498  00166E  ECA3  F00E         	call	_DelayI2C
 10499                           
 10500                           ;swI2C.c: 134: return ack;
 10501  001672  501A               	movf	TransmitI2C@ack,w,c
 10502  001674  0012               	return	
 10503  001676                     __end_of_TransmitI2C:
 10504                           	opt stack 0
 10505                           tblptru	equ	0xFF8
 10506                           tblptrh	equ	0xFF7
 10507                           tblptrl	equ	0xFF6
 10508                           tablat	equ	0xFF5
 10509                           prodh	equ	0xFF4
 10510                           prodl	equ	0xFF3
 10511                           intcon	equ	0xFF2
 10512                           intcon2	equ	0xFF1
 10513                           postinc0	equ	0xFEE
 10514                           wreg	equ	0xFE8
 10515                           indf1	equ	0xFE7
 10516                           fsr1h	equ	0xFE2
 10517                           fsr1l	equ	0xFE1
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           postdec2	equ	0xFDD
 10521                           plusw2	equ	0xFDB
 10522                           fsr2h	equ	0xFDA
 10523                           fsr2l	equ	0xFD9
 10524                           status	equ	0xFD8
 10525                           
 10526 ;; *************** function _StopI2C *****************
 10527 ;; Defined at:
 10528 ;;		line 63 in file "swI2C.c"
 10529 ;; Parameters:    Size  Location     Type
 10530 ;;		None
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;		None
 10533 ;; Return value:  Size  Location     Type
 10534 ;;		None               void
 10535 ;; Registers used:
 10536 ;;		wreg, status,2, status,0, cstack
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10542 ;;      Params:         0       0       0       0
 10543 ;;      Locals:         0       0       0       0
 10544 ;;      Temps:          0       0       0       0
 10545 ;;      Totals:         0       0       0       0
 10546 ;;Total ram usage:        0 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:   10
 10549 ;; This function calls:
 10550 ;;		_DelayI2C
 10551 ;; This function is called by:
 10552 ;;		_RTCGetDateTime
 10553 ;;		_RTCSetTime
 10554 ;;		_AckPolling
 10555 ;;		_LM75Init
 10556 ;;		_LM75GetTemp
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           	psect	text59
 10561  001D36                     __ptext59:
 10562                           	opt stack 0
 10563  001D36                     _StopI2C:
 10564                           	opt stack 18
 10565                           
 10566                           ;swI2C.c: 64: (TRISB4 = 0x00);
 10567                           
 10568                           ;incstack = 0
 10569  001D36  9893               	bcf	3987,4,c	;volatile
 10570                           
 10571                           ;swI2C.c: 65: (TRISB6 = 0xFF);
 10572  001D38  8C93               	bsf	3987,6,c	;volatile
 10573                           
 10574                           ;swI2C.c: 66: DelayI2C(15);
 10575  001D3A  0E0F               	movlw	15
 10576  001D3C  ECA3  F00E         	call	_DelayI2C
 10577                           
 10578                           ;swI2C.c: 67: (TRISB4 = 0xFF);
 10579  001D40  8893               	bsf	3987,4,c	;volatile
 10580                           
 10581                           ;swI2C.c: 68: __nop();
 10582  001D42  F000               	nop	
 10583  001D44  0012               	return	
 10584  001D46                     __end_of_StopI2C:
 10585                           	opt stack 0
 10586                           tblptru	equ	0xFF8
 10587                           tblptrh	equ	0xFF7
 10588                           tblptrl	equ	0xFF6
 10589                           tablat	equ	0xFF5
 10590                           prodh	equ	0xFF4
 10591                           prodl	equ	0xFF3
 10592                           intcon	equ	0xFF2
 10593                           intcon2	equ	0xFF1
 10594                           postinc0	equ	0xFEE
 10595                           wreg	equ	0xFE8
 10596                           indf1	equ	0xFE7
 10597                           fsr1h	equ	0xFE2
 10598                           fsr1l	equ	0xFE1
 10599                           indf2	equ	0xFDF
 10600                           postinc2	equ	0xFDE
 10601                           postdec2	equ	0xFDD
 10602                           plusw2	equ	0xFDB
 10603                           fsr2h	equ	0xFDA
 10604                           fsr2l	equ	0xFD9
 10605                           status	equ	0xFD8
 10606                           
 10607 ;; *************** function _StartI2C *****************
 10608 ;; Defined at:
 10609 ;;		line 48 in file "swI2C.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;		None
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;		None
 10614 ;; Return value:  Size  Location     Type
 10615 ;;		None               void
 10616 ;; Registers used:
 10617 ;;		wreg, status,2, status,0, cstack
 10618 ;; Tracked objects:
 10619 ;;		On entry : 0/0
 10620 ;;		On exit  : 0/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10623 ;;      Params:         0       0       0       0
 10624 ;;      Locals:         0       0       0       0
 10625 ;;      Temps:          0       0       0       0
 10626 ;;      Totals:         0       0       0       0
 10627 ;;Total ram usage:        0 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:   10
 10630 ;; This function calls:
 10631 ;;		_DelayI2C
 10632 ;; This function is called by:
 10633 ;;		_RTCGetDateTime
 10634 ;;		_RTCSetTime
 10635 ;;		_AckPolling
 10636 ;;		_LM75Init
 10637 ;;		_LM75GetTemp
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           	psect	text60
 10642  001D00                     __ptext60:
 10643                           	opt stack 0
 10644  001D00                     _StartI2C:
 10645                           	opt stack 18
 10646                           
 10647                           ;swI2C.c: 49: (TRISB4 = 0xFF);
 10648                           
 10649                           ;incstack = 0
 10650  001D00  8893               	bsf	3987,4,c	;volatile
 10651                           
 10652                           ;swI2C.c: 50: (TRISB6 = 0xFF);
 10653  001D02  8C93               	bsf	3987,6,c	;volatile
 10654                           
 10655                           ;swI2C.c: 51: (TRISB4 = 0x00);
 10656  001D04  9893               	bcf	3987,4,c	;volatile
 10657                           
 10658                           ;swI2C.c: 52: DelayI2C(15);
 10659  001D06  0E0F               	movlw	15
 10660  001D08  ECA3  F00E         	call	_DelayI2C
 10661                           
 10662                           ;swI2C.c: 53: (TRISB6 = 0x00);
 10663  001D0C  9C93               	bcf	3987,6,c	;volatile
 10664                           
 10665                           ;swI2C.c: 54: DelayI2C(25);
 10666  001D0E  0E19               	movlw	25
 10667  001D10  EFA3  F00E         	goto	_DelayI2C
 10668  001D14                     __end_of_StartI2C:
 10669                           	opt stack 0
 10670                           tblptru	equ	0xFF8
 10671                           tblptrh	equ	0xFF7
 10672                           tblptrl	equ	0xFF6
 10673                           tablat	equ	0xFF5
 10674                           prodh	equ	0xFF4
 10675                           prodl	equ	0xFF3
 10676                           intcon	equ	0xFF2
 10677                           intcon2	equ	0xFF1
 10678                           postinc0	equ	0xFEE
 10679                           wreg	equ	0xFE8
 10680                           indf1	equ	0xFE7
 10681                           fsr1h	equ	0xFE2
 10682                           fsr1l	equ	0xFE1
 10683                           indf2	equ	0xFDF
 10684                           postinc2	equ	0xFDE
 10685                           postdec2	equ	0xFDD
 10686                           plusw2	equ	0xFDB
 10687                           fsr2h	equ	0xFDA
 10688                           fsr2l	equ	0xFD9
 10689                           status	equ	0xFD8
 10690                           
 10691 ;; *************** function _RecieveI2C *****************
 10692 ;; Defined at:
 10693 ;;		line 71 in file "swI2C.c"
 10694 ;; Parameters:    Size  Location     Type
 10695 ;;  ack             1    wreg     unsigned char 
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;  ack             1   24[COMRAM] unsigned char 
 10698 ;;  bitNo           1   26[COMRAM] unsigned char 
 10699 ;;  byte            1   25[COMRAM] unsigned char 
 10700 ;; Return value:  Size  Location     Type
 10701 ;;                  1    wreg      unsigned char 
 10702 ;; Registers used:
 10703 ;;		wreg, status,2, status,0, cstack
 10704 ;; Tracked objects:
 10705 ;;		On entry : 0/0
 10706 ;;		On exit  : 0/0
 10707 ;;		Unchanged: 0/0
 10708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10709 ;;      Params:         0       0       0       0
 10710 ;;      Locals:         3       0       0       0
 10711 ;;      Temps:          0       0       0       0
 10712 ;;      Totals:         3       0       0       0
 10713 ;;Total ram usage:        3 bytes
 10714 ;; Hardware stack levels used:    1
 10715 ;; Hardware stack levels required when called:   10
 10716 ;; This function calls:
 10717 ;;		_DelayI2C
 10718 ;; This function is called by:
 10719 ;;		_RTCGetDateTime
 10720 ;;		_LM75GetTemp
 10721 ;; This function uses a non-reentrant model
 10722 ;;
 10723                           
 10724                           	psect	text61
 10725  001498                     __ptext61:
 10726                           	opt stack 0
 10727  001498                     _RecieveI2C:
 10728                           	opt stack 18
 10729                           
 10730                           ;incstack = 0
 10731                           ;RecieveI2C@ack stored from wreg
 10732  001498  6E19               	movwf	RecieveI2C@ack,c
 10733                           
 10734                           ;swI2C.c: 72: unsigned char bitNo, byte = 0;
 10735  00149A  6A1A               	clrf	RecieveI2C@byte,c
 10736                           
 10737                           ;swI2C.c: 74: (TRISB4 = 0xFF);
 10738  00149C  8893               	bsf	3987,4,c	;volatile
 10739                           
 10740                           ;swI2C.c: 75: for (bitNo = 0; bitNo < 8; bitNo++) {
 10741  00149E  6A1B               	clrf	RecieveI2C@bitNo,c
 10742  0014A0                     l5028:
 10743                           
 10744                           ;swI2C.c: 76: DelayI2C(10);
 10745  0014A0  0E0A               	movlw	10
 10746  0014A2  ECA3  F00E         	call	_DelayI2C
 10747                           
 10748                           ;swI2C.c: 77: byte <<= 1;
 10749  0014A6  90D8               	bcf	status,0,c
 10750  0014A8  361A               	rlcf	RecieveI2C@byte,f,c
 10751                           
 10752                           ;swI2C.c: 79: (TRISB6 = 0xFF);
 10753  0014AA  8C93               	bsf	3987,6,c	;volatile
 10754  0014AC                     l134:
 10755  0014AC  AC81               	btfss	3969,6,c	;volatile
 10756  0014AE  D7FE               	goto	l134
 10757                           
 10758                           ;swI2C.c: 81: DelayI2C(10);
 10759  0014B0  0E0A               	movlw	10
 10760  0014B2  ECA3  F00E         	call	_DelayI2C
 10761                           
 10762                           ;swI2C.c: 83: if (PORTBbits.RB4 == 0x01) {
 10763  0014B6  B881               	btfsc	3969,4,c	;volatile
 10764                           
 10765                           ;swI2C.c: 84: byte += 1;
 10766  0014B8  2A1A               	incf	RecieveI2C@byte,f,c
 10767                           
 10768                           ;swI2C.c: 85: }
 10769                           ;swI2C.c: 86: DelayI2C(10);
 10770  0014BA  0E0A               	movlw	10
 10771  0014BC  ECA3  F00E         	call	_DelayI2C
 10772                           
 10773                           ;swI2C.c: 87: (TRISB6 = 0x00);
 10774  0014C0  9C93               	bcf	3987,6,c	;volatile
 10775                           
 10776                           ;swI2C.c: 88: DelayI2C(25);
 10777  0014C2  0E19               	movlw	25
 10778  0014C4  ECA3  F00E         	call	_DelayI2C
 10779  0014C8  2A1B               	incf	RecieveI2C@bitNo,f,c
 10780  0014CA  0E07               	movlw	7
 10781  0014CC  641B               	cpfsgt	RecieveI2C@bitNo,c
 10782  0014CE  D7E8               	goto	l5028
 10783                           
 10784                           ;swI2C.c: 89: }
 10785                           ;swI2C.c: 91: if (ack) {
 10786  0014D0  5019               	movf	RecieveI2C@ack,w,c
 10787  0014D2  E002               	bz	l138
 10788                           
 10789                           ;swI2C.c: 92: (TRISB4 = 0x00);
 10790  0014D4  9893               	bcf	3987,4,c	;volatile
 10791                           
 10792                           ;swI2C.c: 93: } else {
 10793  0014D6  D001               	goto	l5052
 10794  0014D8                     l138:
 10795                           
 10796                           ;swI2C.c: 94: (TRISB4 = 0xFF);
 10797  0014D8  8893               	bsf	3987,4,c	;volatile
 10798  0014DA                     l5052:
 10799                           
 10800                           ;swI2C.c: 95: }
 10801                           ;swI2C.c: 97: DelayI2C(10);
 10802  0014DA  0E0A               	movlw	10
 10803  0014DC  ECA3  F00E         	call	_DelayI2C
 10804                           
 10805                           ;swI2C.c: 98: (TRISB6 = 0xFF);
 10806  0014E0  8C93               	bsf	3987,6,c	;volatile
 10807                           
 10808                           ;swI2C.c: 99: DelayI2C(25);
 10809  0014E2  0E19               	movlw	25
 10810  0014E4  ECA3  F00E         	call	_DelayI2C
 10811                           
 10812                           ;swI2C.c: 100: (TRISB6 = 0x00);
 10813  0014E8  9C93               	bcf	3987,6,c	;volatile
 10814                           
 10815                           ;swI2C.c: 101: DelayI2C(25);
 10816  0014EA  0E19               	movlw	25
 10817  0014EC  ECA3  F00E         	call	_DelayI2C
 10818                           
 10819                           ;swI2C.c: 102: (TRISB4 = 0xFF);
 10820  0014F0  8893               	bsf	3987,4,c	;volatile
 10821                           
 10822                           ;swI2C.c: 103: DelayI2C(10);
 10823  0014F2  0E0A               	movlw	10
 10824  0014F4  ECA3  F00E         	call	_DelayI2C
 10825                           
 10826                           ;swI2C.c: 104: return byte;
 10827  0014F8  501A               	movf	RecieveI2C@byte,w,c
 10828  0014FA  0012               	return	
 10829  0014FC                     __end_of_RecieveI2C:
 10830                           	opt stack 0
 10831                           tblptru	equ	0xFF8
 10832                           tblptrh	equ	0xFF7
 10833                           tblptrl	equ	0xFF6
 10834                           tablat	equ	0xFF5
 10835                           prodh	equ	0xFF4
 10836                           prodl	equ	0xFF3
 10837                           intcon	equ	0xFF2
 10838                           intcon2	equ	0xFF1
 10839                           postinc0	equ	0xFEE
 10840                           wreg	equ	0xFE8
 10841                           indf1	equ	0xFE7
 10842                           fsr1h	equ	0xFE2
 10843                           fsr1l	equ	0xFE1
 10844                           indf2	equ	0xFDF
 10845                           postinc2	equ	0xFDE
 10846                           postdec2	equ	0xFDD
 10847                           plusw2	equ	0xFDB
 10848                           fsr2h	equ	0xFDA
 10849                           fsr2l	equ	0xFD9
 10850                           status	equ	0xFD8
 10851                           
 10852 ;; *************** function _DelayI2C *****************
 10853 ;; Defined at:
 10854 ;;		line 38 in file "swI2C.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;  delay           1    wreg     unsigned char 
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  delay           1   23[COMRAM] unsigned char 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;		None               void
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10868 ;;      Params:         0       0       0       0
 10869 ;;      Locals:         1       0       0       0
 10870 ;;      Temps:          0       0       0       0
 10871 ;;      Totals:         1       0       0       0
 10872 ;;Total ram usage:        1 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    9
 10875 ;; This function calls:
 10876 ;;		_DelayUs
 10877 ;; This function is called by:
 10878 ;;		_StartI2C
 10879 ;;		_StopI2C
 10880 ;;		_RecieveI2C
 10881 ;;		_TransmitI2C
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           	psect	text62
 10886  001D46                     __ptext62:
 10887                           	opt stack 0
 10888  001D46                     _DelayI2C:
 10889                           	opt stack 18
 10890                           
 10891                           ;incstack = 0
 10892                           ;DelayI2C@delay stored from wreg
 10893  001D46  6E18               	movwf	DelayI2C@delay,c
 10894                           
 10895                           ;swI2C.c: 40: DelayUs(delay);
 10896  001D48  C018  F016         	movff	DelayI2C@delay,DelayUs@us
 10897  001D4C  6A17               	clrf	DelayUs@us+1,c
 10898  001D4E  EF5C  F00E         	goto	l4876	;wreg free
 10899  001D52                     __end_of_DelayI2C:
 10900                           	opt stack 0
 10901                           tblptru	equ	0xFF8
 10902                           tblptrh	equ	0xFF7
 10903                           tblptrl	equ	0xFF6
 10904                           tablat	equ	0xFF5
 10905                           prodh	equ	0xFF4
 10906                           prodl	equ	0xFF3
 10907                           intcon	equ	0xFF2
 10908                           intcon2	equ	0xFF1
 10909                           postinc0	equ	0xFEE
 10910                           wreg	equ	0xFE8
 10911                           indf1	equ	0xFE7
 10912                           fsr1h	equ	0xFE2
 10913                           fsr1l	equ	0xFE1
 10914                           indf2	equ	0xFDF
 10915                           postinc2	equ	0xFDE
 10916                           postdec2	equ	0xFDD
 10917                           plusw2	equ	0xFDB
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922 ;; *************** function _DelayUs *****************
 10923 ;; Defined at:
 10924 ;;		line 55 in file "delay.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;  us              2   21[COMRAM] int 
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;		None
 10929 ;; Return value:  Size  Location     Type
 10930 ;;		None               void
 10931 ;; Registers used:
 10932 ;;		wreg, status,2, status,0, cstack
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10938 ;;      Params:         2       0       0       0
 10939 ;;      Locals:         0       0       0       0
 10940 ;;      Temps:          0       0       0       0
 10941 ;;      Totals:         2       0       0       0
 10942 ;;Total ram usage:        2 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    8
 10945 ;; This function calls:
 10946 ;;		_DelayFor12TCY
 10947 ;; This function is called by:
 10948 ;;		_DelayI2C
 10949 ;; This function uses a non-reentrant model
 10950 ;;
 10951                           
 10952                           	psect	text63
 10953  001CAC                     __ptext63:
 10954                           	opt stack 0
 10955  001CAC                     _DelayUs:
 10956                           	opt stack 18
 10957                           
 10958                           ;delay.c: 56: while(us != 0) {
 10959                           
 10960                           ;incstack = 0
 10961  001CAC  D005               	goto	l4876
 10962  001CAE                     l4872:
 10963                           
 10964                           ;delay.c: 57: DelayFor12TCY();
 10965  001CAE  EC0D  F00E         	call	_DelayFor12TCY	;wreg free
 10966                           
 10967                           ;delay.c: 58: us--;
 10968  001CB2  0616               	decf	DelayUs@us,f,c
 10969  001CB4  A0D8               	btfss	status,0,c
 10970  001CB6  0617               	decf	DelayUs@us+1,f,c
 10971  001CB8                     l4876:
 10972  001CB8  5017               	movf	DelayUs@us+1,w,c
 10973  001CBA  1016               	iorwf	DelayUs@us,w,c
 10974  001CBC  B4D8               	btfsc	status,2,c
 10975  001CBE  0012               	return	
 10976  001CC0  D7F6               	goto	l4872
 10977  001CC2                     __end_of_DelayUs:
 10978                           	opt stack 0
 10979                           tblptru	equ	0xFF8
 10980                           tblptrh	equ	0xFF7
 10981                           tblptrl	equ	0xFF6
 10982                           tablat	equ	0xFF5
 10983                           prodh	equ	0xFF4
 10984                           prodl	equ	0xFF3
 10985                           intcon	equ	0xFF2
 10986                           intcon2	equ	0xFF1
 10987                           postinc0	equ	0xFEE
 10988                           wreg	equ	0xFE8
 10989                           indf1	equ	0xFE7
 10990                           fsr1h	equ	0xFE2
 10991                           fsr1l	equ	0xFE1
 10992                           indf2	equ	0xFDF
 10993                           postinc2	equ	0xFDE
 10994                           postdec2	equ	0xFDD
 10995                           plusw2	equ	0xFDB
 10996                           fsr2h	equ	0xFDA
 10997                           fsr2l	equ	0xFD9
 10998                           status	equ	0xFD8
 10999                           
 11000 ;; *************** function _DelayFor12TCY *****************
 11001 ;; Defined at:
 11002 ;;		line 38 in file "delay.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;		None
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;		None
 11007 ;; Return value:  Size  Location     Type
 11008 ;;		None               void
 11009 ;; Registers used:
 11010 ;;		None
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11016 ;;      Params:         0       0       0       0
 11017 ;;      Locals:         0       0       0       0
 11018 ;;      Temps:          0       0       0       0
 11019 ;;      Totals:         0       0       0       0
 11020 ;;Total ram usage:        0 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:    7
 11023 ;; This function calls:
 11024 ;;		Nothing
 11025 ;; This function is called by:
 11026 ;;		_DelayUs
 11027 ;; This function uses a non-reentrant model
 11028 ;;
 11029                           
 11030                           	psect	text64
 11031  001C1A                     __ptext64:
 11032                           	opt stack 0
 11033  001C1A                     _DelayFor12TCY:
 11034                           	opt stack 18
 11035                           
 11036                           ;delay.c: 39: __nop();
 11037                           
 11038                           ;incstack = 0
 11039  001C1A  F000               	nop	
 11040                           
 11041                           ;delay.c: 40: __nop();
 11042  001C1C  F000               	nop	
 11043                           
 11044                           ;delay.c: 41: __nop();
 11045  001C1E  F000               	nop	
 11046                           
 11047                           ;delay.c: 42: __nop();
 11048  001C20  F000               	nop	
 11049                           
 11050                           ;delay.c: 43: __nop();
 11051  001C22  F000               	nop	
 11052                           
 11053                           ;delay.c: 44: __nop();
 11054  001C24  F000               	nop	
 11055                           
 11056                           ;delay.c: 45: __nop();
 11057  001C26  F000               	nop	
 11058                           
 11059                           ;delay.c: 46: __nop();
 11060  001C28  F000               	nop	
 11061                           
 11062                           ;delay.c: 47: __nop();
 11063  001C2A  F000               	nop	
 11064                           
 11065                           ;delay.c: 48: __nop();
 11066  001C2C  F000               	nop	
 11067                           
 11068                           ;delay.c: 49: __nop();
 11069  001C2E  F000               	nop	
 11070                           
 11071                           ;delay.c: 50: __nop();
 11072  001C30  F000               	nop	
 11073  001C32  0012               	return	
 11074  001C34                     __end_of_DelayFor12TCY:
 11075                           	opt stack 0
 11076                           tblptru	equ	0xFF8
 11077                           tblptrh	equ	0xFF7
 11078                           tblptrl	equ	0xFF6
 11079                           tablat	equ	0xFF5
 11080                           prodh	equ	0xFF4
 11081                           prodl	equ	0xFF3
 11082                           intcon	equ	0xFF2
 11083                           intcon2	equ	0xFF1
 11084                           postinc0	equ	0xFEE
 11085                           wreg	equ	0xFE8
 11086                           indf1	equ	0xFE7
 11087                           fsr1h	equ	0xFE2
 11088                           fsr1l	equ	0xFE1
 11089                           indf2	equ	0xFDF
 11090                           postinc2	equ	0xFDE
 11091                           postdec2	equ	0xFDD
 11092                           plusw2	equ	0xFDB
 11093                           fsr2h	equ	0xFDA
 11094                           fsr2l	equ	0xFD9
 11095                           status	equ	0xFD8
 11096                           
 11097 ;; *************** function _ClearDisplay *****************
 11098 ;; Defined at:
 11099 ;;		line 95 in file "display.c"
 11100 ;; Parameters:    Size  Location     Type
 11101 ;;		None
 11102 ;; Auto vars:     Size  Location     Type
 11103 ;;  i               1   21[COMRAM] unsigned char 
 11104 ;; Return value:  Size  Location     Type
 11105 ;;		None               void
 11106 ;; Registers used:
 11107 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11108 ;; Tracked objects:
 11109 ;;		On entry : 0/0
 11110 ;;		On exit  : F/0
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11113 ;;      Params:         0       0       0       0
 11114 ;;      Locals:         1       0       0       0
 11115 ;;      Temps:          0       0       0       0
 11116 ;;      Totals:         1       0       0       0
 11117 ;;Total ram usage:        1 bytes
 11118 ;; Hardware stack levels used:    1
 11119 ;; Hardware stack levels required when called:    7
 11120 ;; This function calls:
 11121 ;;		Nothing
 11122 ;; This function is called by:
 11123 ;;		_DisplayInit
 11124 ;;		_DisplayText
 11125 ;;		_TimeNumerical
 11126 ;;		_ScrollTime
 11127 ;;		_BinaryTime
 11128 ;; This function uses a non-reentrant model
 11129 ;;
 11130                           
 11131                           	psect	text65
 11132  001C66                     __ptext65:
 11133                           	opt stack 0
 11134  001C66                     _ClearDisplay:
 11135                           	opt stack 21
 11136                           
 11137                           ;display.c: 98: for (uint8_t i = 0; i < 15; i++) {
 11138                           
 11139                           ;incstack = 0
 11140  001C66  6A16               	clrf	ClearDisplay@i,c
 11141  001C68                     l4886:
 11142                           
 11143                           ;display.c: 99: display.cols[i] = 0x00;
 11144  001C68  5016               	movf	ClearDisplay@i,w,c
 11145  001C6A  0100               	movlb	0	; () banked
 11146  001C6C  0F81               	addlw	low _display	;volatile
 11147  001C6E  6ED9               	movwf	fsr2l,c
 11148  001C70  6ADA               	clrf	fsr2h,c
 11149  001C72  6ADF               	clrf	indf2,c
 11150                           
 11151                           ; BSR set to: 0
 11152  001C74  2A16               	incf	ClearDisplay@i,f,c
 11153                           
 11154                           ; BSR set to: 0
 11155  001C76  0E0E               	movlw	14
 11156  001C78  6416               	cpfsgt	ClearDisplay@i,c
 11157  001C7A  D7F6               	goto	l4886
 11158  001C7C  0C0E               	retlw	14
 11159  001C7E                     __end_of_ClearDisplay:
 11160                           	opt stack 0
 11161                           tblptru	equ	0xFF8
 11162                           tblptrh	equ	0xFF7
 11163                           tblptrl	equ	0xFF6
 11164                           tablat	equ	0xFF5
 11165                           prodh	equ	0xFF4
 11166                           prodl	equ	0xFF3
 11167                           intcon	equ	0xFF2
 11168                           intcon2	equ	0xFF1
 11169                           postinc0	equ	0xFEE
 11170                           wreg	equ	0xFE8
 11171                           indf1	equ	0xFE7
 11172                           fsr1h	equ	0xFE2
 11173                           fsr1l	equ	0xFE1
 11174                           indf2	equ	0xFDF
 11175                           postinc2	equ	0xFDE
 11176                           postdec2	equ	0xFDD
 11177                           plusw2	equ	0xFDB
 11178                           fsr2h	equ	0xFDA
 11179                           fsr2l	equ	0xFD9
 11180                           status	equ	0xFD8
 11181                           
 11182 ;; *************** function _low_isr *****************
 11183 ;; Defined at:
 11184 ;;		line 54 in file "interrupts.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;		None
 11187 ;; Auto vars:     Size  Location     Type
 11188 ;;		None
 11189 ;; Return value:  Size  Location     Type
 11190 ;;		None               void
 11191 ;; Registers used:
 11192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11193 ;; Tracked objects:
 11194 ;;		On entry : 0/0
 11195 ;;		On exit  : 0/0
 11196 ;;		Unchanged: 0/0
 11197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11198 ;;      Params:         0       0       0       0
 11199 ;;      Locals:         0       0       0       0
 11200 ;;      Temps:          5       0       0       0
 11201 ;;      Totals:         5       0       0       0
 11202 ;;Total ram usage:        5 bytes
 11203 ;; Hardware stack levels used:    1
 11204 ;; Hardware stack levels required when called:    6
 11205 ;; This function calls:
 11206 ;;		_ButtonCheck
 11207 ;; This function is called by:
 11208 ;;		Interrupt level 1
 11209 ;; This function uses a non-reentrant model
 11210 ;;
 11211                           
 11212                           	psect	intcodelo
 11213  000018                     __pintcodelo:
 11214                           	opt stack 0
 11215  000018                     _low_isr:
 11216                           	opt stack 17
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;incstack = 0
 11220  000018  CFD8 F008          	movff	status,??_low_isr
 11221  00001C  CFE8 F009          	movff	wreg,??_low_isr+1
 11222  000020  CFE0 F00A          	movff	bsr,??_low_isr+2
 11223  000024  CFD9 F00B          	movff	fsr2l,??_low_isr+3
 11224  000028  CFDA F00C          	movff	fsr2h,??_low_isr+4
 11225                           
 11226                           ;interrupts.c: 56: if ((TMR3IE) && (TMR3IF)) {
 11227  00002C  B2A0               	btfsc	4000,1,c	;volatile
 11228  00002E  A2A1               	btfss	4001,1,c	;volatile
 11229  000030  D011               	goto	i1l338
 11230                           
 11231                           ;interrupts.c: 57: milliseconds++;
 11232  000032  2A34               	incf	_milliseconds,f,c	;volatile
 11233  000034  0E00               	movlw	0
 11234  000036  2235               	addwfc	_milliseconds+1,f,c	;volatile
 11235  000038  2236               	addwfc	_milliseconds+2,f,c	;volatile
 11236  00003A  2237               	addwfc	_milliseconds+3,f,c	;volatile
 11237                           
 11238                           ;interrupts.c: 58: tmrCount++;
 11239  00003C  2A38               	incf	_tmrCount,f,c	;volatile
 11240  00003E  2239               	addwfc	_tmrCount+1,f,c	;volatile
 11241  000040  223A               	addwfc	_tmrCount+2,f,c	;volatile
 11242  000042  223B               	addwfc	_tmrCount+3,f,c	;volatile
 11243                           
 11244                           ;interrupts.c: 60: if(tmrCount%2)
 11245  000044  B038               	btfsc	_tmrCount,0,c	;volatile
 11246                           
 11247                           ;interrupts.c: 61: ButtonCheck();
 11248  000046  EC09  F005         	call	_ButtonCheck	;wreg free
 11249                           
 11250                           ;interrupts.c: 63: ((void)(TMR3H=((53717)>>8),TMR3L=((53717)&0xFF)));
 11251  00004A  0ED1               	movlw	209
 11252  00004C  6EB3               	movwf	4019,c	;volatile
 11253  00004E  0ED5               	movlw	213
 11254  000050  6EB2               	movwf	4018,c	;volatile
 11255                           
 11256                           ;interrupts.c: 65: TMR3IF = 0x00;
 11257  000052  92A1               	bcf	4001,1,c	;volatile
 11258  000054                     i1l338:
 11259  000054  C00C  FFDA         	movff	??_low_isr+4,fsr2h
 11260  000058  C00B  FFD9         	movff	??_low_isr+3,fsr2l
 11261  00005C  C00A  FFE0         	movff	??_low_isr+2,bsr
 11262  000060  C009  FFE8         	movff	??_low_isr+1,wreg
 11263  000064  C008  FFD8         	movff	??_low_isr,status
 11264  000068  0010               	retfie	
 11265  00006A                     __end_of_low_isr:
 11266                           	opt stack 0
 11267                           tblptru	equ	0xFF8
 11268                           tblptrh	equ	0xFF7
 11269                           tblptrl	equ	0xFF6
 11270                           tablat	equ	0xFF5
 11271                           prodh	equ	0xFF4
 11272                           prodl	equ	0xFF3
 11273                           intcon	equ	0xFF2
 11274                           intcon2	equ	0xFF1
 11275                           postinc0	equ	0xFEE
 11276                           wreg	equ	0xFE8
 11277                           indf1	equ	0xFE7
 11278                           fsr1h	equ	0xFE2
 11279                           fsr1l	equ	0xFE1
 11280                           bsr	equ	0xFE0
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           postdec2	equ	0xFDD
 11284                           plusw2	equ	0xFDB
 11285                           fsr2h	equ	0xFDA
 11286                           fsr2l	equ	0xFD9
 11287                           status	equ	0xFD8
 11288                           
 11289 ;; *************** function _ButtonCheck *****************
 11290 ;; Defined at:
 11291 ;;		line 62 in file "globals.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;		None
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;  i               1    6[COMRAM] unsigned char 
 11296 ;; Return value:  Size  Location     Type
 11297 ;;		None               void
 11298 ;; Registers used:
 11299 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/0
 11302 ;;		On exit  : F/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11305 ;;      Params:         0       0       0       0
 11306 ;;      Locals:         1       0       0       0
 11307 ;;      Temps:          6       0       0       0
 11308 ;;      Totals:         7       0       0       0
 11309 ;;Total ram usage:        7 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:    5
 11312 ;; This function calls:
 11313 ;;		Nothing
 11314 ;; This function is called by:
 11315 ;;		_low_isr
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           	psect	text67
 11320  000A12                     __ptext67:
 11321                           	opt stack 0
 11322  000A12                     _ButtonCheck:
 11323                           	opt stack 17
 11324  000A12  0E01               	movlw	1
 11325                           
 11326                           ;globals.c: 63: buttons[0]->down = !(PORTCbits.RC2);
 11327                           
 11328                           ;incstack = 0
 11329  000A14  B482               	btfsc	3970,2,c	;volatile
 11330  000A16  0E00               	movlw	0
 11331  000A18  6E01               	movwf	??_ButtonCheck& (0+255),c
 11332  000A1A  0100               	movlb	0	; () banked
 11333  000A1C  5160               	movf	_buttons& (0+255),w,b
 11334  000A1E  D85A               	call	PL6	;call to abstracted procedure
 11335  000A20  0E01               	movlw	1
 11336                           
 11337                           ;globals.c: 64: buttons[1]->down = !(PORTCbits.RC1);
 11338  000A22  B282               	btfsc	3970,1,c	;volatile
 11339  000A24  0E00               	movlw	0
 11340  000A26  6E01               	movwf	??_ButtonCheck& (0+255),c
 11341  000A28  5161               	movf	(_buttons+1)& (0+255),w,b
 11342  000A2A  D854               	call	PL6	;call to abstracted procedure
 11343  000A2C  0E01               	movlw	1
 11344                           
 11345                           ;globals.c: 65: buttons[2]->down = !(PORTCbits.RC0);
 11346  000A2E  B082               	btfsc	3970,0,c	;volatile
 11347  000A30  0E00               	movlw	0
 11348  000A32  6E01               	movwf	??_ButtonCheck& (0+255),c
 11349  000A34  5162               	movf	(_buttons+2)& (0+255),w,b
 11350  000A36  D84E               	call	PL6	;call to abstracted procedure
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;globals.c: 71: for (uint8_t i = 0; i < 3; i++) {
 11354  000A38  6A07               	clrf	ButtonCheck@i,c
 11355  000A3A                     i1l4448:
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;globals.c: 72: if (buttons[i]->debounce > tmrCount)
 11359  000A3A  5007               	movf	ButtonCheck@i,w,c
 11360  000A3C  D844               	call	PL4	;call to abstracted procedure
 11361  000A3E  0E04               	movlw	4
 11362  000A40  26D9               	addwf	fsr2l,f,c
 11363  000A42  CFDE F001          	movff	postinc2,??_ButtonCheck
 11364  000A46  CFDD F002          	movff	postdec2,??_ButtonCheck+1
 11365  000A4A  C001  F003         	movff	??_ButtonCheck,??_ButtonCheck+2
 11366  000A4E  C002  F004         	movff	??_ButtonCheck+1,??_ButtonCheck+3
 11367  000A52  0E00               	movlw	0
 11368  000A54  BE04               	btfsc	(??_ButtonCheck+3)& (0+255),7,c
 11369  000A56  0EFF               	movlw	255
 11370  000A58  6E05               	movwf	(??_ButtonCheck+4)& (0+255),c
 11371  000A5A  6E06               	movwf	(??_ButtonCheck+5)& (0+255),c
 11372  000A5C  5003               	movf	??_ButtonCheck+2,w,c
 11373  000A5E  5C38               	subwf	_tmrCount,w,c	;volatile
 11374  000A60  5004               	movf	??_ButtonCheck+3,w,c
 11375  000A62  5839               	subwfb	_tmrCount+1,w,c	;volatile
 11376  000A64  5005               	movf	??_ButtonCheck+4,w,c
 11377  000A66  583A               	subwfb	_tmrCount+2,w,c	;volatile
 11378  000A68  5006               	movf	??_ButtonCheck+5,w,c
 11379  000A6A  583B               	subwfb	_tmrCount+3,w,c	;volatile
 11380  000A6C  E327               	bnc	i1l4462
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;globals.c: 74: if (buttons[i]->down == 1 && buttons[i]->latched == 0) {
 11384  000A6E  5007               	movf	ButtonCheck@i,w,c
 11385  000A70  D82A               	call	PL4	;call to abstracted procedure
 11386  000A72  A0DF               	btfss	indf2,0,c
 11387  000A74  D015               	goto	i1l1045
 11388                           
 11389                           ; BSR set to: 0
 11390  000A76  5007               	movf	ButtonCheck@i,w,c
 11391  000A78  D826               	call	PL4	;call to abstracted procedure
 11392  000A7A  B2DF               	btfsc	indf2,1,c
 11393  000A7C  D011               	goto	i1l1045
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;globals.c: 75: buttons[i]->latched = 1;
 11397  000A7E  5007               	movf	ButtonCheck@i,w,c
 11398  000A80  D822               	call	PL4	;call to abstracted procedure
 11399  000A82  82DF               	bsf	indf2,1,c
 11400                           
 11401                           ;globals.c: 76: buttons[i]->debounce = tmrCount + 30;
 11402  000A84  0E1E               	movlw	30
 11403  000A86  2438               	addwf	_tmrCount,w,c	;volatile
 11404  000A88  6E01               	movwf	??_ButtonCheck& (0+255),c
 11405  000A8A  0E00               	movlw	0
 11406  000A8C  2039               	addwfc	_tmrCount+1,w,c	;volatile
 11407  000A8E  6E02               	movwf	(??_ButtonCheck+1)& (0+255),c
 11408  000A90  5007               	movf	ButtonCheck@i,w,c
 11409  000A92  D819               	call	PL4	;call to abstracted procedure
 11410  000A94  0E04               	movlw	4
 11411  000A96  26D9               	addwf	fsr2l,f,c
 11412  000A98  C001  FFDE         	movff	??_ButtonCheck,postinc2
 11413  000A9C  C002  FFDD         	movff	??_ButtonCheck+1,postdec2
 11414  000AA0                     i1l1045:
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;globals.c: 77: }
 11418                           ;globals.c: 78: if (buttons[i]->down == 0 && buttons[i]->latched == 1) {
 11419  000AA0  5007               	movf	ButtonCheck@i,w,c
 11420  000AA2  D811               	call	PL4	;call to abstracted procedure
 11421  000AA4  B0DF               	btfsc	indf2,0,c
 11422  000AA6  D00A               	goto	i1l4462
 11423                           
 11424                           ; BSR set to: 0
 11425  000AA8  5007               	movf	ButtonCheck@i,w,c
 11426  000AAA  D80D               	call	PL4	;call to abstracted procedure
 11427  000AAC  A2DF               	btfss	indf2,1,c
 11428  000AAE  D006               	goto	i1l4462
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;globals.c: 79: buttons[i]->pressed = 1;
 11432  000AB0  5007               	movf	ButtonCheck@i,w,c
 11433  000AB2  D809               	call	PL4	;call to abstracted procedure
 11434  000AB4  84DF               	bsf	indf2,2,c
 11435                           
 11436                           ;globals.c: 80: buttons[i]->latched = 0;
 11437  000AB6  5007               	movf	ButtonCheck@i,w,c
 11438  000AB8  D806               	call	PL4	;call to abstracted procedure
 11439  000ABA  92DF               	bcf	indf2,1,c
 11440  000ABC                     i1l4462:
 11441                           
 11442                           ; BSR set to: 0
 11443  000ABC  2A07               	incf	ButtonCheck@i,f,c
 11444                           
 11445                           ; BSR set to: 0
 11446  000ABE  0E02               	movlw	2
 11447  000AC0  6407               	cpfsgt	ButtonCheck@i,c
 11448  000AC2  D7BB               	goto	i1l4448
 11449  000AC4  0C02               	retlw	2
 11450  000AC6                     __end_of_ButtonCheck:
 11451                           	opt stack 0
 11452  000AC6                     PL4:
 11453                           	opt stack 21
 11454  000AC6  0F60               	addlw	low _buttons
 11455  000AC8  6ED9               	movwf	fsr2l,c
 11456  000ACA  6ADA               	clrf	fsr2h,c
 11457  000ACC  50DF               	movf	indf2,w,c
 11458  000ACE  6ED9               	movwf	fsr2l,c
 11459  000AD0  6ADA               	clrf	fsr2h,c
 11460  000AD2  0012               	return	
 11461  000AD4                     __end_ofPL4:
 11462                           	opt stack 0
 11463  000AD4                     PL6:
 11464                           	opt stack 17
 11465  000AD4  6ED9               	movwf	fsr2l,c
 11466  000AD6  6ADA               	clrf	fsr2h,c
 11467  000AD8  50DF               	movf	223,w,c
 11468  000ADA  1801               	xorwf	??_ButtonCheck,w,c
 11469  000ADC  0BFE               	andlw	-2
 11470  000ADE  1801               	xorwf	??_ButtonCheck,w,c
 11471  000AE0  6EDF               	movwf	223,c
 11472  000AE2  0012               	return	
 11473  000AE4                     __end_ofPL6:
 11474                           	opt stack 0
 11475                           tblptru	equ	0xFF8
 11476                           tblptrh	equ	0xFF7
 11477                           tblptrl	equ	0xFF6
 11478                           tablat	equ	0xFF5
 11479                           prodh	equ	0xFF4
 11480                           prodl	equ	0xFF3
 11481                           intcon	equ	0xFF2
 11482                           intcon2	equ	0xFF1
 11483                           postinc0	equ	0xFEE
 11484                           wreg	equ	0xFE8
 11485                           indf1	equ	0xFE7
 11486                           fsr1h	equ	0xFE2
 11487                           fsr1l	equ	0xFE1
 11488                           bsr	equ	0xFE0
 11489                           indf2	equ	0xFDF
 11490                           postinc2	equ	0xFDE
 11491                           postdec2	equ	0xFDD
 11492                           plusw2	equ	0xFDB
 11493                           fsr2h	equ	0xFDA
 11494                           fsr2l	equ	0xFD9
 11495                           status	equ	0xFD8
 11496                           
 11497 ;; *************** function _high_isr *****************
 11498 ;; Defined at:
 11499 ;;		line 39 in file "interrupts.c"
 11500 ;; Parameters:    Size  Location     Type
 11501 ;;		None
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;		None
 11504 ;; Return value:  Size  Location     Type
 11505 ;;		None               void
 11506 ;; Registers used:
 11507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11508 ;; Tracked objects:
 11509 ;;		On entry : 0/0
 11510 ;;		On exit  : 0/0
 11511 ;;		Unchanged: 0/0
 11512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11513 ;;      Params:         0       0       0       0
 11514 ;;      Locals:         0       0       0       0
 11515 ;;      Temps:          2       0       0       0
 11516 ;;      Totals:         2       0       0       0
 11517 ;;Total ram usage:        2 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    4
 11520 ;; This function calls:
 11521 ;;		_ShiftOutNextRow
 11522 ;; This function is called by:
 11523 ;;		Interrupt level 2
 11524 ;; This function uses a non-reentrant model
 11525 ;;
 11526                           
 11527                           	psect	intcode
 11528  000008                     __pintcode:
 11529                           	opt stack 0
 11530  000008                     _high_isr:
 11531                           	opt stack 17
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;incstack = 0
 11535  000008  CFD9 F014          	movff	fsr2l,??_high_isr
 11536  00000C  CFDA F015          	movff	fsr2h,??_high_isr+1
 11537  000010  EF97  F00D         	goto	int_func
 11538                           tblptru	equ	0xFF8
 11539                           tblptrh	equ	0xFF7
 11540                           tblptrl	equ	0xFF6
 11541                           tablat	equ	0xFF5
 11542                           prodh	equ	0xFF4
 11543                           prodl	equ	0xFF3
 11544                           intcon	equ	0xFF2
 11545                           intcon2	equ	0xFF1
 11546                           postinc0	equ	0xFEE
 11547                           wreg	equ	0xFE8
 11548                           indf1	equ	0xFE7
 11549                           fsr1h	equ	0xFE2
 11550                           fsr1l	equ	0xFE1
 11551                           bsr	equ	0xFE0
 11552                           indf2	equ	0xFDF
 11553                           postinc2	equ	0xFDE
 11554                           postdec2	equ	0xFDD
 11555                           plusw2	equ	0xFDB
 11556                           fsr2h	equ	0xFDA
 11557                           fsr2l	equ	0xFD9
 11558                           status	equ	0xFD8
 11559                           
 11560                           	psect	intcode_body
 11561  001B2E                     __pintcode_body:
 11562                           	opt stack 17
 11563  001B2E                     int_func:
 11564                           	opt stack 17
 11565                           
 11566                           ;interrupts.c: 43: if ((TMR0IE) && (TMR0IF)) {
 11567  001B2E  BAF2               	btfsc	intcon,5,c	;volatile
 11568  001B30  A4F2               	btfss	intcon,2,c	;volatile
 11569  001B32  D00B               	goto	i2l333
 11570                           
 11571                           ;interrupts.c: 44: ShiftOutNextRow();
 11572  001B34  EC3F  F00E         	call	_ShiftOutNextRow	;wreg free
 11573                           
 11574                           ;interrupts.c: 46: if((display.activeRow++) == 8) display.activeRow = 0;
 11575  001B38  0100               	movlb	0	; () banked
 11576  001B3A  2B90               	incf	(_display+15)& (0+255),f,b	;volatile
 11577  001B3C  5190               	movf	(_display+15)& (0+255),w,b	;volatile
 11578  001B3E  0A09               	xorlw	9
 11579  001B40  B4D8               	btfsc	status,2,c
 11580                           
 11581                           ; BSR set to: 0
 11582  001B42  6B90               	clrf	(_display+15)& (0+255),b	;volatile
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;interrupts.c: 48: TMR0L = 50;
 11586  001B44  0E32               	movlw	50
 11587  001B46  6ED6               	movwf	4054,c	;volatile
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;interrupts.c: 49: TMR0IF = 0;
 11591  001B48  94F2               	bcf	intcon,2,c	;volatile
 11592  001B4A                     i2l333:
 11593  001B4A  C015  FFDA         	movff	??_high_isr+1,fsr2h
 11594  001B4E  C014  FFD9         	movff	??_high_isr,fsr2l
 11595  001B52  0011               	retfie		f
 11596  001B54                     __end_of_high_isr:
 11597                           	opt stack 0
 11598                           tblptru	equ	0xFF8
 11599                           tblptrh	equ	0xFF7
 11600                           tblptrl	equ	0xFF6
 11601                           tablat	equ	0xFF5
 11602                           prodh	equ	0xFF4
 11603                           prodl	equ	0xFF3
 11604                           intcon	equ	0xFF2
 11605                           intcon2	equ	0xFF1
 11606                           postinc0	equ	0xFEE
 11607                           wreg	equ	0xFE8
 11608                           indf1	equ	0xFE7
 11609                           fsr1h	equ	0xFE2
 11610                           fsr1l	equ	0xFE1
 11611                           bsr	equ	0xFE0
 11612                           indf2	equ	0xFDF
 11613                           postinc2	equ	0xFDE
 11614                           postdec2	equ	0xFDD
 11615                           plusw2	equ	0xFDB
 11616                           fsr2h	equ	0xFDA
 11617                           fsr2l	equ	0xFD9
 11618                           status	equ	0xFD8
 11619                           
 11620 ;; *************** function _ShiftOutNextRow *****************
 11621 ;; Defined at:
 11622 ;;		line 58 in file "display.c"
 11623 ;; Parameters:    Size  Location     Type
 11624 ;;		None
 11625 ;; Auto vars:     Size  Location     Type
 11626 ;;		None
 11627 ;; Return value:  Size  Location     Type
 11628 ;;		None               void
 11629 ;; Registers used:
 11630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11631 ;; Tracked objects:
 11632 ;;		On entry : 0/0
 11633 ;;		On exit  : 0/0
 11634 ;;		Unchanged: 0/0
 11635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11636 ;;      Params:         0       0       0       0
 11637 ;;      Locals:         0       0       0       0
 11638 ;;      Temps:          0       0       0       0
 11639 ;;      Totals:         0       0       0       0
 11640 ;;Total ram usage:        0 bytes
 11641 ;; Hardware stack levels used:    1
 11642 ;; Hardware stack levels required when called:    3
 11643 ;; This function calls:
 11644 ;;		_CollumnData
 11645 ;;		_RowData
 11646 ;;		i2_DelayUs
 11647 ;; This function is called by:
 11648 ;;		_high_isr
 11649 ;; This function uses a non-reentrant model
 11650 ;;
 11651                           
 11652                           	psect	text69
 11653  001C7E                     __ptext69:
 11654                           	opt stack 0
 11655  001C7E                     _ShiftOutNextRow:
 11656                           	opt stack 17
 11657                           
 11658                           ;display.c: 60: CollumnData();
 11659                           
 11660                           ;incstack = 0
 11661  001C7E  EC23  F00C         	call	_CollumnData	;wreg free
 11662                           
 11663                           ;display.c: 61: RowData();
 11664  001C82  EC86  F00C         	call	_RowData	;wreg free
 11665                           
 11666                           ;display.c: 63: (LATC5 = 0x01);
 11667  001C86  8A8B               	bsf	3979,5,c	;volatile
 11668                           
 11669                           ;display.c: 64: DelayUs(1);
 11670  001C88  6A0E               	clrf	i2DelayUs@us+1,c
 11671  001C8A  0E01               	movlw	1
 11672  001C8C  6E0D               	movwf	i2DelayUs@us,c
 11673  001C8E  EC61  F00E         	call	i2_DelayUs	;wreg free
 11674                           
 11675                           ;display.c: 65: (LATC5 = 0x00);
 11676  001C92  9A8B               	bcf	3979,5,c	;volatile
 11677  001C94  0012               	return	
 11678  001C96                     __end_of_ShiftOutNextRow:
 11679                           	opt stack 0
 11680                           tblptru	equ	0xFF8
 11681                           tblptrh	equ	0xFF7
 11682                           tblptrl	equ	0xFF6
 11683                           tablat	equ	0xFF5
 11684                           prodh	equ	0xFF4
 11685                           prodl	equ	0xFF3
 11686                           intcon	equ	0xFF2
 11687                           intcon2	equ	0xFF1
 11688                           postinc0	equ	0xFEE
 11689                           wreg	equ	0xFE8
 11690                           indf1	equ	0xFE7
 11691                           fsr1h	equ	0xFE2
 11692                           fsr1l	equ	0xFE1
 11693                           bsr	equ	0xFE0
 11694                           indf2	equ	0xFDF
 11695                           postinc2	equ	0xFDE
 11696                           postdec2	equ	0xFDD
 11697                           plusw2	equ	0xFDB
 11698                           fsr2h	equ	0xFDA
 11699                           fsr2l	equ	0xFD9
 11700                           status	equ	0xFD8
 11701                           
 11702 ;; *************** function _RowData *****************
 11703 ;; Defined at:
 11704 ;;		line 82 in file "display.c"
 11705 ;; Parameters:    Size  Location     Type
 11706 ;;		None
 11707 ;; Auto vars:     Size  Location     Type
 11708 ;;  y               1   18[COMRAM] unsigned char 
 11709 ;; Return value:  Size  Location     Type
 11710 ;;		None               void
 11711 ;; Registers used:
 11712 ;;		wreg, status,2, status,0, cstack
 11713 ;; Tracked objects:
 11714 ;;		On entry : 0/0
 11715 ;;		On exit  : 0/0
 11716 ;;		Unchanged: 0/0
 11717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11718 ;;      Params:         0       0       0       0
 11719 ;;      Locals:         1       0       0       0
 11720 ;;      Temps:          4       0       0       0
 11721 ;;      Totals:         5       0       0       0
 11722 ;;Total ram usage:        5 bytes
 11723 ;; Hardware stack levels used:    1
 11724 ;; Hardware stack levels required when called:    2
 11725 ;; This function calls:
 11726 ;;		i2_DelayUs
 11727 ;; This function is called by:
 11728 ;;		_ShiftOutNextRow
 11729 ;; This function uses a non-reentrant model
 11730 ;;
 11731                           
 11732                           	psect	text70
 11733  00190C                     __ptext70:
 11734                           	opt stack 0
 11735  00190C                     _RowData:
 11736                           	opt stack 17
 11737                           
 11738                           ;display.c: 83: for (uint8_t y = 8; y > 0; --y) {
 11739                           
 11740                           ;incstack = 0
 11741  00190C  0E08               	movlw	8
 11742  00190E  6E13               	movwf	RowData@y,c
 11743  001910                     i2l4266:
 11744                           
 11745                           ;display.c: 84: if (display.activeRow == (y - 1)) {
 11746  001910  680F               	setf	??_RowData& (0+255),c
 11747  001912  6810               	setf	(??_RowData+1)& (0+255),c
 11748  001914  5013               	movf	RowData@y,w,c
 11749  001916  6E11               	movwf	(??_RowData+2)& (0+255),c
 11750  001918  6A12               	clrf	(??_RowData+3)& (0+255),c
 11751  00191A  500F               	movf	??_RowData,w,c
 11752  00191C  2611               	addwf	??_RowData+2,f,c
 11753  00191E  5010               	movf	??_RowData+1,w,c
 11754  001920  2212               	addwfc	??_RowData+3,f,c
 11755  001922  0100               	movlb	0	; () banked
 11756  001924  5190               	movf	(_display+15)& (0+255),w,b	;volatile
 11757  001926  1811               	xorwf	??_RowData+2,w,c
 11758  001928  1012               	iorwf	??_RowData+3,w,c
 11759  00192A  E102               	bnz	i2l247
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;display.c: 85: (LATC4 = 0x01);
 11763  00192C  888B               	bsf	3979,4,c	;volatile
 11764                           
 11765                           ;display.c: 86: } else {
 11766  00192E  D001               	goto	i2l248
 11767  001930                     i2l247:
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;display.c: 87: (LATC4 = 0x00);
 11771  001930  988B               	bcf	3979,4,c	;volatile
 11772  001932                     i2l248:
 11773                           
 11774                           ; BSR set to: 0
 11775                           ;display.c: 88: }
 11776                           ;display.c: 89: (LATC3 = 0x01);
 11777  001932  868B               	bsf	3979,3,c	;volatile
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;display.c: 90: DelayUs(1);
 11781  001934  6A0E               	clrf	i2DelayUs@us+1,c
 11782  001936  0E01               	movlw	1
 11783  001938  6E0D               	movwf	i2DelayUs@us,c
 11784  00193A  EC61  F00E         	call	i2_DelayUs	;wreg free
 11785                           
 11786                           ;display.c: 91: (LATC3 = 0x00);
 11787  00193E  968B               	bcf	3979,3,c	;volatile
 11788  001940  0613               	decf	RowData@y,f,c
 11789  001942  6613               	tstfsz	RowData@y,c
 11790  001944  D7E5               	goto	i2l4266
 11791  001946  0012               	return	
 11792  001948                     __end_of_RowData:
 11793                           	opt stack 0
 11794                           tblptru	equ	0xFF8
 11795                           tblptrh	equ	0xFF7
 11796                           tblptrl	equ	0xFF6
 11797                           tablat	equ	0xFF5
 11798                           prodh	equ	0xFF4
 11799                           prodl	equ	0xFF3
 11800                           intcon	equ	0xFF2
 11801                           intcon2	equ	0xFF1
 11802                           postinc0	equ	0xFEE
 11803                           wreg	equ	0xFE8
 11804                           indf1	equ	0xFE7
 11805                           fsr1h	equ	0xFE2
 11806                           fsr1l	equ	0xFE1
 11807                           bsr	equ	0xFE0
 11808                           indf2	equ	0xFDF
 11809                           postinc2	equ	0xFDE
 11810                           postdec2	equ	0xFDD
 11811                           plusw2	equ	0xFDB
 11812                           fsr2h	equ	0xFDA
 11813                           fsr2l	equ	0xFD9
 11814                           status	equ	0xFD8
 11815                           
 11816 ;; *************** function _CollumnData *****************
 11817 ;; Defined at:
 11818 ;;		line 68 in file "display.c"
 11819 ;; Parameters:    Size  Location     Type
 11820 ;;		None
 11821 ;; Auto vars:     Size  Location     Type
 11822 ;;  x               1   17[COMRAM] unsigned char 
 11823 ;; Return value:  Size  Location     Type
 11824 ;;		None               void
 11825 ;; Registers used:
 11826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11827 ;; Tracked objects:
 11828 ;;		On entry : 0/0
 11829 ;;		On exit  : 0/0
 11830 ;;		Unchanged: 0/0
 11831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11832 ;;      Params:         0       0       0       0
 11833 ;;      Locals:         1       0       0       0
 11834 ;;      Temps:          3       0       0       0
 11835 ;;      Totals:         4       0       0       0
 11836 ;;Total ram usage:        4 bytes
 11837 ;; Hardware stack levels used:    1
 11838 ;; Hardware stack levels required when called:    2
 11839 ;; This function calls:
 11840 ;;		i2_DelayUs
 11841 ;; This function is called by:
 11842 ;;		_ShiftOutNextRow
 11843 ;; This function uses a non-reentrant model
 11844 ;;
 11845                           
 11846                           	psect	text71
 11847  001846                     __ptext71:
 11848                           	opt stack 0
 11849  001846                     _CollumnData:
 11850                           	opt stack 17
 11851                           
 11852                           ;display.c: 70: for (uint8_t x = 0; x < 15; ++x) {
 11853                           
 11854                           ;incstack = 0
 11855  001846  6A12               	clrf	CollumnData@x,c
 11856  001848                     i2l4248:
 11857                           
 11858                           ;display.c: 71: if (display.cols[14 - x] & (0x01 << display.activeRow)) {
 11859  001848  5012               	movf	CollumnData@x,w,c
 11860  00184A  0100               	movlb	0	; () banked
 11861  00184C  088F               	sublw	low (_display+14)	;volatile
 11862  00184E  6ED9               	movwf	fsr2l,c
 11863  001850  6ADA               	clrf	fsr2h,c
 11864  001852  50DF               	movf	indf2,w,c
 11865  001854  6E0F               	movwf	??_CollumnData& (0+255),c
 11866  001856  C090  F010         	movff	_display+15,??_CollumnData+1	;volatile
 11867  00185A  0E01               	movlw	1
 11868  00185C  6E11               	movwf	(??_CollumnData+2)& (0+255),c
 11869  00185E  2A10               	incf	??_CollumnData+1,f,c
 11870  001860  D002               	goto	i2u353_44
 11871  001862                     i2u353_45:
 11872  001862  90D8               	bcf	status,0,c
 11873  001864  3611               	rlcf	??_CollumnData+2,f,c
 11874  001866                     i2u353_44:
 11875  001866  2E10               	decfsz	??_CollumnData+1,f,c
 11876  001868  D7FC               	goto	i2u353_45
 11877  00186A  5011               	movf	??_CollumnData+2,w,c
 11878  00186C  140F               	andwf	??_CollumnData,w,c
 11879  00186E  E002               	bz	i2l240
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;display.c: 72: (LATC4 = 0x01);
 11883  001870  888B               	bsf	3979,4,c	;volatile
 11884                           
 11885                           ;display.c: 73: } else {
 11886  001872  D001               	goto	i2l241
 11887  001874                     i2l240:
 11888                           
 11889                           ; BSR set to: 0
 11890                           ;display.c: 74: (LATC4 = 0x00);
 11891  001874  988B               	bcf	3979,4,c	;volatile
 11892  001876                     i2l241:
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;display.c: 75: }
 11896                           ;display.c: 76: (LATC3 = 0x01);
 11897  001876  868B               	bsf	3979,3,c	;volatile
 11898                           
 11899                           ; BSR set to: 0
 11900                           ;display.c: 77: DelayUs(1);
 11901  001878  6A0E               	clrf	i2DelayUs@us+1,c
 11902  00187A  0E01               	movlw	1
 11903  00187C  6E0D               	movwf	i2DelayUs@us,c
 11904  00187E  EC61  F00E         	call	i2_DelayUs	;wreg free
 11905                           
 11906                           ;display.c: 78: (LATC3 = 0x00);
 11907  001882  968B               	bcf	3979,3,c	;volatile
 11908  001884  2A12               	incf	CollumnData@x,f,c
 11909  001886  0E0E               	movlw	14
 11910  001888  6412               	cpfsgt	CollumnData@x,c
 11911  00188A  D7DE               	goto	i2l4248
 11912  00188C  0C0E               	retlw	14
 11913  00188E                     __end_of_CollumnData:
 11914                           	opt stack 0
 11915                           tblptru	equ	0xFF8
 11916                           tblptrh	equ	0xFF7
 11917                           tblptrl	equ	0xFF6
 11918                           tablat	equ	0xFF5
 11919                           prodh	equ	0xFF4
 11920                           prodl	equ	0xFF3
 11921                           intcon	equ	0xFF2
 11922                           intcon2	equ	0xFF1
 11923                           postinc0	equ	0xFEE
 11924                           wreg	equ	0xFE8
 11925                           indf1	equ	0xFE7
 11926                           fsr1h	equ	0xFE2
 11927                           fsr1l	equ	0xFE1
 11928                           bsr	equ	0xFE0
 11929                           indf2	equ	0xFDF
 11930                           postinc2	equ	0xFDE
 11931                           postdec2	equ	0xFDD
 11932                           plusw2	equ	0xFDB
 11933                           fsr2h	equ	0xFDA
 11934                           fsr2l	equ	0xFD9
 11935                           status	equ	0xFD8
 11936                           
 11937 ;; *************** function i2_DelayUs *****************
 11938 ;; Defined at:
 11939 ;;		line 55 in file "delay.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  us              2   12[COMRAM] int 
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;		None
 11944 ;; Return value:  Size  Location     Type
 11945 ;;		None               void
 11946 ;; Registers used:
 11947 ;;		wreg, status,2, status,0, cstack
 11948 ;; Tracked objects:
 11949 ;;		On entry : 0/0
 11950 ;;		On exit  : 0/0
 11951 ;;		Unchanged: 0/0
 11952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11953 ;;      Params:         2       0       0       0
 11954 ;;      Locals:         0       0       0       0
 11955 ;;      Temps:          0       0       0       0
 11956 ;;      Totals:         2       0       0       0
 11957 ;;Total ram usage:        2 bytes
 11958 ;; Hardware stack levels used:    1
 11959 ;; Hardware stack levels required when called:    1
 11960 ;; This function calls:
 11961 ;;		i2_DelayFor12TCY
 11962 ;; This function is called by:
 11963 ;;		_ShiftOutNextRow
 11964 ;;		_CollumnData
 11965 ;;		_RowData
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           	psect	text72
 11970  001CC2                     __ptext72:
 11971                           	opt stack 0
 11972  001CC2                     i2_DelayUs:
 11973                           	opt stack 18
 11974                           
 11975                           ;delay.c: 56: while(us != 0) {
 11976                           
 11977                           ;incstack = 0
 11978  001CC2  D005               	goto	i2l4078
 11979  001CC4                     i2l4074:
 11980                           
 11981                           ;delay.c: 57: DelayFor12TCY();
 11982  001CC4  EC1A  F00E         	call	i2_DelayFor12TCY	;wreg free
 11983                           
 11984                           ;delay.c: 58: us--;
 11985  001CC8  060D               	decf	i2DelayUs@us,f,c
 11986  001CCA  A0D8               	btfss	status,0,c
 11987  001CCC  060E               	decf	i2DelayUs@us+1,f,c
 11988  001CCE                     i2l4078:
 11989  001CCE  500E               	movf	i2DelayUs@us+1,w,c
 11990  001CD0  100D               	iorwf	i2DelayUs@us,w,c
 11991  001CD2  B4D8               	btfsc	status,2,c
 11992  001CD4  0012               	return	
 11993  001CD6  D7F6               	goto	i2l4074
 11994  001CD8                     __end_ofi2_DelayUs:
 11995                           	opt stack 0
 11996                           tblptru	equ	0xFF8
 11997                           tblptrh	equ	0xFF7
 11998                           tblptrl	equ	0xFF6
 11999                           tablat	equ	0xFF5
 12000                           prodh	equ	0xFF4
 12001                           prodl	equ	0xFF3
 12002                           intcon	equ	0xFF2
 12003                           intcon2	equ	0xFF1
 12004                           postinc0	equ	0xFEE
 12005                           wreg	equ	0xFE8
 12006                           indf1	equ	0xFE7
 12007                           fsr1h	equ	0xFE2
 12008                           fsr1l	equ	0xFE1
 12009                           bsr	equ	0xFE0
 12010                           indf2	equ	0xFDF
 12011                           postinc2	equ	0xFDE
 12012                           postdec2	equ	0xFDD
 12013                           plusw2	equ	0xFDB
 12014                           fsr2h	equ	0xFDA
 12015                           fsr2l	equ	0xFD9
 12016                           status	equ	0xFD8
 12017                           
 12018 ;; *************** function i2_DelayFor12TCY *****************
 12019 ;; Defined at:
 12020 ;;		line 38 in file "delay.c"
 12021 ;; Parameters:    Size  Location     Type
 12022 ;;		None
 12023 ;; Auto vars:     Size  Location     Type
 12024 ;;		None
 12025 ;; Return value:  Size  Location     Type
 12026 ;;		None               void
 12027 ;; Registers used:
 12028 ;;		None
 12029 ;; Tracked objects:
 12030 ;;		On entry : 0/0
 12031 ;;		On exit  : 0/0
 12032 ;;		Unchanged: 0/0
 12033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12034 ;;      Params:         0       0       0       0
 12035 ;;      Locals:         0       0       0       0
 12036 ;;      Temps:          0       0       0       0
 12037 ;;      Totals:         0       0       0       0
 12038 ;;Total ram usage:        0 bytes
 12039 ;; Hardware stack levels used:    1
 12040 ;; This function calls:
 12041 ;;		Nothing
 12042 ;; This function is called by:
 12043 ;;		i2_DelayUs
 12044 ;; This function uses a non-reentrant model
 12045 ;;
 12046                           
 12047                           	psect	text73
 12048  001C34                     __ptext73:
 12049                           	opt stack 0
 12050  001C34                     i2_DelayFor12TCY:
 12051                           	opt stack 18
 12052                           
 12053                           ;delay.c: 39: __nop();
 12054                           
 12055                           ;incstack = 0
 12056  001C34  F000               	nop	
 12057                           
 12058                           ;delay.c: 40: __nop();
 12059  001C36  F000               	nop	
 12060                           
 12061                           ;delay.c: 41: __nop();
 12062  001C38  F000               	nop	
 12063                           
 12064                           ;delay.c: 42: __nop();
 12065  001C3A  F000               	nop	
 12066                           
 12067                           ;delay.c: 43: __nop();
 12068  001C3C  F000               	nop	
 12069                           
 12070                           ;delay.c: 44: __nop();
 12071  001C3E  F000               	nop	
 12072                           
 12073                           ;delay.c: 45: __nop();
 12074  001C40  F000               	nop	
 12075                           
 12076                           ;delay.c: 46: __nop();
 12077  001C42  F000               	nop	
 12078                           
 12079                           ;delay.c: 47: __nop();
 12080  001C44  F000               	nop	
 12081                           
 12082                           ;delay.c: 48: __nop();
 12083  001C46  F000               	nop	
 12084                           
 12085                           ;delay.c: 49: __nop();
 12086  001C48  F000               	nop	
 12087                           
 12088                           ;delay.c: 50: __nop();
 12089  001C4A  F000               	nop	
 12090  001C4C  0012               	return	
 12091  001C4E                     __end_ofi2_DelayFor12TCY:
 12092                           	opt stack 0
 12093                           tblptru	equ	0xFF8
 12094                           tblptrh	equ	0xFF7
 12095                           tblptrl	equ	0xFF6
 12096                           tablat	equ	0xFF5
 12097                           prodh	equ	0xFF4
 12098                           prodl	equ	0xFF3
 12099                           intcon	equ	0xFF2
 12100                           intcon2	equ	0xFF1
 12101                           postinc0	equ	0xFEE
 12102                           wreg	equ	0xFE8
 12103                           indf1	equ	0xFE7
 12104                           fsr1h	equ	0xFE2
 12105                           fsr1l	equ	0xFE1
 12106                           bsr	equ	0xFE0
 12107                           indf2	equ	0xFDF
 12108                           postinc2	equ	0xFDE
 12109                           postdec2	equ	0xFDD
 12110                           plusw2	equ	0xFDB
 12111                           fsr2h	equ	0xFDA
 12112                           fsr2l	equ	0xFD9
 12113                           status	equ	0xFD8
 12114                           tblptru	equ	0xFF8
 12115                           tblptrh	equ	0xFF7
 12116                           tblptrl	equ	0xFF6
 12117                           tablat	equ	0xFF5
 12118                           prodh	equ	0xFF4
 12119                           prodl	equ	0xFF3
 12120                           intcon	equ	0xFF2
 12121                           intcon2	equ	0xFF1
 12122                           postinc0	equ	0xFEE
 12123                           wreg	equ	0xFE8
 12124                           indf1	equ	0xFE7
 12125                           fsr1h	equ	0xFE2
 12126                           fsr1l	equ	0xFE1
 12127                           bsr	equ	0xFE0
 12128                           indf2	equ	0xFDF
 12129                           postinc2	equ	0xFDE
 12130                           postdec2	equ	0xFDD
 12131                           plusw2	equ	0xFDB
 12132                           fsr2h	equ	0xFDA
 12133                           fsr2l	equ	0xFD9
 12134                           status	equ	0xFD8
 12135                           
 12136                           	psect	rparam
 12137  0000                     tblptru	equ	0xFF8
 12138                           tblptrh	equ	0xFF7
 12139                           tblptrl	equ	0xFF6
 12140                           tablat	equ	0xFF5
 12141                           prodh	equ	0xFF4
 12142                           prodl	equ	0xFF3
 12143                           intcon	equ	0xFF2
 12144                           intcon2	equ	0xFF1
 12145                           postinc0	equ	0xFEE
 12146                           wreg	equ	0xFE8
 12147                           indf1	equ	0xFE7
 12148                           fsr1h	equ	0xFE2
 12149                           fsr1l	equ	0xFE1
 12150                           bsr	equ	0xFE0
 12151                           indf2	equ	0xFDF
 12152                           postinc2	equ	0xFDE
 12153                           postdec2	equ	0xFDD
 12154                           plusw2	equ	0xFDB
 12155                           fsr2h	equ	0xFDA
 12156                           fsr2l	equ	0xFD9
 12157                           status	equ	0xFD8
 12158                           tblptru	equ	0xFF8
 12159                           tblptrh	equ	0xFF7
 12160                           tblptrl	equ	0xFF6
 12161                           tablat	equ	0xFF5
 12162                           prodh	equ	0xFF4
 12163                           prodl	equ	0xFF3
 12164                           intcon	equ	0xFF2
 12165                           intcon2	equ	0xFF1
 12166                           postinc0	equ	0xFEE
 12167                           wreg	equ	0xFE8
 12168                           indf1	equ	0xFE7
 12169                           fsr1h	equ	0xFE2
 12170                           fsr1l	equ	0xFE1
 12171                           bsr	equ	0xFE0
 12172                           indf2	equ	0xFDF
 12173                           postinc2	equ	0xFDE
 12174                           postdec2	equ	0xFDD
 12175                           plusw2	equ	0xFDB
 12176                           fsr2h	equ	0xFDA
 12177                           fsr2l	equ	0xFD9
 12178                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    385
    Data        3
    BSS         100
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     51      74
    BANK0           160     21     102
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 20
		 -> string_SETTIME(CODE[13]), string_ON(CODE[5]), string_AT(CODE[5]), string_IT_IS(CODE[7]), 
		 -> tempString(BANK0[4]), DateStringLong@tstring(BANK0[16]), dateTime.tstring(BANK0[6]), dateTime(BANK0[20]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> string_SETTIME(CODE[13]), string_ON(CODE[5]), string_AT(CODE[5]), string_IT_IS(CODE[7]), 
		 -> tempString(BANK0[4]), DateStringLong@tstring(BANK0[16]), dateTime.tstring(BANK0[6]), dateTime(BANK0[20]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_27(CODE[2]), STR_26(CODE[2]), STR_25(CODE[2]), STR_24(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[5]), STR_16(CODE[6]), 
		 -> STR_15(CODE[5]), STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[5]), 
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 16
		 -> tempString(BANK0[4]), DateStringLong@tstring(BANK0[16]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 16
		 -> tempString(BANK0[4]), DateStringLong@tstring(BANK0[16]), 

    memset@p1	PTR void  size(1) Largest target is 15
		 -> game_board(BANK0[15]), 

    memset@p	PTR unsigned char  size(1) Largest target is 15
		 -> game_board(BANK0[15]), 

    sp__memset	PTR void  size(1) Largest target is 15
		 -> game_board(BANK0[15]), 

    InputString@stringArray	PTR const unsigned char [4] size(2) Largest target is 52
		 -> dow_str(CODE[32]), month_str(CODE[52]), 

    InputString@istring	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_33(CODE[4]), STR_31(CODE[4]), 

    InputNumber@istring	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_32(CODE[5]), STR_30(CODE[5]), STR_29(CODE[4]), STR_28(CODE[5]), 

    buttons.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), 

    buttons	PTR volatile struct buttonStruct[3] size(1) Largest target is 7
		 -> button_2(BANK0[6]), button_0(BANK0[6]), button_1(COMRAM[6]), 

    button_2.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), 

    button_0.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), 

    NumberToString@strPtr	PTR unsigned char  size(1) Largest target is 5
		 -> InputNumber@numberString(BANK0[5]), tempString(BANK0[4]), 

    ScrollText@gString	PTR const unsigned char  size(2) Largest target is 20
		 -> string_SETTIME(CODE[13]), string_ON(CODE[5]), string_AT(CODE[5]), string_IT_IS(CODE[7]), 
		 -> tempString(BANK0[4]), DateStringLong@tstring(BANK0[16]), dateTime.tstring(BANK0[6]), dateTime(BANK0[20]), 

    DisplayText@gString	PTR const unsigned char  size(2) Largest target is 52
		 -> InputNumber@numberString(BANK0[5]), string_DONE(CODE[5]), STR_33(CODE[4]), dow_str(CODE[32]), 
		 -> STR_32(CODE[5]), STR_31(CODE[4]), month_str(CODE[52]), STR_30(CODE[5]), 
		 -> STR_29(CODE[4]), STR_28(CODE[5]), tempString(BANK0[4]), dateTime.dstring(BANK0[6]), 
		 -> dateTime.tstring(BANK0[6]), dateTime(BANK0[20]), 

    S323buttonStruct$port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), 

    button_1.port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(ABS[1]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 16
		 -> tempString(BANK0[4]), DateStringLong@tstring(BANK0[16]), 

    RtcNumberToString@string	PTR unsigned char  size(1) Largest target is 20
		 -> dateTime(BANK0[20]), 


Critical Paths under _main in COMRAM

    _game_loop->_calculate_next_game_board
    _random_board->_clear_board_location
    _init_game->_glider
    _glider->_set_board_location
    _calculate_next_game_board->_get_neighbors
    _get_neighbors->_get_board_value
    _get_board_value->___awdiv
    _clear_board_location->___awdiv
    _block->_set_board_location
    _blinker->_set_board_location
    _set_board_location->___awdiv
    _TimeNumerical->_DisplayText
    _TemperatureDisplay->_LM75GetTemp
    _TemperatureDisplay->_NumberToString
    _SecondsTime->_NumberToString
    _ScrollTime->_DateStringLong
    _RtcNumberToString->___lbdiv
    _RtcNumberToString->___lbmod
    _DateStringLong->_ScrollText
    _HandleButtons->_InputTime
    _RTCSetTime->_TransmitI2C
    _RTCSetTime->_dec_to_bcd
    _dec_to_bcd->___lbdiv
    _dec_to_bcd->___lbmod
    _InputTime->_ScrollText
    _ScrollText->_DelayMs
    _InputString->_DisplayText
    _InputNumber->_NumberToString
    _NumberToString->___lwmod
    ___lwmod->___lwdiv
    _DisplayText->_ClearDisplay
    _RTCInit->_AckPolling
    _RTCInit->_RTCGetDateTime
    _LM75Init->_LM75GetTemp
    _LM75GetTemp->___lwdiv
    ___lwdiv->___wmul
    _AckPolling->_TransmitI2C
    _DisplayInit->_ClearDisplay
    _BinaryTime->_RTCGetDateTime
    _RTCGetDateTime->_RecieveI2C
    _RTCGetDateTime->_TransmitI2C
    _TransmitI2C->_DelayI2C
    _StopI2C->_DelayI2C
    _StartI2C->_DelayI2C
    _RecieveI2C->_DelayI2C
    _DelayI2C->_DelayUs

Critical Paths under _high_isr in COMRAM

    _ShiftOutNextRow->_RowData
    _RowData->i2_DelayUs
    _CollumnData->i2_DelayUs

Critical Paths under _low_isr in COMRAM

    _low_isr->_ButtonCheck

Critical Paths under _main in BANK0

    _main->_ScrollTime
    _ScrollTime->_DateStringLong
    _HandleButtons->_InputTime
    _InputTime->_InputNumber

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  116527
                         _BinaryTime
                   _ExternalHardware
                      _HandleButtons
                   _InitHardwareVars
                    _InitPeripherals
            _InitTimersAndInterrupts
                           _Read_Eep
                         _ScrollTime
                        _SecondsTime
                 _TemperatureDisplay
                      _TimeNumerical
                          _Write_Eep
                          _game_loop
 ---------------------------------------------------------------------------------
 (1) _game_loop                                            0     0      0   27724
                            _DelayMs
                    _ReadButtonState
                            _blinker
                              _block
          _calculate_next_game_board
                             _glider
                          _init_game
                       _random_board
                       _swap_buffers
 ---------------------------------------------------------------------------------
 (2) _random_board                                         7     7      0    4355
                                             34 COMRAM     7     7      0
               _clear_board_location
                 _set_board_location
 ---------------------------------------------------------------------------------
 (2) _init_game                                            0     0      0    4423
                             _glider
                             _memset
                       _swap_buffers
 ---------------------------------------------------------------------------------
 (2) _swap_buffers                                         1     1      0      90
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _memset                                               6     2      4     254
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _glider                                               6     6      0    4079
                                             33 COMRAM     6     6      0
                            ___lbmod
                            ___llmod
                 _set_board_location
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     287
                                             21 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) _calculate_next_game_board                            6     6      0    8975
                                             45 COMRAM     6     6      0
               _clear_board_location
                    _get_board_value
                      _get_neighbors
                           _num_ones
                 _set_board_location
 ---------------------------------------------------------------------------------
 (3) _num_ones                                             2     2      0      69
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _get_neighbors                                        9     8      1    2558
                                             36 COMRAM     9     8      1
                    _get_board_value
 ---------------------------------------------------------------------------------
 (4) _get_board_value                                      7     6      1    1612
                                             29 COMRAM     7     6      1
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _clear_board_location                                 5     4      1    1473
                                             29 COMRAM     5     4      1
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _block                                                0     0      0    2551
                 _set_board_location
 ---------------------------------------------------------------------------------
 (2) _blinker                                              1     1      0    2647
                                             33 COMRAM     1     1      0
                 _set_board_location
 ---------------------------------------------------------------------------------
 (3) _set_board_location                                   4     3      1    2551
                                             29 COMRAM     4     3      1
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Write_Eep                                            4     1      3     151
                                             21 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (1) _TimeNumerical                                        1     1      0    6653
                                             36 COMRAM     1     1      0
                       _ClearDisplay
                        _DisplayText
                     _RTCGetDateTime
                  _RtcNumberToString
 ---------------------------------------------------------------------------------
 (1) _TemperatureDisplay                                   0     0      0   12956
                        _DisplayText
                        _LM75GetTemp
                     _NumberToString
                             _strcat
 ---------------------------------------------------------------------------------
 (1) _SecondsTime                                          0     0      0   10095
                        _DisplayText
                     _NumberToString
                     _RTCGetDateTime
                  _RtcNumberToString
 ---------------------------------------------------------------------------------
 (1) _ScrollTime                                           1     1      0   25419
                                             20 BANK0      1     1      0
                       _ClearDisplay
                     _DateStringLong
                        _LM75GetTemp
                     _NumberToString
                     _RTCGetDateTime
                  _RtcNumberToString
                         _ScrollText
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _RtcNumberToString                                    3     1      2    2786
                                             25 COMRAM     3     1      2
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) _DateStringLong                                      21    21      0    7822
                                             50 COMRAM     1     1      0
                                              0 BANK0     20    20      0
                         _ScrollText
                            ___lbdiv
                             _strcat
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcat                                               4     2      2    3113
                                             21 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Read_Eep                                             2     0      2      68
                                             21 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _InitTimersAndInterrupts                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPeripherals                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitHardwareVars                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HandleButtons                                        4     4      0   21139
                                              9 BANK0      4     4      0
                       _ClearButtons
                          _InputTime
                         _RTCSetTime
 ---------------------------------------------------------------------------------
 (2) _RTCSetTime                                           1     1      0    2945
                                             27 COMRAM     1     1      0
                           _StartI2C
                            _StopI2C
                        _TransmitI2C
                         _dec_to_bcd
 ---------------------------------------------------------------------------------
 (3) _dec_to_bcd                                           2     2      0    1767
                                             25 COMRAM     2     2      0
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) _InputTime                                            2     2      0   18064
                                             50 COMRAM     1     1      0
                                              8 BANK0      1     1      0
                            _DelayMs
                        _DisplayText
                        _InputNumber
                        _InputString
                         _ScrollText
                            ___awmod
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     587
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _ScrollText                                          15    13      2    2178
                                             35 COMRAM    15    13      2
                       _ClearButtons
                            _DelayMs
                    _ReadButtonState
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     361
                                             21 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ClearButtons                                         1     1      0     130
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _InputString                                          9     3      6    3833
                                             36 COMRAM     9     3      6
                            _DelayMs
                        _DisplayText
                    _ReadButtonState
 ---------------------------------------------------------------------------------
 (3) _InputNumber                                         12     8      4    7746
                                             43 COMRAM     4     0      4
                                              0 BANK0      8     8      0
                            _DelayMs
                        _DisplayText
                     _NumberToString
                    _ReadButtonState
 ---------------------------------------------------------------------------------
 (2) _ReadButtonState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _NumberToString                                       4     1      3    3541
                                             39 COMRAM     4     1      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     848
                                             34 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _DisplayText                                         14    11      3    2121
                                             22 COMRAM    14    11      3
                       _ClearDisplay
 ---------------------------------------------------------------------------------
 (2) _DelayMs                                             14    12      2     604
                                             21 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (1) _ExternalHardware                                     0     0      0    8871
                        _DisplayInit
                            _InitI2C
                           _LM75Init
                            _RTCInit
 ---------------------------------------------------------------------------------
 (2) _RTCInit                                              0     0      0    2649
                         _AckPolling
                     _RTCGetDateTime
 ---------------------------------------------------------------------------------
 (2) _LM75Init                                             0     0      0    6123
                         _AckPolling
                        _LM75GetTemp
                           _StartI2C
                            _StopI2C
                        _TransmitI2C
 ---------------------------------------------------------------------------------
 (2) _LM75GetTemp                                          9     9      0    4181
                                             34 COMRAM     9     9      0
                         _RecieveI2C
                           _StartI2C
                            _StopI2C
                        _TransmitI2C
                            ___awdiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4    1319
                                             27 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1061
                                             21 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _AckPolling                                           1     1      0    1002
                                             27 COMRAM     1     1      0
                           _StartI2C
                            _StopI2C
                        _TransmitI2C
 ---------------------------------------------------------------------------------
 (2) _InitI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DisplayInit                                          0     0      0      99
                       _ClearDisplay
 ---------------------------------------------------------------------------------
 (1) _BinaryTime                                           2     2      0    3451
                                             28 COMRAM     2     2      0
                       _ClearDisplay
                     _RTCGetDateTime
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     925
                                             21 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     780
                                             21 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _RTCGetDateTime                                       1     1      0    1647
                                             27 COMRAM     1     1      0
                         _RecieveI2C
                           _StartI2C
                            _StopI2C
                        _TransmitI2C
                         _bcd_to_dec
 ---------------------------------------------------------------------------------
 (3) _bcd_to_dec                                           2     2      0      62
                                             21 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _TransmitI2C                                          3     3      0     404
                                             24 COMRAM     3     3      0
                           _DelayI2C
 ---------------------------------------------------------------------------------
 (3) _StopI2C                                              0     0      0     268
                           _DelayI2C
 ---------------------------------------------------------------------------------
 (3) _StartI2C                                             0     0      0     268
                           _DelayI2C
 ---------------------------------------------------------------------------------
 (3) _RecieveI2C                                           3     3      0     407
                                             24 COMRAM     3     3      0
                           _DelayI2C
 ---------------------------------------------------------------------------------
 (4) _DelayI2C                                             1     1      0     268
                                             23 COMRAM     1     1      0
                            _DelayUs
 ---------------------------------------------------------------------------------
 (5) _DelayUs                                              2     0      2     237
                                             21 COMRAM     2     0      2
                      _DelayFor12TCY
 ---------------------------------------------------------------------------------
 (6) _DelayFor12TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ClearDisplay                                         1     1      0      99
                                             21 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _low_isr                                              5     5      0     244
                                              7 COMRAM     5     5      0
                        _ButtonCheck
 ---------------------------------------------------------------------------------
 (9) _ButtonCheck                                          7     7      0     244
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _high_isr                                            2     2      0     439
                                             19 COMRAM     2     2      0
                    _ShiftOutNextRow
 ---------------------------------------------------------------------------------
 (11) _ShiftOutNextRow                                     0     0      0     439
                        _CollumnData
                            _RowData
                          i2_DelayUs
 ---------------------------------------------------------------------------------
 (12) _RowData                                             5     5      0     169
                                             14 COMRAM     5     5      0
                          i2_DelayUs
 ---------------------------------------------------------------------------------
 (12) _CollumnData                                         4     4      0     169
                                             14 COMRAM     4     4      0
                          i2_DelayUs
 ---------------------------------------------------------------------------------
 (12) i2_DelayUs                                           2     0      2     101
                                             12 COMRAM     2     0      2
                    i2_DelayFor12TCY
 ---------------------------------------------------------------------------------
 (13) i2_DelayFor12TCY                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BinaryTime
     _ClearDisplay
     _RTCGetDateTime
       _RecieveI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StartI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StopI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _TransmitI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _bcd_to_dec
     ___lbdiv
     ___lbmod
   _ExternalHardware
     _DisplayInit
       _ClearDisplay
     _InitI2C
     _LM75Init
       _AckPolling
         _StartI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _StopI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _TransmitI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
       _LM75GetTemp
         _RecieveI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _StartI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _StopI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _TransmitI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         ___awdiv
         ___lwdiv
           ___wmul (ARG)
         ___wmul
       _StartI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StopI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _TransmitI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
     _RTCInit
       _AckPolling
         _StartI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _StopI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _TransmitI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
       _RTCGetDateTime
         _RecieveI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _StartI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _StopI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _TransmitI2C
           _DelayI2C
             _DelayUs
               _DelayFor12TCY
         _bcd_to_dec
   _HandleButtons
     _ClearButtons
     _InputTime
       _DelayMs
       _DisplayText
         _ClearDisplay
       _InputNumber
         _DelayMs
         _DisplayText
           _ClearDisplay
         _NumberToString
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
             ___lwdiv (ARG)
               ___wmul (ARG)
         _ReadButtonState
       _InputString
         _DelayMs
         _DisplayText
           _ClearDisplay
         _ReadButtonState
       _ScrollText
         _ClearButtons
         _DelayMs
         _ReadButtonState
         _strlen
       ___awmod
       ___lbmod
     _RTCSetTime
       _StartI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StopI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _TransmitI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _dec_to_bcd
         ___lbdiv
         ___lbmod
   _InitHardwareVars
   _InitPeripherals
   _InitTimersAndInterrupts
   _Read_Eep
   _ScrollTime
     _ClearDisplay
     _DateStringLong
       _ScrollText
         _ClearButtons
         _DelayMs
         _ReadButtonState
         _strlen
       ___lbdiv
       _strcat
       _strlen
     _LM75GetTemp
       _RecieveI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StartI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StopI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _TransmitI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       ___awdiv
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _NumberToString
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
     _RTCGetDateTime
       _RecieveI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StartI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StopI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _TransmitI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _bcd_to_dec
     _RtcNumberToString
       ___lbdiv
       ___lbmod
     _ScrollText
       _ClearButtons
       _DelayMs
       _ReadButtonState
       _strlen
     _strcat
   _SecondsTime
     _DisplayText
       _ClearDisplay
     _NumberToString
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
     _RTCGetDateTime
       _RecieveI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StartI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StopI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _TransmitI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _bcd_to_dec
     _RtcNumberToString
       ___lbdiv
       ___lbmod
   _TemperatureDisplay
     _DisplayText
       _ClearDisplay
     _LM75GetTemp
       _RecieveI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StartI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StopI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _TransmitI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       ___awdiv
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _NumberToString
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
         ___lwdiv (ARG)
           ___wmul (ARG)
     _strcat
   _TimeNumerical
     _ClearDisplay
     _DisplayText
       _ClearDisplay
     _RTCGetDateTime
       _RecieveI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StartI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _StopI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _TransmitI2C
         _DelayI2C
           _DelayUs
             _DelayFor12TCY
       _bcd_to_dec
     _RtcNumberToString
       ___lbdiv
       ___lbmod
   _Write_Eep
   _game_loop
     _DelayMs
     _ReadButtonState
     _blinker
       _set_board_location
         ___awdiv
     _block
       _set_board_location
         ___awdiv
     _calculate_next_game_board
       _clear_board_location
         ___awdiv
       _get_board_value
         ___awdiv
       _get_neighbors
         _get_board_value
           ___awdiv
       _num_ones
       _set_board_location
         ___awdiv
     _glider
       ___lbmod
       ___llmod
       _set_board_location
         ___awdiv
     _init_game
       _glider
         ___lbmod
         ___llmod
         _set_board_location
           ___awdiv
       _memset
       _swap_buffers
     _random_board
       _clear_board_location
         ___awdiv
       _set_board_location
         ___awdiv
     _swap_buffers

 _low_isr (ROOT)
   _ButtonCheck

 _high_isr (ROOT)
   _ShiftOutNextRow
     _CollumnData
       i2_DelayUs
         i2_DelayFor12TCY
     _RowData
       i2_DelayUs
         i2_DelayFor12TCY
     i2_DelayUs
       i2_DelayFor12TCY

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     15      66       4       63.8%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     33      4A       1       77.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B0       8        0.0%
DATA                 0      0      B0      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Sep 17 14:36:48 2018

                                   _AckPolling 1A8E               __size_of_InitTimersAndInterrupts 003A  
                                ??_CollumnData 000F                          __size_of_swap_buffers 0020  
                       DisplayText@currentChar 0022                                             PL2 09FC  
                                           PL4 0AC6                                             PL6 0AD4  
                                           PL8 02A8                                             l88 022C  
                       ScrollText@string_index 002C                                   ___awdiv@sign 001B  
                                           bsr 000FE0                            ___wmul@multiplicand 0018  
                          ?_TemperatureDisplay 0001                                   __CFG_CP0$OFF 000000  
                                 __CFG_CP1$OFF 000000                                            PL10 10AA  
                                          PL12 02BE                                            PL14 0DAA  
                                          PL16 0654                                            PL18 092A  
                                          l134 14AC                                            l143 1626  
                                          l145 162E                                            l138 14D8  
                                          l501 0F1A                                            l502 0F42  
                                          l271 0844                                            l265 077A  
                                          l514 1358                                            l284 03C8  
                                          l277 02F6                                            l801 067A  
                                          l474 0850                                            l803 0680  
                                          l484 08C2                                            l476 0892  
                                          l821 0706                                            l814 06C0  
                                          l806 06B2                                            l831 0722  
                                          l487 08D8                                            l824 06F6  
                                          l816 06CE                                            l568 1A14  
                                          l833 0728                                            l809 06A2  
                                          l489 08E4                                            l818 06D4  
                                          l829 0714                                            l839 074A  
                                          l791 0FEE                                            l943 0BB8  
                                          l776 0CCC                                            l928 11C6  
                                          l945 0BBA                                            l778 0CDA  
                                          l954 0BEE                                            l789 0FE2  
                                          l957 0BF6                                            l799 066C  
                                          l959 0C0A                                            l991 1500  
                                          l989 14FE                                   __CFG_CPB$OFF 000000  
                                 __CFG_CPD$OFF 000000                                   __CFG_BORV$30 000000  
                                 ___awmod@sign 001B                                            wreg 000FE8  
                                 __CFG_FOSC$HS 000000                           ScrollText@char_index 002E  
                         ScrollText@char_width 002D                                   __CFG_LVP$OFF 000000  
                                         _D1EN 007DDF                                           l1509 15AE  
                                         l4030 1CE4                                           _C1ON 007B6F  
                                         l1562 183C                                           l4026 1CDE  
                                         l1572 1902                                           _C2ON 007B5F  
                                         l5110 0848                                           l5102 0802  
                                         l5130 0684                                           l5122 0666  
                                         l6002 0B88                                           l5052 14DA  
                                         l5028 14A0                                           l5300 1AB6  
                                         l5116 16D6                                           l5220 05E0  
                                         l5212 0596                                           l6004 0BA2  
                                         l6100 126E                                           l5150 06C4  
                                         l5142 06A6                                           l5126 0670  
                                         l5134 0694                                           l5070 1898  
                                         l6014 15D2                                           l6102 1274  
                                         l6110 1290                                           l5224 05FC  
                                         l5216 05B2                                           l5072 189C  
                                         l6200 08FE                                           l6024 15FC  
                                         l3720 15A0                                           l3712 156E  
                                         l6104 127A                                           l5250 1A68  
                                         l6050 0992                                           l6042 0956  
                                         l5170 070E                                           l5162 06F0  
                                         l5154 06D8                                           l5146 06BA  
                                         l5138 069C                                           l6210 090E  
                                         l6018 15DA                                           l3714 157A  
                                         l6122 12AC                                           l6036 0944  
                                         l5084 0772                                           l5228 062A  
                                         l5404 03E8                                           l5340 19C2  
                                         l6028 161C                                           l3716 157E  
                                         l6108 1280                                           l5262 1A82  
                                         l5254 1A6E                                           l5190 074E  
                                         l5174 0718                                           l5182 073C  
                                         l5166 06FA                                           l5158 06E8  
                                         l5342 19C4                                           l6126 12B6  
                                         l6230 10E6                                           l6222 10D0  
                                         l5256 1A72                                           l6160 08AE  
                                         l6152 08A4                                           l6136 0862  
                                         l5344 19D0                                           l6080 139E  
                                         l6232 10EC                                           l5266 1A8A  
                                         l5282 1B26                                           l5274 1B10  
                                         l6058 09CE                                           l5098 07C0  
                                         l5186 0744                                           l5178 072C  
                                         l5434 0CD0                                           l5418 0CA6  
                                         l5346 19D6                                           l6066 1346  
                                         l5530 0C00                                           l6234 10F2  
                                         l6242 1104                                           l6226 10DA  
                                         l4900 103E                                           l5428 0CBC  
                                         l5372 037E                                           l5700 01A4  
                                         l6076 137E                                           l5540 0C1E  
                                         l5516 0BC2                                           l3932 1AC4  
                                         l6236 10F8                                           l6244 111E  
                                         l6228 10E0                                           l5446 0D12  
                                         l5198 1B7A                                           l6174 08CC  
                                         l6166 08BC                                           l5702 01B4  
                                         l5542 0C2A                                           l5526 0BF2  
                                         l5550 0C56                                           l6238 10FE  
                                         l4912 1064                                           l5392 03CC  
                                         l5368 033C                                           l6192 08EE  
                                         l5712 0200                                           l5536 0C14  
                                         l3936 1AD0                                           l6088 124C  
                                         l4914 106C                                           l4906 1054  
                                         l5474 0FE6                                           l5458 0FC0  
                                         l5378 0380                                           l5714 020E  
                                         l5706 01C4                                           l5650 0D58  
                                         l5546 0C36                                           l5554 0C5E  
                                         l6098 1268                                           l4932 10A0  
                                         l4924 108A                                           l4916 1070  
                                         l5468 0FD4                                           l5484 101E  
                                         l5804 0496                                           l5740 027A  
                                         l5732 0250                                           l5708 01F6  
                                         l5548 0C4A                                           l3956 1BC2  
                                         l4942 180C                                           l5590 140C  
                                         l5582 13EE                                           l5574 13CE  
                                         l5814 04FE                                           l5806 04C8  
                                         l5670 00B4                                           l5662 0074  
                                         l5646 0D48                                           l4872 1CAE  
                                         l4928 1094                                           l4944 1814  
                                         l5584 13F6                                           l5816 0504  
                                         l5744 0290                                           l5736 0264  
                                         l5680 0104                                           l5672 00C4  
                                         l5664 0084                                           l4954 1832  
                                         l4946 1818                                           l4970 18F8  
                                         l4962 18DA                                           l5586 13FA  
                                         l5594 1416                                           l5578 13E2  
                                         l5746 029E                                           l5690 0154  
                                         l5682 0114                                           l5674 00D4  
                                         l5666 0094                                           l5850 11F8  
                                         l4876 1CB8                                           l4964 18E2  
                                         l5780 048C                                           l5692 0164  
                                         l5684 0124                                           l5668 00A4  
                                         l5852 1204                                           l4886 1C68  
                                         l4966 18E6                                           l5598 1422  
                                         l5694 0174                                           l5686 0134  
                                         l5678 00E4                                           l5934 0F08  
                                         l5862 1224                                           l5854 120E  
                                         l5838 11C8                                           l5784 0490  
                                         l5696 0184                                           l5688 0144  
                                         l5864 122E                                           l5856 1212  
                                         l5778 0488                                           l5698 0194  
                                         l5962 0AEC                                           l5954 0F74  
                                         l4988 1630                                           l5980 0B38  
                                         l5972 0B0C                                           l5948 0F4E  
                                         l5892 1518                                           l5990 0B66  
                                         l5984 0B48                                           l5968 0AFC  
                                         l5896 1542                                           l5994 0B7A  
                                         l5898 154C                                           _ADON 007E10  
                                         STR_1 3FB2                                           STR_2 3F9E  
                                         STR_3 3F99                                           STR_4 3FD0  
                                         STR_5 3FA8                                           STR_6 3FC6  
                                         STR_7 3FB7                                           STR_8 3FAD  
                                         _ANS8 007BF8                                           STR_9 3F8F  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           u2075 1A20  
                                         u2076 1A22                                           u4510 18BC  
                                         u5090 0326                                           u5314 1780  
                                         u5315 177C                                           u5165 0DEA  
                                         u4517 18B2                                           u4550 07AA  
                                         u5097 031C                                           u4557 07A0  
                                         u4574 082A                                           u4575 0826  
                                         u5714 152E                                           u5715 1528  
                                         u4974 147E                                           u4975 147A  
                                         _UCFG 000F61                                           u4984 1490  
                                         u4985 148C                                           u4994 17CE  
                                         u4995 17CA                                           _TMR1 000FCE  
                         ??_TemperatureDisplay 002C                                           _SPEN 007D5F  
                                         _main 10B4                                __end_of_RTCInit 1C66  
                                         fsr1h 000FE2                                           fsr2h 000FDA  
                                         indf1 000FE7                                           fsr1l 000FE1  
                                         indf2 000FDF                                           fsr2l 000FD9  
                       ??_clear_board_location 001F                                   _swap_buffers 1BC0  
                  ??_calculate_next_game_board 002E                                           prodh 000FF4  
                                         prodl 000FF3                                           start 006A  
                                __CFG_IESO$OFF 000000                                __end_of_DelayMs 1716  
                              __end_of_DelayUs 1CC2                              ??_InitPeripherals 0016  
                    __size_of_InitHardwareVars 0050                                     _BinaryTime 0932  
           calculate_next_game_board@neighbors 002E                                    _string_DONE 3F64  
                              __end_of_InitI2C 1D5C                               __end_of_LM75Init 1BC0  
                             ??_RTCGetDateTime 001C                               ?i2_DelayFor12TCY 0001  
                                ??_ButtonCheck 0001                                  __CFG_PLLEN$ON 000000  
                              __end_of_RowData 1948                            __end_of_DisplayInit 1D00  
                              __end_of_StopI2C 1D46                            __end_of_DisplayText 084E  
                   __size_of_RtcNumberToString 008E                                          ?_main 0001  
                              __end_of___awdiv 10AA                                __end_of___lbdiv 1A8E  
                                        _EEADR 000FA9                                          STR_10 3FBC  
                                        STR_11 3FC1                                          STR_20 3FF3  
                                        STR_12 3FDA                                          STR_21 3FF7  
                                        STR_13 3F6E                                          STR_22 3FEB  
                                        STR_30 3F85                                          STR_14 3F7A  
                                        STR_23 3FEF                                          STR_31 3FE3  
                                        STR_15 3FA3                                          STR_24 3FF3  
                                        STR_32 3F80                                          STR_16 3F74  
                                        STR_25 3FFD                                          STR_33 3FE7  
                                        STR_17 3FCB                                          STR_26 3FFB  
                                        STR_18 3FD5                                          STR_27 3FFB  
                                        STR_19 3F94                                          STR_28 3F8A  
                              __end_of___awmod 142C                                          STR_29 3FDF  
                              __end_of___lbmod 1B2E                                          _ANSEL 000F7E  
                                        _T0CON 000FD5                                ___awdiv@divisor 0018  
                                        _T1CON 000FCD                                __end_of___llmod 15C0  
                                        _LATB4 007C54                                          _T3CON 000FB1  
                                        _LATC3 007C5B                                          _LATC4 007C5C  
                                        _LATB6 007C56                                          _LATC5 007C5D  
                              __end_of___lwdiv 1846                            RTCSetTime@i2cBuffer 001C  
                              __end_of___lwmod 190C                                          i1l338 0054  
                                        i2l240 1874                                          i2l241 1876  
                                        i2l333 1B4A                                          i2l247 1930  
                                        i2l248 1932                            __end_of_CollumnData 188E  
                              ___awdiv@counter 001A                                 __CFG_BBSIZ$OFF 000000  
                                        _TMR1H 000FCF                                          _TMR0L 000FD6  
                                        _TMR3H 000FB3                                          _TMR1L 000FCE  
                                        _TMR3L 000FB2                                          _PORTC 000F82  
                              __end_of_binFont 3EF7                                          _USBEN 007B23  
                                        _SRLEN 007B47                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _SSPEN 007E35                                  __CFG_WRT0$OFF 000000  
                                __CFG_WRT1$OFF 000000                                __end_of_blinker 1B78  
                               __CFG_EBTR0$OFF 000000                                 __CFG_FCMEN$OFF 000000  
                               __CFG_EBTR1$OFF 000000                    get_neighbors@neighbor_value 0029  
                              __end_of_font3_1 3EED                             __size_ofi2_DelayUs 0016  
                                __CFG_WRTB$OFF 000000                                  __CFG_WRTC$OFF 000000  
                                __CFG_WRTD$OFF 000000                        __size_of_NumberToString 0108  
                               __CFG_EBTRB$OFF 000000                                          _block 1982  
                              __end_of_dow_str 3F4B                                 __pbitbssCOMRAM 0240  
                              __end_of_low_isr 006A                                 __CFG_BOREN$OFF 000000  
                                        tablat 000FF5                                ??_get_neighbors 0026  
                 calculate_next_game_board@col 0033                   calculate_next_game_board@row 0032  
                                        plusw2 000FDB                                          status 000FD8  
         calculate_next_game_board@alive_count 0030                               __end_of_DelayI2C 1D52  
                              ___lbdiv@divisor 0016                                  ??_InputNumber 0030  
                        __end_of_HandleButtons 092A                                ___lbdiv@counter 0018  
                            ??_ReadButtonState 0016                                  ??_InputString 002B  
                                  ?_RTCSetTime 0001                                 __CFG_MCLRE$OFF 000000  
                                 _string_IT_IS 3F58                                RecieveI2C@bitNo 001B  
                              __initialization 1716                                    ?_AckPolling 0001  
                                 __end_of_main 113C                          __end_of_TimeNumerical 0F92  
                           _boundary_condition 00C5                                 __CFG_PCLKEN$ON 000000  
                             __end_of_Read_Eep 1D26                                  ??_SecondsTime 002C  
                                       ??_main 0034                      _calculate_next_game_board 11C2  
                              _ShiftOutNextRow 1C7E                                  __activetblptr 000002  
                                   _RecieveI2C 1498                                  ClearDisplay@i 0016  
                         __size_of_LM75GetTemp 009E                            __end_of_ButtonCheck 0AC6  
                             __end_of_StartI2C 1D14                                         ?_block 0001  
                                       _ADCON0 000FC2                                         _ADCON1 000FC1  
                                       _ADCON2 000FC0                          __size_of_ClearDisplay 0018  
                             ___llmod@dividend 0016                                      ??_RTCInit 001D  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                       _EEDATA 000FA8                       __size_of_get_board_value 006C  
                                       _EECON2 000FA7                               ___awdiv@dividend 0016  
                                       _ANSELH 000F7F                               ??_DateStringLong 0033  
                            InputNumber@result 00B7                          __size_of_ClearButtons 0024  
                                       _GODONE 007E11                                         i1l1045 0AA0  
                                       _FVR1EN 007DD7                                  ClearButtons@i 0016  
                                       i1l4462 0ABC                                         i1l4448 0A3A  
                               __CFG_WDTEN$OFF 000000                                         i2l4074 1CC4  
                                       i2l4078 1CCE                                         i2l4248 1848  
                                       i2l4266 1910                                      ??_DelayMs 0018  
                                    ??_DelayUs 0018                       InputNumber@currentNumber 00B6  
                               TransmitI2C@ack 001A                                         _TMR0IE 007F95  
                                       _TMR0IF 007F92                                         _TMR3IE 007D01  
                                       _TMR3IF 007D09                                         _TRISC0 007CA0  
                                       _TRISC1 007CA1                                         _TRISC2 007CA2  
                                       _TRISB4 007C9C                                         _TRISC3 007CA3  
                                       _TRISC4 007CA4                                         _TRISB6 007C9E  
                                       _TRISC5 007CA5                                         _TRISC6 007CA6  
                                    ??_InitI2C 0016                                    ?_BinaryTime 0001  
                                dec_to_bcd@dec 001B                                 __CFG_XINST$OFF 000000  
                      _InitTimersAndInterrupts 1948                                     _ScrollTime 0AE4  
                                   _ScrollText 02D2                                      ??_RowData 000F  
                           __size_of_InputTime 013C                                    _DisplayInit 1CEC  
                             __end_of_high_isr 1B54                                    _DisplayText 075C  
                            __end_ofi2_DelayUs 1CD8                                      ??_StopI2C 0019  
                                       ___wmul 1AE2                                      ??___awdiv 001A  
                                    ??___lbdiv 0017                                 __CFG_STVREN$ON 000000  
                                    ??___awmod 001A                                      ??___lbmod 0017  
                                  _CollumnData 1846                                      ??___llmod 001E  
                          __end_of_InputNumber 0D1C                                      ??___lwdiv 0020  
                                    ??___lwmod 0027                                         _glider 12C0  
                          __end_of_InputString 1026                                         _memset 1ABC  
                                       clear_0 171C                                         clear_1 172A  
                             ___awdiv@quotient 001C                                ___awmod@divisor 0018  
                                 Read_Eep@badd 0016                                      ??_blinker 0022  
                              ___awmod@counter 001A                              ?_ExternalHardware 0001  
                                       _strcat 19BA                              DisplayText@xStart 001D  
                                       _strlen 188E                              DisplayText@yStart 0017  
                                 _ClearDisplay 1C66                                   __pdataCOMRAM 0049  
                           ??_ExternalHardware 002C                                   _ClearButtons 1B78  
                             __end_of_num_ones 1CEC                                   __mediumconst 3DEC  
                                    ??_low_isr 0008                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                          __size_of_RTCSetTime 0086                            __end_of_SecondsTime 1622  
                          __size_of_AckPolling 002E                                __CFG_HFOFST$OFF 000000  
                             ___lbdiv@dividend 0017                                 get_neighbors@c 002D  
                               get_neighbors@r 002C                                      ?_LM75Init 0001  
                   __end_of_set_board_location 17FC                                ___lbmod@divisor 0016  
                                   __accesstop 0060                        __end_of__initialization 175A  
                              ___lbmod@counter 0018                              ScrollText@gString 0024  
                           __size_of_Write_Eep 0034                                   ButtonCheck@i 0007  
                        ScrollText@currentChar 0030                               _InitHardwareVars 1676  
                               __pcstackCOMRAM 0001                        __end_of_ShiftOutNextRow 1C96  
                                 __pidataBANK0 1D5E                                  ?_random_board 0001  
                                __end_of_block 19BA                                  ??_TransmitI2C 0019  
                              NumberToString@i 002B                             InputString@istring 0025  
                                  _ButtonCheck 0A12                                     __end_ofPL2 0A12  
                                   __end_ofPL4 0AD4                                     __end_ofPL6 0AE4  
                                   __end_ofPL8 02BE                               ___lbdiv@quotient 0019  
                                   _bcd_to_dec 1C96                             __size_of_game_loop 007E  
                                  ?_RecieveI2C 0001                               BinaryTime@prevHr 0065  
                                    ?_DelayI2C 0001                                 _NumberToString 054C  
                          __size_of_BinaryTime 00CA                              __end_of_InputTime 054C  
                                      ??_block 0022                                _InitPeripherals 1A26  
                       __size_of_DelayFor12TCY 001A                                     _dec_to_bcd 1BE0  
                                   ??_LM75Init 002C                                     __pbssBANK0 0060  
                                    ?_Read_Eep 0016                      ??_InitTimersAndInterrupts 0016  
                           __size_of_init_game 001A                              ??_get_board_value 001F  
                                  _InputNumber 0C76                                    _InputString 0F92  
                                  ?_ScrollTime 0001                                    ?_ScrollText 0024  
                                   _game_board 0091                                 ??_random_board 0023  
                                      ?___wmul 0016                                      ?_StartI2C 0001  
                                      ?_glider 0001                                        _CCP1CON 000FBD  
                                      ?_memset 0016                        InputNumber@numberString 00B0  
                           InputNumber@istring 002C                                        ?_strcat 0016  
                                      ?_strlen 0016                                    _SecondsTime 15C0  
                            __end_of_Write_Eep 1A26                         __end_of_NumberToString 0654  
                          __end_of_TransmitI2C 1676                                     ??_DelayI2C 0018  
                                  ScrollText@i 0032                                TransmitI2C@byte 0019  
                              _ReadButtonState 065E                                     _colon_flag 0240  
                              __CFG_USBDIV$OFF 000000                                        _RTCInit 1C4E  
                                    ?_high_isr 0001             __size_of_calculate_next_game_board 0080  
                                      _DelayMs 16C6                    __size_of_TemperatureDisplay 0078  
                                      _DelayUs 1CAC                        clear_board_location@col 001E  
                                   ??_Read_Eep 0018                        clear_board_location@row 0022  
                            __end_of_game_loop 12C0                                        _InitI2C 1D52  
                              __CFG_PWRTEN$OFF 000000                                   ??_RTCSetTime 001C  
                          __size_of_RecieveI2C 0064                                        __Hparam 0000  
                __size_of_clear_board_location 004E                                        __Lparam 0000  
                                      _RowData 190C                                   ??_AckPolling 001C  
                                    ?_num_ones 0001                                        _StopI2C 1D36  
                                   ??_StartI2C 0019                                  _DelayFor12TCY 1C1A  
                             ?_ShiftOutNextRow 0001                                        ___awdiv 1026  
                                      ___lbdiv 1A5A                                        ___awmod 13B4  
                                      ___lbmod 1B08                                __size_of___wmul 0026  
                                      ___llmod 155E                          DisplayText@char_index 0020  
                                      ___lwdiv 17FC                                        ___lwmod 18CE  
                        DisplayText@char_width 001F                                        _binFont 3EED  
                              __size_of_glider 007C                                        __pcinit 1716  
                              __size_of_memset 0026                                        __ramtop 0300  
                         InputTime@daysInMonth 00B8                                    ?_bcd_to_dec 0001  
                                      _blinker 1B54                                        __ptext0 10B4  
                                      __ptext1 1242                                        __ptext2 14FC  
                                      __ptext3 1C00                                        __ptext4 1BC0  
                                      __ptext5 1ABC                                        __ptext6 12C0  
                                      __ptext7 155E                                        __ptext8 11C2  
                                      __ptext9 1CD8                                        _font3_1 3DED  
                                      _display 0081                                __size_of_strcat 0038  
                              __size_of_strlen 0040                        __end_of_InitPeripherals 1A5A  
                                      _dow_str 3F2B                             DisplayText@gString 0018  
                              ?_NumberToString 0028                              __end_of_init_game 1C1A  
                                      _buttons 0060                               ___awmod@dividend 0016  
                     __size_ofi2_DelayFor12TCY 001A                                        _low_isr 0018  
                      RTCGetDateTime@i2cBuffer 001C                            __size_of_ScrollTime 00CA  
                          __size_of_ScrollText 013E                             __end_of_RTCSetTime 11C2  
                                  ?_dec_to_bcd 0001                                     ??_high_isr 0014  
                               __pintcode_body 1B2E                           end_of_initialization 175A  
                           __end_of_AckPolling 1ABC                                      DelayMs@ms 0016  
                                    DelayUs@us 0016              __end_of_calculate_next_game_board 1242  
                                      memset@c 0016                                        memset@n 0018  
                                      memset@p 001B                                  __Lmediumconst 3DEC  
                                      int_func 1B2E                              __end_of_month_str 3F2B  
                        __end_of_get_neighbors 0C76                                   ??_BinaryTime 001D  
                                 ?_DisplayInit 0001                                   ?_DisplayText 0017  
                               ?_DelayFor12TCY 0001                                     ??_num_ones 0016  
                                   _tempString 00AC                                     blinker@row 0022  
                                      postdec2 000FDD                                        postinc0 000FEE  
                                      postinc2 000FDE                                   ?_CollumnData 0001  
                                  _TransmitI2C 1622                                  ??_LM75GetTemp 0023  
                                      strlen@s 0016                                      i2_DelayUs 1CC2  
calculate_next_game_board@num_living_neighbors 0031                                      _PORTBbits 000F81  
                                    _PORTCbits 000F82                                get_neighbors@cc 002B  
                            __end_of_string_AT 3F64                        __end_of_ReadButtonState 075C  
                              get_neighbors@rr 002A                              __end_of_string_ON 3F6E  
                     InputString@currentNumber 002B                               ___lbmod@dividend 0017  
                       __size_of_HandleButtons 00DC                       __end_of_InitHardwareVars 16C6  
                      __size_of_RTCGetDateTime 009E                             __end_of_BinaryTime 09FC  
                         __end_of_random_board 155E                         __size_of_TimeNumerical 009A  
                      DisplayText@string_index 001E                      __size_of_ExternalHardware 0010  
                                  ___lbmod@rem 0019                              __size_of_LM75Init 0024  
                          __size_of_bcd_to_dec 0016                                 _string_SETTIME 3F4B  
                           _set_board_location 17B2                                InputNumber@done 00B5  
                    get_neighbors@return_value 0027                            __size_of_dec_to_bcd 0020  
                               __end_of___wmul 1B08                                   ?_ButtonCheck 0001  
                                __pidataCOMRAM 1D5C                                     ?i2_DelayUs 000D  
                               __end_of_glider 133C                                 __end_of_memset 1AE2  
                                 ??_RecieveI2C 0019                            ?_set_board_location 001E  
                             ?_InitPeripherals 0001                                 __end_of_strcat 19F2  
                               __end_of_strlen 18CE                                    __end_ofPL10 10B4  
                                  __end_ofPL12 02D2                                    __end_ofPL14 0DBC  
                                  __end_ofPL16 065E                                    __end_ofPL18 0932  
                          start_initialization 1716                            __end_of_LM75GetTemp 0E5A  
                               RecieveI2C@byte 001A                                  _pattern_index 006C  
                              _get_board_value 142C                              __size_of_DelayI2C 000C  
                            ??i2_DelayFor12TCY 000D                                      _InputTime 0410  
                        DateStringLong@number1 00C3                          DateStringLong@number2 00C0  
                            BinaryTime@prevMin 0066                              BinaryTime@prevSec 0067  
                                ?_swap_buffers 0001                           ??_set_board_location 001F  
                              ___llmod@divisor 001A                         __end_of_string_SETTIME 3F58  
                              ___llmod@counter 001E                                   ?_InputNumber 002C  
                            __size_of_Read_Eep 0012                          DateStringLong@tstring 00B0  
                              ??_DelayFor12TCY 0016                                  _HandleButtons 084E  
                                 ?_InputString 0025                                   ??_ScrollTime 0034  
                                 ??_ScrollText 0026                             __end_of_RecieveI2C 14FC  
                      __size_of_DateStringLong 023A                                       ??___wmul 001A  
                             AckPolling@device 001C                                       ??_glider 0022  
                                  __pdataBANK0 00C5                                  _TimeNumerical 0EF8  
                                     ??_memset 001A                         InputString@stringArray 0029  
                            __size_of_StartI2C 0014                                   ?_SecondsTime 0001  
                                     ??_strcat 0018                                       ??_strlen 0018  
                             ?_ReadButtonState 0001                                    __pbssCOMRAM 0034  
                                Write_Eep@badd 0016                                  Write_Eep@bdat 0018  
                                __pcstackBANK0 00B0                               ScrollText@length 002B  
                          __end_of__stringdata 3FFF                                      _Write_Eep 19F2  
                           __end_of_ScrollTime 0BAE                             __end_of_ScrollText 0410  
                                     ?_RTCInit 0001                              InputString@result 002D  
                                   ?_InputTime 0001                                       ?_DelayMs 0016  
                                     ?_DelayUs 0016                                 ??_swap_buffers 0016  
                            __size_of_high_isr 1B4C                                   _currentState 0049  
                                     ?_InitI2C 0001                                InputString@done 002C  
                               ?_HandleButtons 0001                                      _date_flag 0241  
                             ___lwdiv@dividend 001C                                       ?_RowData 0001  
                                    _game_loop 1242                                      __pintcode 0008  
                                     ?_StopI2C 0001                                  __pmediumconst 3DEC  
                                     ?___awdiv 0016                                       ?___lbdiv 0016  
                                     ?___awmod 0016                                 ?_TimeNumerical 0001  
                                     ?___lbmod 0016                                       ?___llmod 0016  
                                     ?___lwdiv 001C                           __size_of_DisplayInit 0014  
                                     ?___lwmod 0023                           __size_of_DisplayText 00F2  
                             ??_NumberToString 002B                             random_board@result 0026  
                            __size_of_num_ones 0014                                    __pintcodelo 0018  
                                  ??i2_DelayUs 000F                                    _LM75GetTemp 0DBC  
                                 ??_bcd_to_dec 0016                           __size_of_CollumnData 0048  
                                     ?_blinker 0001                        __end_of_get_board_value 1498  
                 __end_of_clear_board_location 17B2                          __size_of_random_board 0062  
                                    _firstLoop 0041                                 _RTCGetDateTime 0E5A  
                                     ?_low_isr 0001                                     ?_Write_Eep 0016  
                             ___lwdiv@quotient 0021                                 __size_of_block 0038  
                                    _init_game 1C00                     __end_of_TemperatureDisplay 13B4  
                                 ??_dec_to_bcd 001A                       ?_InitTimersAndInterrupts 0001  
                                     _LM75Init 1B9C                               _ExternalHardware 1D26  
                               ___wmul@product 001A                                   _milliseconds 0034  
                                     _IPR2bits 000FA2                                       _PIE2bits 000FA0  
                           __end_of_bcd_to_dec 1CAC                         SecondsTime@prevSeconds 0068  
                             TransmitI2C@bitNo 001B                                       i2u353_44 1866  
                                     i2u353_45 1862                                       _PIR2bits 000FA1  
                                    _month_str 3EF7                                     ?_game_loop 0001  
                                    _temp_flag 0242                                       _RCONbits 000FD0  
                             __CFG_WDTPS$32768 000000                                   _random_board 14FC  
                                 ?_TransmitI2C 0001                             get_board_value@col 001E  
                           get_board_value@row 0024                             __end_of_dec_to_bcd 1C00  
                                  __stringdata 3F6E                                  ?_ClearDisplay 0001  
                            ___wmul@multiplier 0016                           __size_of_ButtonCheck 00B4  
                       __end_of_RTCGetDateTime 0EF8                                  ?_ClearButtons 0001  
                     __size_of_ShiftOutNextRow 0018                                       _DelayI2C 1D46  
                                    glider@col 0027                                      glider@row 0026  
                                    _string_AT 3F5F                              ?_InitHardwareVars 0001  
                                    _string_ON 3F69                                 InputNumber@max 002F  
                               InputNumber@min 002E                                     ?_init_game 0001  
                           ??_InitHardwareVars 0016                                    _INTCON2bits 000FF1  
                                  _cycle_count 006B                              LM75GetTemp@tempHi 0028  
                            LM75GetTemp@tempLo 002A                               __size_of_RTCInit 0018  
                        set_board_location@col 001E                          set_board_location@row 0021  
                                  DelayMs@time 0020                                    ??_InputTime 0033  
                                RecieveI2C@ack 0019                                       _Read_Eep 1D14  
                              ??_HandleButtons 00B9                               __size_of_DelayMs 0050  
                             __size_of_DelayUs 0016                           DateStringLong@length 00C1  
                   ?_calculate_next_game_board 0001                                     _EECON1bits 000FA6  
                             __size_of_InitI2C 000A                                       __Hrparam 0000  
                                     RowData@y 0013                                ScrollTime@state 00C4  
                               _DateStringLong 006E                                ??_TimeNumerical 0025  
                                     __Lrparam 0000                           __size_of_InputNumber 00A6  
                       HandleButtons@holdTimer 0063                               __size_of_RowData 003C  
                         __size_of_InputString 0094                                       _StartI2C 1D00  
                             __size_of_StopI2C 0010                               __size_of___awdiv 0084  
                             __size_of___lbdiv 0034                               __size_of___awmod 0078  
                             __size_of___lbmod 0026                               __size_of___llmod 0062  
                             __size_of___lwdiv 004A                               __size_of___lwmod 003E  
                               ??_ClearDisplay 0016                           __end_of_swap_buffers 1BE0  
                             ?_get_board_value 001E                                 ??_ClearButtons 0016  
                             __size_of_blinker 0024                                ?_RTCGetDateTime 0001  
                              i2_DelayFor12TCY 1C34                         __size_of_get_neighbors 00C8  
                                bcd_to_dec@bcd 0017                                    _buttonState 003C  
                                     _dateTime 006D                                     strcat@from 0016  
                               InputString@max 0028                __end_of_InitTimersAndInterrupts 1982  
                               InputString@min 0027                           __size_of_SecondsTime 0062  
                              ___lwdiv@divisor 001E                                    ??_Write_Eep 0019  
                              ___lwdiv@counter 0020                               __size_of_low_isr 0052  
                                     __ptext10 0BAE                                       __ptext11 142C  
                                     __ptext20 0AE4                                       __ptext12 1764  
                                     __ptext21 0D1C                                       __ptext13 1982  
                                     __ptext30 1BE0                                       __ptext22 006E  
                                     __ptext14 1B54                                       __ptext31 0410  
                                     __ptext23 19BA                                       __ptext15 17B2  
                                     __ptext40 18CE                                       __ptext32 13B4  
                                     __ptext24 1D14                                       __ptext16 19F2  
                                     __ptext41 075C                                       __ptext33 02D2  
                                     __ptext25 1948                                       __ptext17 0EF8  
                                     __ptext50 1A8E                                       __ptext42 16C6  
                                     __ptext34 188E                                       __ptext26 1A26  
                                     __ptext18 133C                                       __ptext51 1D52  
                                     __ptext43 1D26                                       __ptext35 1B78  
                                     __ptext27 1676                                       __ptext19 15C0  
                                     __ptext60 1D00                                       __ptext52 1CEC  
                                     __ptext44 1C4E                                       __ptext36 0F92  
                                     __ptext28 084E                                       __ptext61 1498  
                                     __ptext53 0932                                       __ptext45 1B9C  
                                     __ptext37 0C76                                       __ptext29 113C  
                                     __ptext70 190C                                       __ptext62 1D46  
                                     __ptext54 1B08                                       __ptext46 0DBC  
                                     __ptext38 065E                                       __ptext71 1846  
                                     __ptext63 1CAC                                       __ptext55 1A5A  
                                     __ptext47 1AE2                                       __ptext39 054C  
                                     __ptext72 1CC2                                       __ptext64 1C1A  
                                     __ptext56 0E5A                                       __ptext48 17FC  
                                     __ptext73 1C34                                       __ptext65 1C66  
                                     __ptext57 1C96                                       __ptext49 1026  
                                     __ptext58 1622                                       __ptext67 0A12  
                                     __ptext59 1D36                                       __ptext69 1C7E  
                                     _high_isr 0008                                    i2DelayUs@us 000D  
                                     _button_0 00A0                                       _button_1 0042  
                                     _button_2 00A6                                  __size_of_main 0088  
                       __end_of_DateStringLong 02A8                           _clear_board_location 1764  
                                  ??_game_loop 0034                                       _num_ones 1CD8  
                                     _tmrCount 0038                                      num_ones@c 0016  
                                    num_ones@v 0017                     TemperatureDisplay@prevTemp 0069  
                         Write_Eep@GIE_BIT_VAL 0019                       RtcNumberToString@number1 001C  
                     RtcNumberToString@number2 001A                              _RtcNumberToString 0D1C  
                                   _INTCONbits 000FF2                       TimeNumerical@prevSeconds 006A  
                         __end_of_string_IT_IS 3F5F                             ?_RtcNumberToString 001A  
                                     memset@p1 001A                                    ??_init_game 0028  
                            ??_ShiftOutNextRow 0014                                       intlevel1 0000  
                                     intlevel2 0000                       __size_of_InitPeripherals 0034  
                          ??_RtcNumberToString 001C                               ___lwmod@dividend 0023  
                  __size_of_set_board_location 004A                                ?_DateStringLong 0001  
                                _get_neighbors 0BAE                          ?_clear_board_location 001E  
                                _previousState 004A         calculate_next_game_board@cell_is_alive 002F  
                        __end_of_DelayFor12TCY 1C34                           __CFG_CPUDIV$NOCLKDIV 000000  
                      __end_ofi2_DelayFor12TCY 1C4E                                  DelayI2C@delay 0018  
                         NumberToString@number 0028                                   DisplayText@x 0024  
                         NumberToString@strPtr 002A                            __end_of_string_DONE 3F69  
                      RtcNumberToString@string 001B                       __end_of_ExternalHardware 1D36  
                                 ?_LM75GetTemp 0001                      __end_of_RtcNumberToString 0DAA  
                         __size_of_TransmitI2C 0054                                    _temperature 003F  
                                     strcat@cp 0018                                       strcat@to 0019  
                              random_board@col 0029                                random_board@row 0028  
                              ___lwmod@divisor 0025                                       strlen@cp 0018  
                              ___lwmod@counter 0027                                   CollumnData@x 0012  
                             get_neighbors@col 0025                               get_neighbors@row 0028  
                     __size_of_ReadButtonState 00FE                                swap_buffers@col 0016  
                         __end_of_ClearDisplay 1C7E                                 ?_get_neighbors 0025  
                         __end_of_ClearButtons 1B9C                                     _RTCSetTime 113C  
                                ??_DisplayInit 0017                             _TemperatureDisplay 133C  
                                ??_DisplayText 001A  
